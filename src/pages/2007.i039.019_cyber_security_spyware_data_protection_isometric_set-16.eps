%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2007.i039.019.P.m004.c33.cyber security spyware data protection isometric set-16.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 2/26/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 16 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2007.i039.019.P.m004.c33.cyber security spyware data protection isometric set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-02-26T00:20:20+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-02-26T00:20:20+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-02-26T00:20:19+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7z+aMU8nl+3EMskLLeRN&#xA;6kTyxkEK/CrQsjj4+NKHrTDFlAWd3liedvOOjSItzfzalaPI3pXMwMFwJEorEqBQqWqOgHQBTu2R&#xA;1EOEE3y/Gx/R9zuNDPHknHGYC5bA/wDFD9Io9d3pnlj8yrLUUVLrclgnroKEFq8RLHuQTTqtRmNj&#xA;1II/H2tuu7DniO23Wv8AiT+g0Wb5lOgdirsVdirE/wAyNc1jTNGjj0f0/r16zwqZSUAX0nqVkDKY&#xA;2VuLBqNSh27h4TIEBu05iMkTIWAbrvrp8WEeXPzC81yadI99FJd6dYOvr6lEqs8ddl9QA0kA61H4&#xA;5rY6iYsHcRPN7DP2TppcMsZEJ5Y2IE/HY9O5kuj/AJqWzSldYgEFlI7C21a3+O3I5bLMgLyQsAwq&#xA;TUUBZuHTNlCpi4m3ktVpMmCXDMUWfYuM7FXYq7FXYq838y/m0yaw2geXNNudRvleWC7vYlQpaSRM&#xA;UYvE5TkoYbszItOjE5s8PZ/pE8hqP3/H+0+SLSbyBqktj5zvrPWPNj32uXc3pvo0k6yQAKwVniqq&#xA;gOeJ4xgI6r1Vhvl2rxxOMGMKiBzrf4/r3CvYc0yXYq7FXYq7FXEgCp2A6nFUh1HVFVSRIRMHFKGi&#xA;oAwrX6Moy9p6bBkGPJOIJ+za9+7y72yGCchYCeRyJJGskZ5I4DKw7g5ZjyRnESibiRYYSiQaK7Jo&#xA;dirsVdiqC1fWdN0izN3qEwhh5BFJqSzkEhVA6mgP6+mThjMzQV435o/O24vZZLXSw1nYEAeup/fO&#xA;D1+MH4Nv5foYjK/zunxSo3M+XL9r0Gn9m9TkhxGo+R5/seu+VHMnlbR5CeRextmLDoSYVNcnOYkT&#xA;Ici6LLjMJGMucTR+DDvzf8x+cbDQXh8u6RHfw3SPFeTPSV4lYcSPqpHx1DdfiA7rk4QYA0+ezrOh&#xA;a9fWl5ehNJ1ezZmLsjyRzKVKekJiTLGByqPV5gb/ABoNshk088gMYbkjl+P0/N2eg1OKOeE5+nhk&#xA;DYG3y/V/pXrf5S6NH5h8t/pnTrhS0N9JFLEystRGEIoxA/ZNen7XiMwI6OUBR527nV+0EMszcaBj&#xA;XfRs/fs9uzNeTdirsVdiqS+a9Ni1TT006QsguJABcRErLCVBIkjYbhgaD3BIwESI2b9POMZcUhdd&#xA;O95iVbyAlzoWoEXVlrKTCC/hYCRgkRVkaN1bkRUE0bbr45gSxzx8VixLq9Zjz4dacfBLgyY6AhLk&#xA;aI5EV92/cw/QdEm1m21Gyiu3sy8cdJlBZQVlV/jUEEqQhBoCd+hynQS4ST0p2PtRHixQiK4uLa/d&#xA;y/t2fTGbZ87dirsVdirsVfP6vZaL+YXmi6ntrkQSyXC3GqF4/q8S3VwXq0NPV4oyUZ1ZqD4iAM6W&#xA;U5TwQjtsBt12DFr8nrOSG61lb2FP0hYNFAszqrSxqfUDostC3A8egNMs7UIPCY8pfsQ+gc5Zm7FX&#xA;Yq7FXYqlfmGd4bBpFr8IJIBpWgrmLr80sWmyTj9UYEhu08BLJGJ6l4h+cAvtU0aN/rUdvYeuDdxy&#xA;s8asZBwhLekkrMElZWKcd/EUrnBdh9p+Nrp5Mg4skonhoDoLI36mIoG/vdzqtNwYgByHP8eRe0eR&#xA;7ZLXydotvHMbiOKygWO4Y1MiBBxcn/KG+d12dxeBEyjwSNnh7rJNOmz1xmjYTvM1pdirsVdirzb8&#xA;+5ZE8n2qqBwlvo1c1NaCGVqU7hgpBr2zH1WYwxmv4tnfezmnjl1Q4v4Bxfj52858x6d5TtfIGiQC&#xA;SC21y7lgmu7iVl9b0rlHJZiGakaim1Ow7nNecUTCIH1l6SGtyx1OXJkJ8CII8rFf7Is58o/nT5au&#xA;fN+jeQtNgeeCSxjFrq5dVRnitFn9MxDkVIQFWq1Q4K0zdGNPAZJmcjI8ybeoXFpBcLSVakdGHUfT&#xA;jGZHJgwTzl+V1peC41jy/a21r5pCkQXlDHy5Di5YUkiLlSRV4zy6VWtQTkPRlCuqafl75TuPLtgY&#xA;mhhs1uB611aQV4fWnp6rJvQJUUXqeNK9N5Zc3HvW6ZCI62fsZblTB2KuxV2Ksf8ANPl/VNWudHms&#xA;NQNgun3iXF0FBDTwqwLxcgaBWA3BBqadMuxZRC7F2FRj6OJJUWVElhRhIC4VqMpqrAEH4geh7YDM&#xA;EIUYfJvlyC5uLiGzWKS6Cif0y0YJWvxAIVCk1340rmL4MLuvx+C58u0s8oxjKViPK9/vTrLXBdir&#xA;sVdirsVedfmT5G1nUknPly2tml1WJrS/Mx9MRrJyDTin2jSRqr3ND89lo9VGP1k+ncfqQQmPlz8t&#xA;rbRbieVbuSb6zFbRzFqVJtYvSXjttVepJORza8ziBXK/tWmaZr0uxV2KuxV2KqF5ZQXkDQzglGBX&#xA;Y0IqKVGVZ8Iy45Y5fTIUWeOZhISHMMV1z8u9PvfL2p2NPrNxcWs0dn6yqypM0ZET8TQFlehFe+aH&#xA;s32ZwaXL4gMpSHLpXy5/d5ObqO0Z5I8NADqnPk2wvdO8oaHp98gjvbPT7W3uowVIWWKBUdaqSpow&#xA;PTbOjdenGKuxV2KuxVK/MnlrSvMWmNp2pIzwcuaFGZGSQKVVxQ0NOR2ao8RkZxEomJ5FyNJqp4Mg&#xA;yQ+oPK73/nHuRtK1SCHUIbm+uVhh02a4iosEfrI1w9CJv3hhVkQgbV6jqMbTaXw5Xdu57V7d/N4x&#xA;AR4d7PX5PRvJmgRWGhaWb3S7ay1m1tFtZ3iWNmHAnlxlQfZkYmSlerb71zMLzzIsCuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxVI/N/nPQ/KemLf6tIypK/o28UalnllILBF7DZTuxAy/Bp5ZTUVYn5a/NHWNcvLyODSHKkxfo+K&#xA;nFkSh9aS4ZmoAGpwFASO2+Q1PBAiMDxy61yHxdji7OPDx5SMcOl85f1Y8/jyeiwGUwRmYKJSoMgS&#xA;pXlTfiTQ0rlbgSqzXJfixdirsVdirsVYP5n/ADa8ueWPN0Pl/Wy1slxax3MV9SsYLvInF6bj+769&#xA;MzcOhnkx8ce/ki2QWvmrSbgMyyfuq/upV+JXQ9HUr2I3+Wc5PtjHjyShlEoSia3B5d/u63yrq5Q0&#xA;siAY72m6srKGUgqwqCOhBzaxkCLHIuORTeFDsVdirsVS/VNcsdNjeS6dY4oVLzyuwREUCpLM1ANs&#xA;ux4TLki0nuvzF8urawyWEh1O6ukWS1s7Xizur/ZZmJCRoafadgMcmLwwZZCIQHOUtgyjEyNAWWRW&#xA;d3FdQLLGwNQOSg14nuDmFg1WLMOLHISHkynjlE1IUrZewdirsVdiqXX2uWlrcC24tLNsZAo2RT+0&#xA;xNBmo1nbOPDl8ICU59a/hHeSdvx0cnFpZSjxch96VS+a3e9iSAARcxzPbj3LE+A8KU8Tmnl7Qyya&#xA;iOPCOK5VQ3262eu3dQHfIOUNCIwMpbbfj8fcyG1u7W7gWe1mSeB/sSxsHU9tiKjOwlEg0XWKuBXY&#xA;q7FXYqpXd5a2du9zdTJBBHu8sjBVFdupwxiSaCsb1bznZrPHptpK0d7dpWJwgLRhwSjsrig2Uniw&#xA;r45lY9MTueSLZLbOz20TsasyKSfEkVzFkKKWC/mvotzq8/laCGP1I4NVW4uyTxCwRwuXYkb96Cnc&#xA;jM7RSAjMHrGkxkYkEcwj9JPly3v7uK2t4rZNMhjM83OPhBUuF+AEujMOVT+0OvbMeMDGIEfpPKuv&#xA;Jtz5ZZJcU5GUjztk9hPNPaq80PoSVZTEWD0CsQDUfzAA5Q1EIjFDsVdirsVQ19qFrYxCW5YpHvVg&#xA;rNQKpYk8QfDG0iJPJ5fqt35W86tLOR6ukXtYplliH72FV4BiGHqJx/vImUgite5Gc9qfayWj1fgS&#xA;iPDBHq35SA3+Bu+8bc93YYuz/ExcYPq7nnf5O2eoWWsXHls3s093bxypPp6kvbiZJhxuIyQhjDJR&#xA;fs0Jb4mGwzofaHEe0uzY5MMRcuGUSaEvd7/i06c+DmqXuL6XskeOzgjcUdI0Vh1oQoB6ZVgBGOIO&#xA;xoOPkNyNd6tlrB2KuxVRvbkW1s81KlR8I8SdhkoR4jSl4F+Yvnny5rHmmz8o6rNMumJcGXXJoA55&#xA;skTNDbKsXJ25SlAadGp4bb/TaecIGcedbfrYsr/LPynZW1hHDMk3MxB3jmBjlUN/dwuOq+klFI/m&#xA;G+eW6/Oe0+0ckM1+FhJjGIO13V357n5C6Du4/uMMTH6pdWf+VLT0NMLdRNIzoT/J9lfvpXMz2W0v&#xA;haUn+fIke7kPutxe0snFkruCc50rgOxV2KuxVg3mt3TUL2R34WkKxPKSdqsoVQAN2Zm+FQBUnYZw&#xA;3bXZ+p1eqOPCLFAnehy6u40mWGPGJSYxreqaHfaro/14KPLV1aSEC4FFuLuP0RFBNETSoikd1ibq&#xA;wrSoGdt2H2dDDCUoR/ejhjxWDcYjnEjYCxRrqN3X6jLKRonbnXvZ95G0+x0by9ZaJCQklrGeUBrV&#xA;CzFylT1K8qHBl7Uw5tRKAkDMcx7vx0azikI8RGzIssa3Yq7FXYq8v/Om5SA6ZJI1UiWZzERUblF5&#xA;dRXrTMrDm8LHOdXTlaLS+Pmjjvh4jzYF5n85Wp1q51Wxn9ON5OcM8nwgAIF2B9lzSZ9fknMCBNDk&#xA;9xoexMOHBecRBr1En9PRm/5Q/m15f1exs9FvdSZtelmnhgimB/eCH4k4PSgDx7orGvwt4Zk6bFOA&#xA;JnIyvf3eTxXaGTHPNI4wBC9q6+bMPO03CK2QoriTmPiAIBVkcGh7grtnP+1PaeXTYRCG3iWD39OX&#xA;3NvZunjkkSf4UgNz+jvImq+YTpcl7NPFFSzkUiWeENRU4sGP+7WoKZk+xuDN4RjlJozNe7hAseW2&#xA;3uY9ozjxjh7mVeSvLyeXfLVro6GRltmm+KV1kc+pM8leSLGCPj+H4RtnR5cpyS4jV+TgGr2TvK0O&#xA;xV2KuxVgn5txed/0RZ3flGFri8tZXe6gXg3OExMtDG5/efGQeK75l6Q4+Kp8it0g/Nf5ZPL9Y1TQ&#xA;Ln6hq7CRg/pCWN2dAvxRsaRseCjmu1B8Snamo7Q7N02qo5Y8u4kXXTbn9++zfg1E8f0lf+Wvk2XR&#xA;WW6muW1a8YOk2pz8A6h6Fooz8UoT4VPEmlco0/aU8pjDBH/BY7Wdtx/NjzoDvHyZ5cIiCZn1l6Jm&#xA;zcV2KuxV2KrJoY5omikHJG2IwgkGwrDtP8jeWNH8wXl7pOmB9dvXe5m1G5DMqczV+DNUDkW6IO+/&#xA;SmYnaHaupmRp8Q9VcyKgB7/4j5C/sLkYsUa45H093VObny61zKJzcG3llAW7WGoV17jt1zQ6j2el&#xA;mn4hyeHOW2QQupd/z87cjHrhAcNcQH030TpESNFRAFRAFVR0AGwGdLjhGERGIoDYOASSbLeTQ7FX&#xA;Yq7FXnnkyHVtXs9aLT+i1tql5ZlJUUlmiejEsNmFWNGpXb7hphwXx739zn6/NhmYnEDH0i/f1oft&#xA;+DK5PLytYw2kciQpC4dFWJeKlQOIQArx4kV2zF7SwZc8QMeSWL3dftDjYckYm5DiTG2sbS2C+lEi&#xA;OF4lwo5Ee7dT9+Om0OHDXBGINVdb/Pn9qMmaU+ZKvmW1OxV2KuxVivnvyKnmq3RTcm3kgimWAcQQ&#xA;ZJAOJZuvEFdxT5UwykTjlAfxOVodR4OaOQi+Evnv8xfJXm/yxplldzW0JeC8BhUtFMsy28Es8jCM&#xA;8qp6cJJ5qPClTTNdo9NKEyZcnp+3e2MGp08YYyTKwSKIrY8/2Wm+i/kz54vNd0HVG8vWnl+LSdVt&#xA;Lm7pcgzzRJMHmaP0iyKFUGg29s2ZLxwfSskMUoAkRXANQGAND475RkxQmKkBL37soyI5Gl2WMXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FULY6Xptg1w1lbR2xu5mubr0lCepM/&#xA;25Gp1Zu574qisVdirsVdirsVdirsVQuo6TpepwiDUrOG9hBqIriNZVr8mBGKorFXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FV&#xA;skkcUbSSMEjQFndjQBQKkknoBiSmMSTQ5pbonmbRNbR2065Evpu6MjBkesbcSwVwpKnYhhsQQRsc&#xA;PDtfRlkxyhIxkKI700wMHYq7FXYq7FXYqhb7VdOsIBPd3CRRH7JJqW7/AAgVLfRglIR5tuHBPKag&#xA;LKtHdW0kjxxyo8kZ4yIrAsppWhA6ZIxIalTArsVdirsVdiriQASdgNycVQun6pp+oRerZzrMnemx&#xA;HzU0I+nBGQIsNubBPGamKKKwtTsVdirsVdirsVQ9xqFjbzRQzzok0zBYoyfiYk0G3XrtXAZANsMM&#xA;5AkCwOaIwtTsVdirsVdirsVSOXzhpNtqj6bfiWxnDcYXuEKxTLSvKKXdGHtWo7jL/wAvIx4huFRd&#xA;vr+mTD+99MkgAPtUHdTXpQ+OaWPa+CyJHgkDVS2+fd8XIOmn039yOmVWhdWpxKkNXpQjvmzccGng&#xA;OraRdHyhrutaXcy6bqllG9xDBCTFNG0Q5gRceFOnEjhyYdftUFX5vBh1nhbR+m99pcWwqPv50dtn&#xA;bZNVlzYayevnR/iH+dzI8j83vdk7PZwOxqzRozH3Kg5fMUS6lWyKuxV2KuxVh/nqLUL26sdLt7ea&#xA;W3uFla4k9QR2iUXin1hVKyy1Y/DGDxP7VaYy1UcUCQf3n8Iqz+z8U3aeMTMGd8HVBabolppd7Nqu&#xA;sX8Fy1sBFE8vEtGaJwESAhYdyyiNVqRx3rtkdPi4gDIXl69a/HNzdVrpmPBAeHh7h1955y+7yYP5&#xA;2s4fKHmXV9bsZFi1++uorzTvjKvcK/BDbrHWkis3qKwAqKhuwzoNNLxcYifpAo+Xm6p7jbvI9vE8&#xA;g4yMil1HZiNxvmikN2SpgV2KuxV2KsZ1XzxoMWpNo0F0s+pRD1LmGFgTEisoYSEfZLcqUzB7V7QG&#xA;hxDLkiTGR4R76J/Q5Gn0xymglV1oYvdSh1TTL1NNuZfgMkVFkcgOxaRK8ZqkKOJA25Hl0GT02owa&#xA;nGMmM8MpC/2EfAudj1WXEDjyR8TEOh6f1Zc4/czDSXvWsI/rzI92tVmeIEIzKaVAO4rmXRA35uty&#xA;mHEeC+HpfNF4tbsVdirsVYnqHmW+1DWbry7ozCzu7QK13fTJy4o1P7lOjNuPtbZVKZMjCPMO2w6O&#xA;GLFHPmHFCViMQeZH849B7t0r8iLEmr6gbuPneesY4NQuCzTzBQS4DN+zxAYUC1FdtshhMeI7b955&#xA;lye1Bk8KFH01ZhHaMe739xJvfruz9WVlDKQysKqw3BBzIdCRTeKHYq7FXYq4kDqadsVYB5v1/TZv&#xA;MMnlfX9IMui3MUNNTaReAmuC6xx8RwkRiYm4tGSwpXYAkZ+DERDjgfV3e5CR+UdFYWepro1xeX+n&#xA;29831drtneVUlhiJWNnoXjD8qEe/XcnlvbDQ58s8OXHEegHiEee57uvmHY6DNCPFGXV6hqOoWtnG&#xA;PXfh6tVQgV9q/jmXru0sWlo5L9X4Li4sEsl8PR4JrWkXkOsJbPfXOiWqSXEcMET0ikEwQxlgytFN&#xA;E/FtqFaUStRnVYMmOcOKIjPio33/ABaTYNF6/wDlx5hutd8q293dIi3MLy2kzRf3TvbOYmeP/JYp&#xA;UZrtZiEMlDkd/mgMnzFS7FXYq7FWL+e9LvZ7ew1LTntor/Srn143vCywcWikhYOVo3+7aj3y7AYx&#xA;MiRuY15875p8ngWsTfmh5y8x3OmWdjLaSRkpeXFfhRHUijzRj00QqSOMe7j7XMiuXGXQDhH45qZE&#xA;iieT2vyJ5Nv7PSbOPzFd/p+8s5PVtLi7iU/V6gAiFm5SN3ozH5UyuUzGwDzYs6zHS7FXYq7FUPqE&#xA;UMtjPHO7xwujCR42ZHCkblWSjKfcb5GeeOKJnLlHdMYmRoPCLr8qNX8u315r/kqZtStZ0eK6sZmX&#xA;6zHyIflHI4ZXKkVo/buScp1ObS9u6UQJ4eCdjnzA5SAI2IPMfopy8c56ae45hJL784BYaow0jS5L&#xA;LWIKeub8JEJQoYvFcRNV6pRfT9MhiTTYV5ZHs77O5dJpxjzcEvUd4Enn13AXWaoZJXG6L3jyD5gv&#xA;df8ALcGp3mlzaTNOWJtZyGJFdnU0U8T25KD+vMjVYhCfCDxOEGRZjpdirsVdirzrz7caj5X1S881&#xA;2dq91BLZrDcJFG0siuhLB6CihQqfEzGi9aHpkBiJnxCuTs4azGdMMUxImM+IVy3HU+/y+Tyfyvrf&#xA;5i+btft7/T43stBspOMpDiKEqBUxSy8f3nMAc0ROPfita5k4sERsHFz6zJkNk1vdD8fad3vvkjzB&#xA;p+t6Kk+nStcWcBEC3DgqWKorDZgpPwuNyN/fBmweEeEtEpmRJPVkGVMXYq7FXYqwr8y7TT1sYrvU&#xA;Tc3Gn3E9tY3Ngs7Q29JpGRJWClCDzlXkeXT5DLsEBIkHuJ+SpXc/ll5XstXGraJFFZXvqETQBBNC&#xA;7yKykhSeUThWIQoQB/KclpNbCQlCJEq50dx70yiRzUvy78qXFhCsNrevYXtq0RuBG7TJdIqJ631i&#xA;KXo5kLgOlKDj8sxcPtBp9aZCH1R6GgR7q6fjubcumnjonkXpxAPUVp0rhIBabSDVvI+g6vpt5pt+&#xA;jzWV6eTQlgBGa1rFQfBmP2bpY6OcpYiRxG6/hHuHRuzZzkAutuvX4pno+kado+m2+m6bAtvZWyBI&#xA;YlrsB4k7k+5zMyZJTkZS5lpRmQV2KuxV2KqF9ZWt9ayWt1GJYJVKSRsAVZWBBBB2IIPfDGVKp2Ol&#xA;WdnaxW0S1jhXigNBsOlVUKv4YTMqUXkVdirsVdirsVdiqEutLtLmVJXUrKjA80PEsAQeLeI2zX6r&#xA;szDmmJyHqiRuNrroe8fgN+PUSgCByQ1z5V8t3WqQ6rc6bbzajbikF08amRRvsCfmc2ozzEeEE00J&#xA;oAAKDYDoMqV2KuxV2KuxVplVgQwBB6g7jFVCOwtY0MaIFj34oKcVr4D575IyKoTy95a0fy/ZNZ6V&#xA;CYYHKM4Z3clo4Y7dTVyaUihRdttsM8kpmzzVM8grsVdirsVWyRRSoUlRXQ0JVgCNjUbH3xVAz6Qo&#xA;dZbGT6nNz5SOo5B1ofhKEhe/0ZqsnZURISwHwp3vXIjfYx5fZt0cmOpNVMcQ/HVda6LY2t/JewKy&#xA;SSqVdAfg+IhiaHvVfHDpux8GDPLNjBEpCiOm5v8AR315Lk1U5wEJcgjs2jjOxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuBBFQ&#xA;aj2xV2KuxV2KuxV2KuxVZPcQW8Lz3EiwwxjlJLIwVVHiWOwwEgbllCEpGoiye5eCCKjcHocLF2Ku&#xA;xV2KuxV2KtPIiU5sF5HitTSpPYYpAJWiaFpWhDqZUAZ4wRyCtXiSOoBoaYaQvwK7FXYq7FXYqskm&#xA;hi4+rIqc2CJyIHJj0UV6k+GEC1X4FdirsVdirsVdirsVdirsVY/r/mK2tb6LTXmjg9ZHMzSiRWC8&#xA;aq8R48HVSKSfF8NRXLI1EcR5fjn3NmPFLIajz/HL9SS/p3UdOk1Mj98beFb22i5qwaHfmqMlWYEL&#xA;VajqchGcpEgbnpv+Phz83NOnjUTP0wvhMgDz8x3jr39E/wDLPmuw16AtArRTx7TQSCjKQaH2O46j&#xA;Ig30IPcWjVaSWIjcSieUhyP6j5FO8LiuxV2KuxV2KvFNU/M3UdSt7nSdXsGbSuJS+urNSJ0ZJ0Kf&#xA;uyW+0oaoUHfwBqM7U6HGY8PFwmXK/wBbndn5MmLJ4sI8XB+ovVfKcsL+XbBYphcLDCsRkFdzGOO9&#xA;S/h4nNfCPCALtr1sjLNKRiY2bo+abZJxXYq7FXYq7FXnXmvW7y6lu9KvY4jZJMXhuIy5ljWM0LPE&#xA;COQTmGqHU7dKkZVK6vb8fe7vR4YxMZR4uKuXf5XW18uo72Ka3F5jtdS+vXEk8dxYIYotSgL8lijZ&#xA;wR+94l1JDmj05dmZRTJY9VlwemcRLGfxz/QXLGi0urjeKXBk7j194H3x27wHoP5c+aNW1uyuI9UE&#xA;bXNn6NLqIFRMkyc1cpQBSRuafcMys0YVGUPpk87mxSxzMJc4mmX5Q1uxV2KuxVgf5sXYNlp+ly2k&#xA;txb3srtJJbEevGYgoUojLxb+85N8QIVTSpOW4shgbHNtwxBO/JIbHzr5p8tyW8F5GdX02VVkSjM0&#xA;/pMpdTBJxqzt2jn4dviA3wcfH9UeGXePpLlZ9NjrixT4h3HaQ9/SvMPR9C8y6NrsDS6dcCRoqCeB&#xA;gUmiJqAJI2oy1oaHo3UEjIEEOAmeBXYq7FXYql+s6nNp0Ucq2ktxCxYTyQ0YwqELeoUO7CoptleW&#xA;RA2cjTYBkNcQB6X135WwyTz/AHUOraDBxSe2v24XVyCVo8jcIwu4TqVJB3p03zT6DUznCHi/3sSR&#xA;L3/duCD7uTuT2SODKeRhyHu3Pn3/AKWXP5ghhv8A6vcwSRW7ryhv6coGI+0rMPsMDX7WbaOeMuXL&#xA;v6OqjozKHFEgy6x/i+XUe5h/5m+YEMllptqsslxa3C3spgRZXCwAh/3TA1VPUDs5HFdu5Wur1PaZ&#xA;lKePT2cuPnseEc9if0dfmRn9l4IiX7yIkMg4Y2etjf4eW7x+bzBrLfX5opXhN48q+lsSYpJyVWgq&#xA;ASCCQvfMeGaYHP1Eb139a8r5Pew0cDjgMkRcP0bA/Lvey/lnpXmOyvNSOvxSLeAxxLM9GEkaKQrB&#xA;x9omu+/gO2djrJwIHA+T2XoGYCuxV2KuxVbL6npP6VBLxPDl9nlTatO2ApjV78nhNzqNp5T1BoZr&#xA;d7rTtYR/rMM8JDK9vI6yogbZgrHkrnqCMddrpVESiDHq9H2T2ZDMJHHMxyxPp93Qnb3vRPJOgrp8&#xA;8d7a3gns7pHVogSwDBiVIkqOfwrT4gf8khdsjDGASYn0/j8buD2hq5TjwZI1kiefKx7unwod4tmm&#xA;TdS7FXYq7FUNqep2Ol2Mt/fzCCzgAM0zAkKCQKmgO1TkoQMjQ5qxBL3yX588stqkHqJDOZUEiqv1&#xA;hXgYr0X1FJ+GqnrQ7UyrJg4wQRTnaTX5NNMSibr5MV0Pz/qHmPT/ADZpsek38s1kZAGdR6ipMGSF&#xA;Xj+FlNI6siioPQU3yGYSjEj6rczRHFPNjlYx8JF3yNHv7/f82c+RdHl0+G5d7U231lYWqaVkNGJd&#xA;qM3xHlvsMu4r8nC1kgaF8RF/sZTi4TsVdirsVYT+al95X07RV1HWr1rGeESRWEsSCWRnkWrRiM7M&#xA;G4Cu69PtDJxvomJo28p/KrztbeZtDtbDzRIqT25aHTdTiAeRCZ2VVuKF/SVlkWNea8CABz5bZfDF&#xA;IxsEUOnXbqz4hWw9T0D8tNA1vTfN+uy3kyzae0MUdiQytTi7cqBVUqCApo3I/wCU3XMXxOLmzy46&#xA;AN29MxaHYq7FXYqxfz7cavDpgNrfQaZZOfTur+YkNG0hCRcW5IqVcgHlWv2e+S8MTiYgEyPd9v2N&#xA;mGQjKzuGA6B590bU7ibSJ2fTdcR1D2N4GUs8TB42iMqpy3AZKqr96DOD7T7D7Q7OEpwkZ45AeuO/&#xA;Llxc+Ejv5DkJO4w6qGQjv7vfz/H2Ml8vfmJ5VtdVfyrqtyLTVCwkjNzQRTeruAsh2517NSvaub/2&#xA;T0uWWg8T6vXK+/4uF2iay7dwTQ+U70/monmgLEumpozWOzESm6e5EhYpTjT0lpyrXt2zcRxxjZAA&#xA;Mufn73CMiRR6Jovk3ysuqDVRpkAvgeSy8dgwNeYT7Aav7VK5HwIcXFW7mntPUHH4RnLg7v2868uS&#xA;c5a4DsVdirsVdiqE1afULfTbibTrVb2+jQm3tXk9FZG/lMlH4/dhFXurE9E8palr/lBbH8xrW1vL&#xA;92ZlEOzxIyqB+8TjxkBrUo305k5MsYzvHy8+9MZGPI0yTy95ftdE0mz0yCWWeKyT04ZJ25PxFQoJ&#xA;2rQGmVZcpnIy70JnlSuxV2KuxVL/ADDp15qWjXVlZXQsrqZCsN00azBG6hvTfY07Y79GUSAdxbEP&#xA;LnkLzDoWmiBL2CaRG9RkjjEUczOxMzOvHZ2LcvtU2A+HdsJyTJ3b5SxdAT9n605tdJ1S4vbO5mtR&#xA;ZtaycpLh5AZnjFf3SpEXARjQtyk+g5GVkrGcYg0Sb6dPv6e75MmwuM7FXYq7FXYqgNW0Sw1SzktL&#xA;uJJYJaepDIqvG9DX4kYEHffJxnSvMYv+cdPLEHmWHVLC5udNs4Tzaxt34gvWv7uUH1EQ7hl677EZ&#xA;PxAr1HT9H07TxSzhEKhAgRSQgUbgBB8C/QMo4RZIHNslllIAE8vxz5ozC1uxV2KuxVKPNvl238x+&#xA;X7rR7inpXPpkhi4BMUqyqKxsjDdBuD9/TLMWSUJcUeaRXVLvOX5b+VvN1p6WrWi/WQpEV5F8M0ZP&#xA;dW+ZrQ7HuDl2n1k8R9J2Y0xnyz+ROhWGqLquu3c2vX0BAtGum5KiJ/d8hSrsvifalMn+aEIGGGIx&#xA;xO5ERW/VlKRlzNv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:d690075f-6522-894e-8b3e-4c2db0ea2ea0</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:d690075f-6522-894e-8b3e-4c2db0ea2ea0</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:05265a43-5e58-483b-a637-f47ea9136070</stRef:instanceID>
            <stRef:documentID>xmp.did:80419ee9-c7ae-f14e-9eab-8f0d19356d16</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:80fef2d3-8a7f-fb49-8b37-9e7aba5b5acb</stEvt:instanceID>
                  <stEvt:when>2020-07-28T16:27:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:47aa5425-7308-fb41-ae58-a3384e44029d</stEvt:instanceID>
                  <stEvt:when>2020-07-30T12:25:03+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:92f6a377-a2db-5d49-b1f1-0abb0126b000</stEvt:instanceID>
                  <stEvt:when>2020-07-30T22:28:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:43b34548-8e27-d14d-8347-94521aff7776</stEvt:instanceID>
                  <stEvt:when>2020-07-30T22:29:05+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:80419ee9-c7ae-f14e-9eab-8f0d19356d16</stEvt:instanceID>
                  <stEvt:when>2021-02-25T17:34:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d690075f-6522-894e-8b3e-4c2db0ea2ea0</stEvt:instanceID>
                  <stEvt:when>2021-02-26T00:20:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=243 G=242 B=252</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>243</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>252</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=218 G=218 B=249</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>218</xmpG:red>
                           <xmpG:green>218</xmpG:green>
                           <xmpG:blue>249</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=211 G=211 B=245</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>211</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>245</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=218 G=218 B=249 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>218</xmpG:red>
                           <xmpG:green>218</xmpG:green>
                           <xmpG:blue>249</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=191 G=190 B=237</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>191</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>237</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=244 G=244 B=250</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>244</xmpG:red>
                           <xmpG:green>244</xmpG:green>
                           <xmpG:blue>250</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
364.951 287.112 mo
363.644 287.112 362.169 286.685 360.61 285.783 cv
359.439 285.107 li
359.713 188.841 li
359.741 178.811 li
359.755 172.677 355.447 165.207 350.11 162.129 cv
212.209 82.5081 li
212.227 75.8769 li
212.237 71.5332 214.418 69.0273 217.586 69.0273 cv
218.891 69.0273 220.364 69.4531 221.922 70.3514 cv
360.994 150.649 li
366.331 153.726 370.64 161.196 370.626 167.331 cv
370.598 177.361 li
370.304 280.265 li
370.294 284.607 368.116 287.112 364.951 287.112 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.949804 .94902 .985882 rgb
f
354.066 298.592 mo
352.76 298.592 351.285 298.165 349.725 297.263 cv
346.987 295.683 li
347.038 277.948 li
359.439 285.107 li
359.42 291.745 li
359.41 296.087 357.231 298.592 354.066 298.592 cv
212.166 97.7155 mo
201.332 91.46 li
201.343 87.3572 li
201.353 83.0132 203.534 80.5074 206.701 80.5074 cv
208.006 80.5074 209.48 80.9333 211.037 81.8315 cv
212.209 82.5081 li
212.2 85.9143 li
212.166 97.7155 li
f
359.439 285.107 mo
347.038 277.948 li
347.27 196.582 li
347.298 186.697 li
347.311 180.652 343.065 173.291 337.806 170.258 cv
212.166 97.7155 li
212.2 85.9143 li
212.209 82.5081 li
350.11 162.129 li
355.447 165.207 359.755 172.677 359.741 178.811 cv
359.713 188.841 li
359.439 285.107 li
.90945 .908035 .974533 rgb
f
196.402 89.0513 mo
193.973 90.4629 li
195.704 89.4568 198.102 89.5984 200.749 91.1262 cv
203.178 89.7144 li
200.532 88.1865 198.133 88.0449 196.402 89.0513 cv
cp
.956863 .956863 .980392 rgb
f
gsave
196.402 89.0512 mo
193.973 90.4629 li
195.704 89.4568 198.102 89.5984 200.749 91.1262 cv
203.178 89.7143 li
200.532 88.1865 198.133 88.0449 196.402 89.0512 cv
clp
200.749 91.1262 mo
203.178 89.7144 li
200.532 88.1865 198.133 88.0449 196.402 89.0513 cv
193.973 90.4629 li
195.704 89.4568 198.102 89.5984 200.749 91.1262 cv
cp
.996078 .529412 .52549 rgb
f
grestore
344.206 304.098 mo
346.635 302.687 li
348.343 301.694 349.403 299.583 349.411 296.582 cv
346.982 297.994 li
346.973 300.995 345.914 303.105 344.206 304.098 cv
cp
f
gsave
344.206 304.098 mo
346.635 302.687 li
348.343 301.694 349.403 299.583 349.411 296.582 cv
346.982 297.994 li
346.973 300.995 345.914 303.105 344.206 304.098 cv
clp
344.206 304.098 mo
346.635 302.687 li
348.343 301.694 349.403 299.583 349.411 296.582 cv
346.982 297.994 li
346.973 300.995 345.914 303.105 344.206 304.098 cv
cp
.827451 .827451 .960784 rgb
f
grestore
347.298 186.698 mo
349.727 185.286 li
349.699 195.18 li
347.27 196.582 li
347.298 186.698 li
cp
1 .4 .380392 rgb
f
349.699 195.18 mo
349.411 296.582 li
346.982 297.994 li
347.27 196.582 li
349.699 195.18 li
cp
.827451 .827451 .960784 rgb
f
337.805 170.255 mo
340.234 168.844 li
203.178 89.7144 li
200.749 91.1262 li
337.805 170.255 li
cp
.996078 .529412 .52549 rgb
f
347.298 186.698 mo
349.727 185.286 li
349.744 179.243 345.493 171.88 340.234 168.844 cv
337.805 170.255 li
343.064 173.292 347.315 180.654 347.298 186.698 cv
cp
.956863 .956863 .980392 rgb
f
gsave
347.298 186.697 mo
349.727 185.286 li
349.744 179.243 345.493 171.88 340.234 168.844 cv
337.805 170.255 li
343.064 173.292 347.315 180.654 347.298 186.697 cv
clp
347.298 186.698 mo
349.727 185.286 li
349.744 179.243 345.493 171.88 340.234 168.844 cv
337.805 170.255 li
343.064 173.292 347.315 180.654 347.298 186.698 cv
cp
1 .4 .380392 rgb
f
grestore
190.88 207.866 mo
190.859 213.911 195.112 221.266 200.371 224.306 cv
337.427 303.432 li
342.686 306.471 346.967 304.038 346.981 297.993 cv
347.27 196.582 li
347.298 186.697 li
347.311 180.652 343.065 173.291 337.806 170.258 cv
200.751 91.1247 li
195.491 88.0918 191.211 90.5249 191.197 96.5703 cv
191.169 106.462 li
190.88 207.866 li
f
191.169 106.462 mo
347.27 196.582 li
347.298 186.698 li
347.311 180.652 343.065 173.291 337.806 170.258 cv
200.751 91.1248 li
195.491 88.0918 191.211 90.5249 191.197 96.5703 cv
191.169 106.462 li
cp
.996078 .262745 .25098 rgb
f
327.446 175.251 mo
327.445 176.545 326.537 177.07 325.416 176.423 cv
324.294 175.776 323.385 174.202 323.385 172.907 cv
323.385 171.612 324.294 171.088 325.416 171.735 cv
326.537 172.382 327.446 173.956 327.446 175.251 cv
cp
.956863 .956863 .980392 rgb
f
333.84 178.943 mo
333.84 180.237 332.931 180.762 331.81 180.115 cv
330.689 179.467 329.78 177.893 329.78 176.598 cv
329.78 175.304 330.689 174.78 331.81 175.426 cv
332.931 176.074 333.84 177.648 333.84 178.943 cv
cp
f
340.234 182.635 mo
340.234 183.929 339.325 184.454 338.204 183.807 cv
337.083 183.159 336.174 181.585 336.174 180.291 cv
336.174 178.996 337.083 178.471 338.204 179.118 cv
339.325 179.766 340.234 181.34 340.234 182.635 cv
cp
f
gsave
339.728 296.442 mo
269.392 255.834 li
269.392 158.287 li
339.728 198.896 li
269.392 158.287 li
269.393 195.151 li
339.728 235.759 li
339.728 296.442 li
286.902 252.155 mo
286.903 261.499 li
335.911 289.793 li
335.911 280.451 li
286.902 252.155 li
286.902 239.178 mo
286.902 248.521 li
335.911 276.816 li
335.911 267.473 li
286.902 239.178 li
286.902 226.2 mo
286.902 235.543 li
335.911 263.838 li
335.911 254.495 li
286.902 226.2 li
276.208 246.473 mo
274.885 246.473 273.976 247.533 273.976 249.364 cv
273.976 251.941 275.778 255.071 277.999 256.353 cv
278.642 256.724 279.25 256.9 279.789 256.9 cv
281.113 256.9 282.022 255.84 282.022 254.009 cv
282.022 251.432 280.221 248.303 277.999 247.02 cv
277.356 246.649 276.747 246.473 276.208 246.473 cv
286.902 213.223 mo
286.902 222.565 li
335.911 250.861 li
335.911 241.518 li
286.902 213.223 li
276.208 233.495 mo
274.885 233.495 273.976 234.555 273.976 236.386 cv
273.976 238.964 275.777 242.092 277.999 243.375 cv
278.642 243.747 279.25 243.923 279.789 243.923 cv
281.113 243.923 282.022 242.863 282.022 241.031 cv
282.022 238.455 280.221 235.325 277.999 234.043 cv
277.356 233.671 276.747 233.495 276.208 233.495 cv
276.209 220.518 mo
274.885 220.518 273.976 221.578 273.976 223.409 cv
273.976 225.986 275.777 229.114 277.999 230.398 cv
278.642 230.769 279.25 230.945 279.789 230.945 cv
281.113 230.945 282.021 229.885 282.021 228.053 cv
282.021 225.476 280.221 222.348 277.999 221.065 cv
277.356 220.694 276.748 220.518 276.209 220.518 cv
276.209 207.54 mo
274.885 207.54 273.976 208.6 273.976 210.431 cv
273.976 213.008 275.777 216.137 277.999 217.421 cv
278.642 217.792 279.25 217.967 279.788 217.967 cv
281.112 217.967 282.021 216.907 282.021 215.076 cv
282.021 212.498 280.221 209.37 277.999 208.087 cv
277.356 207.716 276.748 207.54 276.209 207.54 cv
clp
269.392 158.287 mo
339.728 158.287 li
339.728 296.442 li
269.392 296.442 li
cp
.996078 .996078 .996078 rgb
f
grestore
339.728 235.759 mo
269.393 195.151 li
269.392 158.287 li
339.728 198.896 li
339.728 235.759 li
324.878 217.076 mo
324.878 217.076 li
324.877 213.38 li
321.033 211.16 li
322.168 210.626 324.877 209.346 324.877 206.415 cv
324.877 203.443 323.559 200.558 320.703 198.91 cv
318.068 197.387 316.639 196.817 315.138 196.333 cv
315.138 199.412 li
319.238 201.779 li
320.721 202.635 321.326 203.134 321.326 204.429 cv
321.326 206.022 316.767 207.678 315.285 207.968 cv
315.285 211.536 li
324.878 217.076 li
307.175 191.31 mo
303.313 199.869 li
303.935 202.076 li
309.884 205.51 li
309.884 208.377 li
313.435 210.427 li
313.435 207.56 li
314.534 207.578 li
314.534 204.415 li
313.435 203.781 li
313.435 199.278 li
310.378 197.512 li
309.884 198.885 li
309.884 201.73 li
308.109 200.705 li
310.983 193.51 li
307.175 191.31 li
293.524 191.714 mo
292.823 191.714 292.585 192.602 292.585 193.504 cv
292.585 194.63 li
292.585 195.99 292.694 198.494 296.172 200.502 cv
299.01 202.14 li
299.733 202.558 300.422 202.879 300.986 202.879 cv
301.806 202.879 302.36 202.199 302.36 200.147 cv
302.36 198.533 li
302.36 197.619 302.25 195.729 300.986 194.724 cv
301.143 194.789 301.282 194.818 301.406 194.818 cv
302.222 194.818 302.36 193.552 302.36 193.054 cv
302.36 192.12 li
302.36 189.402 301.189 187.748 299.029 186.502 cv
296.172 184.852 li
295.391 184.402 294.642 184.089 294.032 184.089 cv
293.169 184.089 292.585 184.714 292.585 186.455 cv
292.585 187.835 li
292.585 189.13 292.585 190.235 293.939 191.801 cv
293.785 191.741 293.647 191.714 293.524 191.714 cv
282.443 188.817 mo
282.443 192.024 li
283.87 193.399 284.109 193.686 285.719 194.636 cv
285.719 196.377 li
287.697 197.52 li
287.697 195.779 li
288.327 196.128 288.96 196.374 289.514 196.373 cv
290.52 196.373 291.266 195.562 291.266 193.082 cv
291.266 192.382 li
291.266 190.684 290.625 187.51 287.843 185.905 cv
286.671 185.228 li
285.683 184.657 285.572 184.232 285.572 183.574 cv
285.572 183.34 li
285.572 182.897 285.662 182.716 285.875 182.716 cv
286.09 182.716 286.43 182.901 286.928 183.189 cv
288.135 183.886 289.6 184.795 290.771 185.621 cv
290.771 182.413 li
289.802 181.45 289.033 180.773 287.696 179.938 cv
287.696 178.111 li
285.719 176.97 li
285.719 178.796 li
284.986 178.403 284.301 178.166 283.724 178.166 cv
282.703 178.166 282.022 178.912 282.022 180.866 cv
282.022 182.162 li
282.022 183.159 282.168 186.747 285.646 188.755 cv
286.744 189.389 li
287.55 189.854 287.714 190.268 287.714 190.883 cv
287.714 191.223 li
287.714 191.587 287.618 191.764 287.389 191.764 cv
287.217 191.764 286.971 191.665 286.635 191.471 cv
284.932 190.488 283.175 189.324 282.443 188.817 cv
298.515 198.26 mo
298.388 198.26 298.206 198.194 297.948 198.045 cv
296.996 197.496 li
296.356 197.126 296.136 196.765 296.136 196.022 cv
296.136 195.172 li
296.136 194.776 296.18 194.475 296.462 194.475 cv
296.587 194.475 296.76 194.535 296.996 194.671 cv
297.984 195.241 li
298.698 195.654 298.808 196.163 298.808 196.715 cv
298.808 197.564 li
298.808 197.968 298.783 198.26 298.515 198.26 cv
298.546 192.207 mo
298.418 192.207 298.228 192.134 297.948 191.971 cv
296.996 191.422 li
296.373 191.062 296.136 190.819 296.136 189.991 cv
296.136 189.354 li
296.136 188.78 296.244 188.583 296.444 188.583 cv
296.584 188.583 296.77 188.68 296.996 188.81 cv
297.948 189.361 li
298.387 189.614 298.808 189.878 298.808 190.897 cv
298.808 191.534 li
298.808 191.95 298.785 192.207 298.546 192.207 cv
.372549 .329412 .67451 rgb
f
335.911 250.861 mo
286.902 222.565 li
286.902 213.223 li
335.911 241.518 li
335.911 250.861 li
f
335.911 263.838 mo
286.902 235.543 li
286.902 226.2 li
335.911 254.495 li
335.911 263.838 li
f
335.911 276.816 mo
286.902 248.521 li
286.902 239.178 li
335.911 267.473 li
335.911 276.816 li
f
335.911 289.793 mo
286.903 261.499 li
286.902 252.155 li
335.911 280.451 li
335.911 289.793 li
f
279.788 217.967 mo
279.25 217.967 278.642 217.792 277.999 217.421 cv
275.777 216.137 273.976 213.008 273.976 210.431 cv
273.976 208.6 274.885 207.54 276.209 207.54 cv
276.748 207.54 277.356 207.716 277.999 208.087 cv
280.221 209.37 282.021 212.498 282.021 215.076 cv
282.021 216.907 281.112 217.967 279.788 217.967 cv
f
279.789 256.9 mo
279.25 256.9 278.642 256.724 277.999 256.353 cv
275.778 255.071 273.976 251.941 273.976 249.364 cv
273.976 247.533 274.885 246.473 276.208 246.473 cv
276.747 246.473 277.356 246.649 277.999 247.02 cv
280.221 248.303 282.022 251.432 282.022 254.009 cv
282.022 255.84 281.113 256.9 279.789 256.9 cv
f
279.789 243.923 mo
279.25 243.923 278.642 243.747 277.999 243.375 cv
275.777 242.092 273.976 238.964 273.976 236.386 cv
273.976 234.555 274.885 233.495 276.208 233.495 cv
276.747 233.495 277.356 233.671 277.999 234.043 cv
280.221 235.325 282.022 238.455 282.022 241.031 cv
282.022 242.863 281.113 243.923 279.789 243.923 cv
f
279.789 230.945 mo
279.25 230.945 278.642 230.769 277.999 230.398 cv
275.777 229.114 273.976 225.986 273.976 223.409 cv
273.976 221.578 274.885 220.518 276.209 220.518 cv
276.748 220.518 277.356 220.694 277.999 221.065 cv
280.221 222.348 282.021 225.476 282.021 228.053 cv
282.021 229.885 281.113 230.945 279.789 230.945 cv
f
263.247 198.557 mo
195.506 159.447 li
195.506 114.267 li
263.247 153.377 li
263.247 198.557 li
252.155 176.826 mo
250.497 176.826 249.358 178.154 249.358 180.448 cv
249.358 183.676 251.614 187.595 254.397 189.203 cv
255.203 189.667 255.964 189.888 256.639 189.888 cv
258.297 189.888 259.436 188.561 259.436 186.267 cv
259.436 183.038 257.18 179.118 254.397 177.512 cv
253.592 177.047 252.83 176.826 252.155 176.826 cv
235.474 167.196 mo
233.816 167.196 232.677 168.523 232.677 170.817 cv
232.677 174.045 234.933 177.965 237.716 179.572 cv
238.522 180.037 239.284 180.257 239.959 180.257 cv
241.617 180.257 242.755 178.93 242.755 176.636 cv
242.756 173.407 240.499 169.487 237.717 167.881 cv
236.911 167.416 236.15 167.196 235.474 167.196 cv
218.793 157.565 mo
217.135 157.565 215.996 158.893 215.996 161.186 cv
215.996 164.415 218.253 168.334 221.036 169.941 cv
221.841 170.406 222.603 170.627 223.279 170.627 cv
224.936 170.627 226.075 169.299 226.075 167.005 cv
226.075 163.777 223.819 159.857 221.036 158.251 cv
220.23 157.785 219.468 157.565 218.793 157.565 cv
251.259 156.851 mo
251.259 158.864 li
254.162 160.54 li
252.186 165.857 li
254.241 167.044 li
256.525 160.794 li
256.056 159.621 li
251.259 156.851 li
245.592 160.105 mo
245.581 161.801 li
246.459 162.666 247.587 163.282 248.725 163.94 cv
249.131 164.174 249.484 164.292 249.774 164.292 cv
250.352 164.292 250.68 163.826 250.68 162.894 cv
250.68 162.558 li
250.68 161.678 250.47 160.886 249.842 160.291 cv
249.896 160.3 249.946 160.304 249.994 160.304 cv
250.489 160.304 250.68 159.855 250.68 159.086 cv
250.68 158.634 li
250.68 157.258 249.892 156.062 248.794 155.405 cv
247.626 154.707 246.4 153.988 245.522 153.84 cv
245.522 155.529 li
247.826 156.859 li
248.345 157.159 248.764 157.4 248.764 157.991 cv
248.764 158.094 li
248.764 158.344 248.709 158.444 248.581 158.444 cv
248.435 158.444 248.193 158.313 247.826 158.121 cv
246.2 157.298 li
246.2 159.126 li
247.826 160.146 li
248.465 160.549 248.744 160.733 248.744 161.266 cv
248.744 161.371 li
248.744 161.627 248.7 161.74 248.571 161.74 cv
248.427 161.74 248.178 161.599 247.767 161.361 cv
245.592 160.105 li
239.765 150.445 mo
239.765 152.125 li
242 153.415 li
242.808 153.881 243.138 154.152 243.138 154.859 cv
243.138 155.726 240.653 156.629 239.845 156.788 cv
239.845 158.733 li
245.072 161.749 li
245.072 159.736 li
242.978 158.527 li
243.596 158.236 245.072 157.537 245.072 155.94 cv
245.072 154.321 244.354 152.748 242.798 151.851 cv
241.361 151.02 240.583 150.711 239.765 150.445 cv
202.113 147.934 mo
200.455 147.934 199.316 149.262 199.316 151.555 cv
199.316 154.784 201.572 158.704 204.355 160.31 cv
205.161 160.775 205.922 160.996 206.598 160.996 cv
208.255 160.996 209.395 159.668 209.394 157.374 cv
209.394 154.146 207.138 150.226 204.355 148.62 cv
203.55 148.155 202.788 147.934 202.113 147.934 cv
200.149 122.147 mo
199.656 122.147 199.316 122.543 199.316 123.226 cv
199.316 140.519 li
199.316 141.48 199.988 142.648 200.817 143.127 cv
227.428 158.491 li
227.668 158.629 227.894 158.694 228.095 158.694 cv
228.589 158.694 228.929 158.299 228.929 157.616 cv
228.929 140.322 li
228.929 139.361 228.257 138.194 227.428 137.714 cv
200.817 122.351 li
200.577 122.213 200.351 122.147 200.149 122.147 cv
234.438 153.562 mo
234.438 155.308 li
235.216 156.059 235.346 156.215 236.223 156.733 cv
236.223 157.682 li
237.3 158.304 li
237.3 157.355 li
237.644 157.545 237.99 157.679 238.292 157.679 cv
238.84 157.679 239.247 157.237 239.247 155.887 cv
239.247 155.506 li
239.247 154.579 238.897 152.85 237.38 151.974 cv
236.742 151.605 li
236.204 151.294 236.144 151.064 236.144 150.705 cv
236.144 150.578 li
236.144 150.336 236.194 150.237 236.309 150.237 cv
236.426 150.237 236.611 150.338 236.882 150.495 cv
237.54 150.874 238.338 151.369 238.977 151.819 cv
238.977 150.072 li
238.448 149.547 238.029 149.177 237.301 148.722 cv
237.301 147.727 li
236.224 147.105 li
236.224 148.1 li
235.824 147.886 235.45 147.756 235.135 147.756 cv
234.579 147.756 234.208 148.163 234.208 149.229 cv
234.208 149.934 li
234.208 150.478 234.288 152.434 236.183 153.528 cv
236.782 153.873 li
237.222 154.127 237.311 154.352 237.311 154.688 cv
237.311 154.873 li
237.311 155.072 237.258 155.168 237.133 155.168 cv
237.04 155.168 236.906 155.114 236.722 155.008 cv
235.795 154.472 234.837 153.839 234.438 153.562 cv
.996078 .996078 .996078 rgb
f
228.095 158.694 mo
227.894 158.694 227.668 158.629 227.428 158.491 cv
200.817 143.127 li
199.988 142.648 199.316 141.48 199.316 140.519 cv
199.316 123.226 li
199.316 122.543 199.656 122.147 200.149 122.147 cv
200.351 122.147 200.577 122.213 200.817 122.351 cv
227.428 137.714 li
228.257 138.194 228.929 139.361 228.929 140.322 cv
228.929 157.616 li
228.929 158.299 228.589 158.694 228.095 158.694 cv
201.021 130.468 mo
201.021 134.195 li
226.891 149.132 li
226.891 145.403 li
201.021 130.468 li
201.021 138.575 mo
201.021 140.439 li
205.895 143.252 li
205.895 141.389 li
201.021 138.575 li
222.164 136.417 mo
222.164 138.281 li
226.891 141.01 li
226.891 139.146 li
222.164 136.417 li
.372549 .329412 .67451 rgb
f
226.891 149.132 mo
201.021 134.195 li
201.021 130.468 li
226.891 145.403 li
226.891 149.132 li
.996078 .878431 .298039 rgb
f
226.891 141.01 mo
222.164 138.281 li
222.164 136.417 li
226.891 139.146 li
226.891 141.01 li
f
205.895 143.252 mo
201.021 140.439 li
201.021 138.575 li
205.895 141.389 li
205.895 143.252 li
f
237.3 158.304 mo
236.223 157.682 li
236.223 156.733 li
235.346 156.215 235.216 156.059 234.438 155.308 cv
234.438 153.562 li
234.837 153.839 235.795 154.472 236.722 155.008 cv
236.906 155.114 237.04 155.168 237.133 155.168 cv
237.258 155.168 237.311 155.072 237.311 154.873 cv
237.311 154.688 li
237.311 154.352 237.222 154.127 236.782 153.873 cv
236.183 153.528 li
234.288 152.434 234.208 150.478 234.208 149.934 cv
234.208 149.229 li
234.208 148.163 234.579 147.756 235.135 147.756 cv
235.45 147.756 235.824 147.886 236.224 148.1 cv
236.224 147.105 li
237.301 147.727 li
237.301 148.722 li
238.029 149.177 238.448 149.547 238.977 150.072 cv
238.977 151.819 li
238.338 151.369 237.54 150.874 236.882 150.495 cv
236.611 150.338 236.426 150.237 236.309 150.237 cv
236.194 150.237 236.144 150.336 236.144 150.578 cv
236.144 150.705 li
236.144 151.064 236.204 151.294 236.742 151.605 cv
237.38 151.974 li
238.897 152.85 239.247 154.579 239.247 155.506 cv
239.247 155.887 li
239.247 157.237 238.84 157.679 238.292 157.679 cv
237.99 157.679 237.644 157.545 237.3 157.355 cv
237.3 158.304 li
.992157 .4 .392157 rgb
f
245.072 161.749 mo
239.845 158.733 li
239.845 156.788 li
240.653 156.629 243.138 155.726 243.138 154.859 cv
243.138 154.152 242.808 153.881 242 153.415 cv
239.765 152.125 li
239.765 150.445 li
240.583 150.711 241.361 151.02 242.798 151.851 cv
244.354 152.748 245.072 154.321 245.072 155.94 cv
245.072 157.537 243.596 158.236 242.978 158.527 cv
245.072 159.736 li
245.072 161.749 li
f
249.774 164.292 mo
249.484 164.292 249.131 164.174 248.725 163.94 cv
247.587 163.282 246.459 162.666 245.581 161.801 cv
245.592 160.105 li
247.767 161.361 li
248.178 161.599 248.427 161.74 248.571 161.74 cv
248.7 161.74 248.744 161.627 248.744 161.371 cv
248.744 161.266 li
248.744 160.733 248.465 160.549 247.826 160.146 cv
246.2 159.126 li
246.2 157.298 li
247.826 158.121 li
248.193 158.313 248.435 158.444 248.581 158.444 cv
248.709 158.444 248.764 158.344 248.764 158.094 cv
248.764 157.991 li
248.764 157.4 248.345 157.159 247.826 156.859 cv
245.522 155.529 li
245.522 153.84 li
246.4 153.988 247.626 154.707 248.794 155.405 cv
249.892 156.062 250.68 157.258 250.68 158.634 cv
250.68 159.086 li
250.68 159.855 250.489 160.304 249.994 160.304 cv
249.946 160.304 249.896 160.3 249.842 160.291 cv
250.47 160.886 250.68 161.678 250.68 162.558 cv
250.68 162.894 li
250.68 163.826 250.352 164.292 249.774 164.292 cv
f
254.241 167.044 mo
252.186 165.857 li
254.162 160.54 li
251.259 158.864 li
251.259 156.851 li
256.056 159.621 li
256.525 160.794 li
254.241 167.044 li
f
206.598 160.996 mo
205.922 160.996 205.161 160.775 204.355 160.31 cv
201.572 158.704 199.316 154.784 199.316 151.555 cv
199.316 149.262 200.455 147.934 202.113 147.934 cv
202.788 147.934 203.55 148.155 204.355 148.62 cv
207.138 150.226 209.394 154.146 209.394 157.374 cv
209.395 159.668 208.255 160.996 206.598 160.996 cv
.768627 .768627 .933333 rgb
f
223.279 170.627 mo
222.603 170.627 221.841 170.406 221.036 169.941 cv
218.253 168.334 215.996 164.415 215.996 161.186 cv
215.996 158.893 217.135 157.565 218.793 157.565 cv
219.468 157.565 220.23 157.785 221.036 158.251 cv
223.819 159.857 226.075 163.777 226.075 167.005 cv
226.075 169.299 224.936 170.627 223.279 170.627 cv
f
239.959 180.257 mo
239.284 180.257 238.522 180.037 237.716 179.572 cv
234.933 177.965 232.677 174.045 232.677 170.817 cv
232.677 168.523 233.816 167.196 235.474 167.196 cv
236.15 167.196 236.911 167.416 237.717 167.881 cv
240.499 169.487 242.756 173.407 242.755 176.636 cv
242.755 178.93 241.617 180.257 239.959 180.257 cv
f
256.639 189.888 mo
255.964 189.888 255.203 189.667 254.397 189.203 cv
251.614 187.595 249.358 183.676 249.358 180.448 cv
249.358 178.154 250.497 176.826 252.155 176.826 cv
252.83 176.826 253.592 177.047 254.397 177.512 cv
257.18 179.118 259.436 183.038 259.436 186.267 cv
259.436 188.561 258.297 189.888 256.639 189.888 cv
f
263.246 250.924 mo
195.505 211.813 li
195.506 166.634 li
263.247 205.744 li
263.246 250.924 li
252.154 229.193 mo
250.496 229.193 249.357 230.521 249.357 232.814 cv
249.357 236.043 251.614 239.962 254.397 241.57 cv
255.203 242.035 255.964 242.255 256.639 242.256 cv
258.297 242.256 259.436 240.928 259.436 238.634 cv
259.436 235.405 257.18 231.486 254.397 229.879 cv
253.591 229.414 252.83 229.193 252.154 229.193 cv
235.474 219.563 mo
233.816 219.563 232.677 220.891 232.677 223.185 cv
232.677 226.413 234.933 230.332 237.717 231.94 cv
238.522 232.404 239.283 232.625 239.958 232.625 cv
241.616 232.625 242.756 231.297 242.756 229.003 cv
242.756 225.775 240.499 221.855 237.717 220.248 cv
236.911 219.783 236.15 219.563 235.474 219.563 cv
218.794 209.933 mo
217.136 209.933 215.997 211.26 215.996 213.554 cv
215.996 216.782 218.253 220.702 221.036 222.309 cv
221.841 222.774 222.602 222.994 223.278 222.994 cv
224.936 222.994 226.075 221.666 226.075 219.372 cv
226.075 216.144 223.819 212.224 221.036 210.617 cv
220.231 210.153 219.469 209.933 218.794 209.933 cv
251.607 213.323 mo
251.079 213.323 250.797 213.785 250.797 214.686 cv
250.797 218.106 li
250.797 219.32 251.346 220.365 252.479 221.019 cv
253.91 221.845 li
254.233 222.032 254.512 222.122 254.742 222.122 cv
255.257 222.122 255.532 221.67 255.532 220.839 cv
255.532 217.318 li
255.532 216.266 255.183 215.175 253.919 214.445 cv
252.488 213.619 li
252.145 213.421 251.85 213.323 251.607 213.323 cv
245.669 215.317 mo
245.669 216.885 li
246.837 217.792 247.325 218.084 248.407 218.707 cv
248.725 218.891 249.051 219.006 249.336 219.006 cv
249.816 219.006 250.177 218.679 250.177 217.808 cv
250.177 216.857 li
250.177 215.785 249.724 214.714 248.713 214.029 cv
248.599 213.953 248.276 213.756 248.049 213.645 cv
247.951 213.597 247.767 213.515 247.572 213.515 cv
247.543 213.515 247.513 213.517 247.483 213.521 cv
247.517 212.508 li
249.907 213.888 li
249.907 212.129 li
245.869 209.797 li
245.677 214.39 li
247.299 215.327 li
247.299 215.118 247.345 215.013 247.459 215.013 cv
247.516 215.013 247.59 215.039 247.683 215.094 cv
248.067 215.315 li
248.398 215.506 248.485 215.759 248.485 216.092 cv
248.485 216.406 li
248.485 216.551 248.499 216.77 248.31 216.77 cv
248.234 216.77 248.126 216.735 247.971 216.645 cv
245.669 215.317 li
240.488 212.396 mo
240.479 213.878 li
241.246 214.635 242.232 215.174 243.226 215.747 cv
243.582 215.953 243.89 216.055 244.144 216.055 cv
244.649 216.055 244.935 215.647 244.935 214.832 cv
244.936 214.539 li
244.936 213.77 244.753 213.078 244.203 212.558 cv
244.25 212.566 244.294 212.569 244.336 212.569 cv
244.768 212.569 244.936 212.177 244.936 211.504 cv
244.936 211.109 li
244.936 209.905 244.247 208.861 243.287 208.286 cv
242.267 207.677 241.194 207.047 240.427 206.918 cv
240.427 208.395 li
242.441 209.559 li
242.895 209.82 243.261 210.031 243.261 210.548 cv
243.261 210.638 li
243.261 210.856 243.213 210.944 243.101 210.944 cv
242.973 210.944 242.762 210.83 242.441 210.661 cv
241.02 209.941 li
241.02 211.54 li
242.441 212.432 li
243 212.784 243.243 212.945 243.243 213.41 cv
243.243 213.501 li
243.243 213.725 243.204 213.823 243.092 213.823 cv
242.966 213.823 242.748 213.7 242.389 213.493 cv
240.488 212.396 li
235.813 209.606 mo
235.813 211.133 li
236.493 211.789 236.607 211.926 237.374 212.378 cv
237.374 213.208 li
238.316 213.751 li
238.316 212.922 li
238.616 213.088 238.918 213.206 239.182 213.206 cv
239.661 213.206 240.017 212.819 240.017 211.639 cv
240.017 211.305 li
240.017 210.495 239.711 208.983 238.386 208.218 cv
237.828 207.896 li
237.356 207.624 237.305 207.422 237.305 207.109 cv
237.305 206.998 li
237.305 206.786 237.348 206.699 237.449 206.699 cv
237.552 206.699 237.713 206.788 237.95 206.924 cv
238.525 207.257 239.223 207.691 239.781 208.083 cv
239.781 206.556 li
239.319 206.097 238.953 205.773 238.316 205.375 cv
238.316 204.506 li
237.374 203.961 li
237.374 204.831 li
237.024 204.644 236.698 204.531 236.423 204.531 cv
235.936 204.531 235.612 204.886 235.612 205.817 cv
235.612 206.434 li
235.612 206.909 235.682 208.62 237.339 209.576 cv
237.863 209.878 li
238.246 210.1 238.325 210.298 238.325 210.591 cv
238.325 210.752 li
238.325 210.926 238.279 211.01 238.17 211.01 cv
238.088 211.01 237.971 210.963 237.81 210.87 cv
236.999 210.402 236.162 209.847 235.813 209.606 cv
202.113 200.302 mo
200.455 200.302 199.316 201.629 199.316 203.924 cv
199.316 207.152 201.572 211.072 204.355 212.678 cv
205.161 213.143 205.923 213.363 206.598 213.364 cv
208.256 213.364 209.394 212.036 209.394 209.742 cv
209.394 206.514 207.138 202.594 204.355 200.987 cv
203.55 200.522 202.788 200.302 202.113 200.302 cv
200.149 174.514 mo
199.655 174.514 199.316 174.91 199.316 175.593 cv
199.316 192.886 li
199.316 193.848 199.988 195.016 200.817 195.494 cv
227.427 210.857 li
227.667 210.996 227.894 211.061 228.096 211.061 cv
228.589 211.061 228.928 210.666 228.928 209.982 cv
228.929 192.69 li
228.929 191.728 228.257 190.561 227.428 190.083 cv
200.817 174.719 li
200.577 174.58 200.35 174.514 200.149 174.514 cv
253.096 208.432 mo
252.893 208.432 252.814 208.645 252.814 209.173 cv
252.814 209.855 252.942 210.26 253.374 210.51 cv
253.64 210.663 254.078 210.93 254.302 210.941 cv
254.302 210.474 li
254.061 210.376 254.052 210.37 253.821 210.237 cv
253.585 210.1 253.434 210.069 253.434 209.802 cv
253.831 210.031 li
253.951 210.1 254.053 210.14 254.134 210.14 cv
254.26 210.14 254.333 210.041 254.333 209.794 cv
254.333 209.141 254.122 208.937 253.556 208.611 cv
253.36 208.498 253.209 208.432 253.096 208.432 cv
251.622 207.551 mo
251.432 207.551 251.31 207.755 251.31 208.312 cv
251.31 209.084 251.553 209.458 251.869 209.641 cv
252.109 209.775 252.411 209.998 252.645 209.998 cv
252.67 209.998 252.694 209.995 252.718 209.989 cv
252.718 209.566 li
252.718 209.566 252.513 209.478 252.218 209.308 cv
251.988 209.175 251.93 209.13 251.93 208.678 cv
251.93 208.38 251.957 208.284 252.029 208.284 cv
252.073 208.284 252.135 208.321 252.218 208.37 cv
252.503 208.533 252.695 208.667 252.695 208.667 cv
252.695 208.243 li
252.369 207.903 252.037 207.729 251.869 207.633 cv
251.779 207.581 251.695 207.551 251.622 207.551 cv
250.259 207.255 mo
250.299 207.255 250.348 207.274 250.408 207.309 cv
250.478 207.349 250.513 207.407 250.513 207.563 cv
250.513 208.84 li
251.134 209.197 li
251.134 207.936 li
251.134 207.52 251.083 207.164 250.642 206.91 cv
250.515 206.837 250.426 206.812 250.355 206.812 cv
250.282 206.812 250.229 206.839 250.175 206.866 cv
250.072 206.613 li
249.554 206.315 li
249.554 208.285 li
250.175 208.644 li
250.175 207.312 li
250.194 207.273 250.222 207.255 250.259 207.255 cv
248.737 207.613 mo
248.859 207.884 li
249.358 208.172 li
249.358 206.848 li
249.358 206.295 249.089 206.01 248.642 205.752 cv
248.324 205.568 248.132 205.483 247.913 205.479 cv
247.913 205.898 li
248.539 206.219 li
248.668 206.293 248.737 206.329 248.737 206.526 cv
248.737 206.552 li
248.411 206.364 li
248.277 206.286 248.173 206.254 248.093 206.254 cv
247.909 206.254 247.855 206.428 247.855 206.622 cv
247.855 206.774 li
247.855 206.982 247.976 207.378 248.379 207.629 cv
248.468 207.685 248.537 207.705 248.59 207.705 cv
248.677 207.705 248.72 207.652 248.737 207.613 cv
246.854 203.821 mo
246.854 206.025 li
246.854 206.549 247.004 206.813 247.308 206.989 cv
247.749 207.243 li
247.749 206.824 li
247.592 206.656 li
247.522 206.57 247.474 206.49 247.474 206.235 cv
247.474 204.179 li
246.854 203.821 li
246.037 206.054 mo
246.16 206.326 li
246.658 206.613 li
246.658 205.289 li
246.658 204.736 246.39 204.451 245.942 204.193 cv
245.625 204.01 245.433 203.924 245.212 203.919 cv
245.212 204.339 li
245.839 204.66 li
245.968 204.735 246.037 204.771 246.037 204.967 cv
246.037 204.993 li
245.711 204.805 li
245.577 204.728 245.473 204.695 245.393 204.695 cv
245.209 204.695 245.154 204.868 245.154 205.063 cv
245.154 205.215 li
245.154 205.422 245.276 205.819 245.68 206.071 cv
245.768 206.126 245.837 206.145 245.889 206.145 cv
245.976 206.145 246.019 206.092 246.037 206.054 cv
243.274 201.943 mo
243.274 204.659 li
244.307 205.256 li
244.485 205.359 244.632 205.414 244.747 205.414 cv
244.949 205.414 245.052 205.242 245.052 204.855 cv
245.052 204.572 244.892 204.229 244.652 204.044 cv
244.691 204.063 244.727 204.072 244.76 204.072 cv
244.918 204.072 244.994 203.87 244.994 203.679 cv
244.994 203.218 244.79 202.818 244.291 202.531 cv
243.274 201.943 li
241.399 200.672 mo
241.399 202.876 li
241.399 203.399 241.549 203.663 241.853 203.839 cv
242.295 204.095 li
242.295 203.675 li
242.138 203.507 li
242.068 203.422 242.019 203.341 242.019 203.085 cv
242.019 201.03 li
241.399 200.672 li
240.583 202.906 mo
240.704 203.176 li
241.204 203.465 li
241.204 202.14 li
241.204 201.587 240.935 201.302 240.487 201.044 cv
240.17 200.86 239.978 200.776 239.758 200.77 cv
239.758 201.19 li
240.385 201.511 li
240.513 201.584 240.583 201.622 240.583 201.818 cv
240.583 201.844 li
240.257 201.656 li
240.122 201.578 240.018 201.546 239.939 201.546 cv
239.755 201.546 239.7 201.719 239.7 201.914 cv
239.7 202.066 li
239.7 202.273 239.822 202.671 240.225 202.922 cv
240.313 202.977 240.382 202.997 240.435 202.997 cv
240.521 202.997 240.565 202.944 240.583 202.906 cv
238.762 199.531 mo
238.673 200.03 li
238.433 200.031 li
238.433 200.388 li
238.673 200.526 li
238.673 201.299 li
238.673 201.822 238.83 202.097 239.086 202.246 cv
239.566 202.522 li
239.566 202.103 li
239.409 201.934 li
239.339 201.85 239.294 201.772 239.294 201.508 cv
239.294 200.885 li
239.579 201.049 li
239.579 200.552 li
239.294 200.387 li
239.294 199.838 li
238.762 199.531 li
237.029 199.162 mo
236.804 199.162 236.715 199.389 236.715 199.915 cv
236.715 200.621 236.914 201.006 237.512 201.352 cv
237.724 201.474 237.884 201.537 238.004 201.537 cv
238.229 201.537 238.308 201.313 238.308 200.835 cv
238.308 200.052 238.106 199.686 237.512 199.344 cv
237.308 199.226 237.149 199.162 237.029 199.162 cv
235.26 197.317 mo
235.26 197.962 li
235.848 198.302 li
235.848 200.372 li
236.469 200.73 li
236.469 198.659 li
237.077 199.01 li
237.077 198.366 li
235.26 197.317 li
253.657 219.885 mo
253.576 219.885 253.471 219.831 253.352 219.762 cv
252.985 219.55 li
252.794 219.44 252.488 219.234 252.488 218.667 cv
252.488 215.966 li
252.488 215.862 252.478 215.553 252.694 215.553 cv
252.753 215.553 252.828 215.575 252.925 215.632 cv
253.422 215.917 li
253.657 216.054 253.841 216.281 253.841 216.746 cv
253.841 219.458 li
253.841 219.778 253.772 219.885 253.657 219.885 cv
253.62 209.453 mo
253.434 209.345 li
253.43 209.156 253.445 209.091 253.495 209.091 cv
253.521 209.091 253.555 209.108 253.6 209.134 cv
253.71 209.197 253.713 209.254 253.713 209.387 cv
253.62 209.453 li
248.681 207.253 mo
248.663 207.253 248.64 207.246 248.61 207.229 cv
248.549 207.192 248.476 207.166 248.476 207.013 cv
248.476 206.991 li
248.476 206.943 248.471 206.867 248.526 206.867 cv
248.538 206.867 248.553 206.871 248.572 206.88 cv
248.737 206.956 li
248.737 207.179 li
248.737 207.179 248.739 207.253 248.681 207.253 cv
245.981 205.693 mo
245.963 205.693 245.94 205.687 245.91 205.669 cv
245.849 205.634 245.775 205.606 245.775 205.454 cv
245.775 205.432 li
245.775 205.383 245.771 205.308 245.825 205.308 cv
245.838 205.308 245.853 205.312 245.872 205.321 cv
246.037 205.397 li
246.037 205.62 li
246.037 205.62 246.039 205.693 245.981 205.693 cv
244.351 204.655 mo
244.331 204.655 244.305 204.646 244.275 204.629 cv
243.894 204.409 li
243.894 203.881 li
244.275 204.102 li
244.399 204.174 244.431 204.322 244.431 204.46 cv
244.431 204.581 244.412 204.655 244.351 204.655 cv
244.31 203.534 mo
244.291 203.534 244.269 203.527 244.243 203.512 cv
243.894 203.311 li
243.894 202.909 li
244.243 203.111 li
244.313 203.152 244.387 203.243 244.387 203.407 cv
244.387 203.483 244.361 203.534 244.31 203.534 cv
240.527 202.544 mo
240.509 202.544 240.485 202.537 240.454 202.519 cv
240.394 202.484 240.321 202.436 240.321 202.283 cv
240.321 202.235 240.317 202.159 240.371 202.159 cv
240.383 202.159 240.398 202.163 240.417 202.171 cv
240.583 202.249 li
240.583 202.472 li
240.583 202.472 240.585 202.544 240.527 202.544 cv
237.628 200.866 mo
237.602 200.866 237.565 200.848 237.512 200.817 cv
237.349 200.723 237.336 200.664 237.336 200.274 cv
237.336 199.961 237.329 199.835 237.402 199.835 cv
237.428 199.835 237.463 199.85 237.512 199.878 cv
237.691 199.981 237.688 200.051 237.688 200.477 cv
237.688 200.765 237.688 200.866 237.628 200.866 cv
.996078 .996078 .996078 rgb
f
228.096 211.061 mo
227.894 211.061 227.667 210.996 227.427 210.857 cv
200.817 195.494 li
199.988 195.016 199.316 193.848 199.316 192.886 cv
199.316 175.593 li
199.316 174.91 199.655 174.514 200.149 174.514 cv
200.35 174.514 200.577 174.58 200.817 174.719 cv
227.428 190.083 li
228.257 190.561 228.929 191.728 228.929 192.69 cv
228.928 209.982 li
228.928 210.666 228.589 211.061 228.096 211.061 cv
201.021 182.836 mo
201.021 186.563 li
226.89 201.498 li
226.89 197.771 li
201.021 182.836 li
201.021 190.943 mo
201.021 192.807 li
205.895 195.621 li
205.895 193.757 li
201.021 190.943 li
222.164 188.785 mo
222.164 190.648 li
226.89 193.377 li
226.89 191.513 li
222.164 188.785 li
.992157 .4 .392157 rgb
f
226.89 201.498 mo
201.021 186.563 li
201.021 182.836 li
226.89 197.771 li
226.89 201.498 li
.996078 .878431 .298039 rgb
f
226.89 193.377 mo
222.164 190.648 li
222.164 188.785 li
226.89 191.513 li
226.89 193.377 li
f
205.895 195.621 mo
201.021 192.807 li
201.021 190.943 li
205.895 193.757 li
205.895 195.621 li
f
238.316 213.751 mo
237.374 213.208 li
237.374 212.378 li
236.607 211.926 236.493 211.789 235.813 211.133 cv
235.813 209.606 li
236.162 209.847 236.999 210.402 237.81 210.87 cv
237.971 210.963 238.088 211.01 238.17 211.01 cv
238.279 211.01 238.325 210.926 238.325 210.752 cv
238.325 210.591 li
238.325 210.298 238.246 210.1 237.863 209.878 cv
237.339 209.576 li
235.682 208.62 235.612 206.909 235.612 206.434 cv
235.612 205.817 li
235.612 204.886 235.936 204.531 236.423 204.531 cv
236.698 204.531 237.024 204.644 237.374 204.831 cv
237.374 203.961 li
238.316 204.506 li
238.316 205.375 li
238.953 205.773 239.319 206.097 239.781 206.556 cv
239.781 208.083 li
239.223 207.691 238.525 207.257 237.95 206.924 cv
237.713 206.788 237.552 206.699 237.449 206.699 cv
237.348 206.699 237.305 206.786 237.305 206.998 cv
237.305 207.109 li
237.305 207.422 237.356 207.624 237.828 207.896 cv
238.386 208.218 li
239.711 208.983 240.017 210.495 240.017 211.305 cv
240.017 211.639 li
240.017 212.819 239.661 213.206 239.182 213.206 cv
238.918 213.206 238.616 213.088 238.316 212.922 cv
238.316 213.751 li
.992157 .4 .392157 rgb
f
244.144 216.055 mo
243.89 216.055 243.582 215.953 243.226 215.747 cv
242.232 215.174 241.246 214.635 240.479 213.878 cv
240.488 212.396 li
242.389 213.493 li
242.748 213.7 242.966 213.823 243.092 213.823 cv
243.204 213.823 243.243 213.725 243.243 213.501 cv
243.243 213.41 li
243.243 212.945 243 212.784 242.441 212.432 cv
241.02 211.54 li
241.02 209.941 li
242.441 210.661 li
242.762 210.83 242.973 210.944 243.101 210.944 cv
243.213 210.944 243.261 210.856 243.261 210.638 cv
243.261 210.548 li
243.261 210.031 242.895 209.82 242.441 209.559 cv
240.427 208.395 li
240.427 206.918 li
241.194 207.047 242.267 207.677 243.287 208.286 cv
244.247 208.861 244.936 209.905 244.936 211.109 cv
244.936 211.504 li
244.936 212.177 244.768 212.569 244.336 212.569 cv
244.294 212.569 244.25 212.566 244.203 212.558 cv
244.753 213.078 244.936 213.77 244.936 214.539 cv
244.935 214.832 li
244.935 215.647 244.649 216.055 244.144 216.055 cv
f
249.336 219.006 mo
249.051 219.006 248.725 218.891 248.407 218.707 cv
247.325 218.084 246.837 217.792 245.669 216.885 cv
245.669 215.317 li
247.971 216.645 li
248.126 216.735 248.234 216.77 248.31 216.77 cv
248.499 216.77 248.485 216.551 248.485 216.406 cv
248.485 216.092 li
248.485 215.759 248.398 215.506 248.067 215.315 cv
247.683 215.094 li
247.59 215.039 247.516 215.013 247.459 215.013 cv
247.345 215.013 247.299 215.118 247.299 215.327 cv
245.677 214.39 li
245.869 209.797 li
249.907 212.129 li
249.907 213.888 li
247.517 212.508 li
247.483 213.521 li
247.513 213.517 247.543 213.515 247.572 213.515 cv
247.767 213.515 247.951 213.597 248.049 213.645 cv
248.276 213.756 248.599 213.953 248.713 214.029 cv
249.724 214.714 250.177 215.785 250.177 216.857 cv
250.177 217.808 li
250.177 218.679 249.816 219.006 249.336 219.006 cv
f
254.742 222.122 mo
254.512 222.122 254.233 222.032 253.91 221.845 cv
252.479 221.019 li
251.346 220.365 250.797 219.32 250.797 218.106 cv
250.797 214.686 li
250.797 213.785 251.079 213.323 251.607 213.323 cv
251.85 213.323 252.145 213.421 252.488 213.619 cv
253.919 214.445 li
255.183 215.175 255.532 216.266 255.532 217.318 cv
255.532 220.839 li
255.532 221.67 255.257 222.122 254.742 222.122 cv
252.694 215.553 mo
252.478 215.553 252.488 215.862 252.488 215.966 cv
252.488 218.667 li
252.488 219.234 252.794 219.44 252.985 219.55 cv
253.352 219.762 li
253.471 219.831 253.576 219.885 253.657 219.885 cv
253.772 219.885 253.841 219.778 253.841 219.458 cv
253.841 216.746 li
253.841 216.281 253.657 216.054 253.422 215.917 cv
252.925 215.632 li
252.828 215.575 252.753 215.553 252.694 215.553 cv
f
236.469 200.73 mo
235.848 200.372 li
235.848 198.302 li
235.26 197.962 li
235.26 197.317 li
237.077 198.366 li
237.077 199.01 li
236.469 198.659 li
236.469 200.73 li
.768627 .768627 .933333 rgb
f
238.004 201.537 mo
237.884 201.537 237.724 201.474 237.512 201.352 cv
236.914 201.006 236.715 200.621 236.715 199.915 cv
236.715 199.389 236.804 199.162 237.029 199.162 cv
237.149 199.162 237.308 199.226 237.512 199.344 cv
238.106 199.686 238.308 200.052 238.308 200.835 cv
238.308 201.313 238.229 201.537 238.004 201.537 cv
237.402 199.835 mo
237.329 199.835 237.336 199.961 237.336 200.274 cv
237.336 200.664 237.349 200.723 237.512 200.817 cv
237.565 200.848 237.602 200.866 237.628 200.866 cv
237.688 200.866 237.688 200.765 237.688 200.477 cv
237.688 200.051 237.691 199.981 237.512 199.878 cv
237.463 199.85 237.428 199.835 237.402 199.835 cv
f
239.566 202.522 mo
239.086 202.246 li
238.83 202.097 238.673 201.822 238.673 201.299 cv
238.673 200.526 li
238.433 200.388 li
238.433 200.031 li
238.673 200.03 li
238.762 199.531 li
239.294 199.838 li
239.294 200.387 li
239.579 200.552 li
239.579 201.049 li
239.294 200.885 li
239.294 201.508 li
239.294 201.772 239.339 201.85 239.409 201.934 cv
239.566 202.103 li
239.566 202.522 li
f
241.204 203.465 mo
240.704 203.176 li
240.583 202.906 li
240.565 202.944 240.521 202.997 240.435 202.997 cv
240.382 202.997 240.313 202.977 240.225 202.922 cv
239.822 202.671 239.7 202.273 239.7 202.066 cv
239.7 201.914 li
239.7 201.719 239.755 201.546 239.939 201.546 cv
240.018 201.546 240.122 201.578 240.257 201.656 cv
240.583 201.844 li
240.583 201.818 li
240.583 201.622 240.513 201.584 240.385 201.511 cv
239.758 201.19 li
239.758 200.77 li
239.978 200.776 240.17 200.86 240.487 201.044 cv
240.935 201.302 241.204 201.587 241.204 202.14 cv
241.204 203.465 li
240.371 202.159 mo
240.317 202.159 240.321 202.235 240.321 202.283 cv
240.321 202.436 240.394 202.484 240.454 202.519 cv
240.485 202.537 240.509 202.544 240.527 202.544 cv
240.585 202.544 240.583 202.472 240.583 202.472 cv
240.583 202.249 li
240.417 202.171 li
240.398 202.163 240.383 202.159 240.371 202.159 cv
f
242.295 204.095 mo
241.853 203.839 li
241.549 203.663 241.399 203.399 241.399 202.876 cv
241.399 200.672 li
242.019 201.03 li
242.019 203.085 li
242.019 203.341 242.068 203.422 242.138 203.507 cv
242.295 203.675 li
242.295 204.095 li
f
244.747 205.414 mo
244.632 205.414 244.485 205.359 244.307 205.256 cv
243.274 204.659 li
243.274 201.943 li
244.291 202.531 li
244.79 202.818 244.994 203.218 244.994 203.679 cv
244.994 203.87 244.918 204.072 244.76 204.072 cv
244.727 204.072 244.691 204.063 244.652 204.044 cv
244.892 204.229 245.052 204.572 245.052 204.855 cv
245.052 205.242 244.949 205.414 244.747 205.414 cv
243.894 203.881 mo
243.894 204.409 li
244.275 204.629 li
244.305 204.646 244.331 204.655 244.351 204.655 cv
244.412 204.655 244.431 204.581 244.431 204.46 cv
244.431 204.322 244.399 204.174 244.275 204.102 cv
243.894 203.881 li
243.894 202.909 mo
243.894 203.311 li
244.243 203.512 li
244.269 203.527 244.291 203.534 244.31 203.534 cv
244.361 203.534 244.387 203.483 244.387 203.407 cv
244.387 203.243 244.313 203.152 244.243 203.111 cv
243.894 202.909 li
f
246.658 206.613 mo
246.16 206.326 li
246.037 206.054 li
246.019 206.092 245.976 206.145 245.889 206.145 cv
245.837 206.145 245.768 206.126 245.68 206.071 cv
245.276 205.819 245.154 205.422 245.154 205.215 cv
245.154 205.063 li
245.154 204.868 245.209 204.695 245.393 204.695 cv
245.473 204.695 245.577 204.728 245.711 204.805 cv
246.037 204.993 li
246.037 204.967 li
246.037 204.771 245.968 204.735 245.839 204.66 cv
245.212 204.339 li
245.212 203.919 li
245.433 203.924 245.625 204.01 245.942 204.193 cv
246.39 204.451 246.658 204.736 246.658 205.289 cv
246.658 206.613 li
245.825 205.308 mo
245.771 205.308 245.775 205.383 245.775 205.432 cv
245.775 205.454 li
245.775 205.606 245.849 205.634 245.91 205.669 cv
245.94 205.687 245.963 205.693 245.981 205.693 cv
246.039 205.693 246.037 205.62 246.037 205.62 cv
246.037 205.397 li
245.872 205.321 li
245.853 205.312 245.838 205.308 245.825 205.308 cv
f
247.749 207.243 mo
247.308 206.989 li
247.004 206.813 246.854 206.549 246.854 206.025 cv
246.854 203.821 li
247.474 204.179 li
247.474 206.235 li
247.474 206.49 247.522 206.57 247.592 206.656 cv
247.749 206.824 li
247.749 207.243 li
f
249.358 208.172 mo
248.859 207.884 li
248.737 207.613 li
248.72 207.652 248.677 207.705 248.59 207.705 cv
248.537 207.705 248.468 207.685 248.379 207.629 cv
247.976 207.378 247.855 206.982 247.855 206.774 cv
247.855 206.622 li
247.855 206.428 247.909 206.254 248.093 206.254 cv
248.173 206.254 248.277 206.286 248.411 206.364 cv
248.737 206.552 li
248.737 206.526 li
248.737 206.329 248.668 206.293 248.539 206.219 cv
247.913 205.898 li
247.913 205.479 li
248.132 205.483 248.324 205.568 248.642 205.752 cv
249.089 206.01 249.358 206.295 249.358 206.848 cv
249.358 208.172 li
248.526 206.867 mo
248.471 206.867 248.476 206.943 248.476 206.991 cv
248.476 207.013 li
248.476 207.166 248.549 207.192 248.61 207.229 cv
248.64 207.246 248.663 207.253 248.681 207.253 cv
248.739 207.253 248.737 207.179 248.737 207.179 cv
248.737 206.956 li
248.572 206.88 li
248.553 206.871 248.538 206.867 248.526 206.867 cv
f
251.134 209.197 mo
250.513 208.84 li
250.513 207.563 li
250.513 207.407 250.478 207.349 250.408 207.309 cv
250.348 207.274 250.299 207.255 250.259 207.255 cv
250.222 207.255 250.194 207.273 250.175 207.312 cv
250.175 208.644 li
249.554 208.285 li
249.554 206.315 li
250.072 206.613 li
250.175 206.866 li
250.229 206.839 250.282 206.812 250.355 206.812 cv
250.426 206.812 250.515 206.837 250.642 206.91 cv
251.083 207.164 251.134 207.52 251.134 207.936 cv
251.134 209.197 li
f
252.645 209.998 mo
252.411 209.998 252.109 209.775 251.869 209.641 cv
251.553 209.458 251.31 209.084 251.31 208.312 cv
251.31 207.755 251.432 207.551 251.622 207.551 cv
251.695 207.551 251.779 207.581 251.869 207.633 cv
252.037 207.729 252.369 207.903 252.695 208.243 cv
252.695 208.667 li
252.695 208.667 252.503 208.533 252.218 208.37 cv
252.135 208.321 252.073 208.284 252.029 208.284 cv
251.957 208.284 251.93 208.38 251.93 208.678 cv
251.93 209.13 251.988 209.175 252.218 209.308 cv
252.513 209.478 252.718 209.566 252.718 209.566 cv
252.718 209.989 li
252.694 209.995 252.67 209.998 252.645 209.998 cv
f
254.302 210.941 mo
254.078 210.93 253.64 210.663 253.374 210.51 cv
252.942 210.26 252.814 209.855 252.814 209.173 cv
252.814 208.645 252.893 208.432 253.096 208.432 cv
253.209 208.432 253.36 208.498 253.556 208.611 cv
254.122 208.937 254.333 209.141 254.333 209.794 cv
254.333 210.041 254.26 210.14 254.134 210.14 cv
254.053 210.14 253.951 210.1 253.831 210.031 cv
253.434 209.802 li
253.434 210.069 253.585 210.1 253.821 210.237 cv
254.052 210.37 254.061 210.376 254.302 210.474 cv
254.302 210.941 li
253.495 209.091 mo
253.445 209.091 253.43 209.156 253.434 209.345 cv
253.62 209.453 li
253.713 209.387 li
253.713 209.254 253.71 209.197 253.6 209.134 cv
253.555 209.108 253.521 209.091 253.495 209.091 cv
f
206.598 213.364 mo
205.923 213.363 205.161 213.143 204.355 212.678 cv
201.572 211.072 199.316 207.152 199.316 203.924 cv
199.316 201.629 200.455 200.302 202.113 200.302 cv
202.788 200.302 203.55 200.522 204.355 200.987 cv
207.138 202.594 209.394 206.514 209.394 209.742 cv
209.394 212.036 208.256 213.364 206.598 213.364 cv
f
223.278 222.994 mo
222.602 222.994 221.841 222.774 221.036 222.309 cv
218.253 220.702 215.996 216.782 215.996 213.554 cv
215.997 211.26 217.136 209.933 218.794 209.933 cv
219.469 209.933 220.231 210.153 221.036 210.617 cv
223.819 212.224 226.075 216.144 226.075 219.372 cv
226.075 221.666 224.936 222.994 223.278 222.994 cv
f
239.958 232.625 mo
239.283 232.625 238.522 232.404 237.717 231.94 cv
234.933 230.332 232.677 226.413 232.677 223.185 cv
232.677 220.891 233.816 219.563 235.474 219.563 cv
236.15 219.563 236.911 219.783 237.717 220.248 cv
240.499 221.855 242.756 225.775 242.756 229.003 cv
242.756 231.297 241.616 232.625 239.958 232.625 cv
f
256.639 242.256 mo
255.964 242.255 255.203 242.035 254.397 241.57 cv
251.614 239.962 249.357 236.043 249.357 232.814 cv
249.357 230.521 250.496 229.193 252.154 229.193 cv
252.83 229.193 253.591 229.414 254.397 229.879 cv
257.18 231.486 259.436 235.405 259.436 238.634 cv
259.436 240.928 258.297 242.256 256.639 242.256 cv
f
287.697 197.52 mo
285.719 196.377 li
285.719 194.636 li
284.109 193.686 283.87 193.399 282.443 192.024 cv
282.443 188.817 li
283.175 189.324 284.932 190.488 286.635 191.471 cv
286.971 191.665 287.217 191.764 287.389 191.764 cv
287.618 191.764 287.714 191.587 287.714 191.223 cv
287.714 190.883 li
287.714 190.268 287.55 189.854 286.744 189.389 cv
285.646 188.755 li
282.168 186.747 282.022 183.159 282.022 182.162 cv
282.022 180.866 li
282.022 178.912 282.703 178.166 283.724 178.166 cv
284.301 178.166 284.986 178.403 285.719 178.796 cv
285.719 176.97 li
287.696 178.111 li
287.696 179.938 li
289.033 180.773 289.802 181.45 290.771 182.413 cv
290.771 185.621 li
289.6 184.795 288.135 183.886 286.928 183.189 cv
286.43 182.901 286.09 182.716 285.875 182.716 cv
285.662 182.716 285.572 182.897 285.572 183.34 cv
285.572 183.574 li
285.572 184.232 285.683 184.657 286.671 185.228 cv
287.843 185.905 li
290.625 187.51 291.266 190.684 291.266 192.382 cv
291.266 193.082 li
291.266 195.562 290.52 196.373 289.514 196.373 cv
288.96 196.374 288.327 196.128 287.697 195.779 cv
287.697 197.52 li
.996078 .996078 .996078 rgb
f
300.986 202.879 mo
300.422 202.879 299.733 202.558 299.01 202.14 cv
296.172 200.502 li
292.694 198.494 292.585 195.99 292.585 194.63 cv
292.585 193.504 li
292.585 192.602 292.823 191.714 293.524 191.714 cv
293.647 191.714 293.785 191.741 293.939 191.801 cv
292.585 190.235 292.585 189.13 292.585 187.835 cv
292.585 186.455 li
292.585 184.714 293.169 184.089 294.032 184.089 cv
294.642 184.089 295.391 184.402 296.172 184.852 cv
299.029 186.502 li
301.189 187.748 302.36 189.402 302.36 192.12 cv
302.36 193.054 li
302.36 193.552 302.222 194.818 301.406 194.818 cv
301.282 194.818 301.143 194.789 300.986 194.724 cv
302.25 195.729 302.36 197.619 302.36 198.533 cv
302.36 200.147 li
302.36 202.199 301.806 202.879 300.986 202.879 cv
296.462 194.475 mo
296.18 194.475 296.136 194.776 296.136 195.172 cv
296.136 196.022 li
296.136 196.765 296.356 197.126 296.996 197.496 cv
297.948 198.045 li
298.206 198.194 298.388 198.26 298.515 198.26 cv
298.783 198.26 298.808 197.968 298.808 197.564 cv
298.808 196.715 li
298.808 196.163 298.698 195.654 297.984 195.241 cv
296.996 194.671 li
296.76 194.535 296.587 194.475 296.462 194.475 cv
296.444 188.583 mo
296.244 188.583 296.136 188.78 296.136 189.354 cv
296.136 189.991 li
296.136 190.819 296.373 191.062 296.996 191.422 cv
297.948 191.971 li
298.228 192.134 298.418 192.207 298.546 192.207 cv
298.785 192.207 298.808 191.95 298.808 191.534 cv
298.808 190.897 li
298.808 189.878 298.387 189.614 297.948 189.361 cv
296.996 188.81 li
296.77 188.68 296.584 188.583 296.444 188.583 cv
f
313.435 210.427 mo
309.884 208.377 li
309.884 205.51 li
303.935 202.076 li
303.313 199.869 li
307.175 191.31 li
310.983 193.51 li
308.109 200.705 li
309.884 201.73 li
309.884 198.885 li
310.378 197.512 li
313.435 199.278 li
313.435 203.781 li
314.534 204.415 li
314.534 207.578 li
313.435 207.56 li
313.435 210.427 li
f
324.878 217.076 mo
315.285 211.536 li
315.285 207.968 li
316.767 207.678 321.326 206.022 321.326 204.429 cv
321.326 203.134 320.721 202.635 319.238 201.779 cv
315.138 199.412 li
315.138 196.333 li
316.639 196.817 318.068 197.387 320.703 198.91 cv
323.559 200.558 324.877 203.443 324.877 206.415 cv
324.877 209.346 322.168 210.626 321.033 211.16 cv
324.877 213.38 li
324.878 217.076 li
f
131.837 159.294 mo
169.193 137.585 li
170.105 137.055 171.369 137.131 172.765 137.937 cv
135.41 159.645 li
134.014 158.839 132.75 158.764 131.837 159.294 cv
cp
.996078 .262745 .25098 rgb
f
gsave
131.837 159.294 mo
169.193 137.585 li
170.105 137.055 171.369 137.131 172.765 137.937 cv
135.41 159.645 li
134.014 158.839 132.75 158.764 131.837 159.294 cv
clp
131.837 159.294 mo
169.193 137.585 li
170.09 137.064 171.328 137.128 172.698 137.899 cv
135.343 159.607 li
133.973 158.837 132.735 158.772 131.837 159.294 cv
cp
f
135.343 159.607 mo
172.698 137.899 li
172.765 137.937 li
135.41 159.645 li
135.343 159.607 li
cp
f
grestore
275.404 307.156 mo
238.049 328.864 li
245.001 324.824 249.328 316.26 249.362 304.124 cv
286.717 282.415 li
286.683 294.552 282.357 303.116 275.404 307.156 cv
cp
.898039 .196078 .168627 rgb
f
gsave
275.404 307.156 mo
238.049 328.864 li
245.001 324.824 249.328 316.26 249.362 304.123 cv
286.717 282.415 li
286.683 294.552 282.356 303.116 275.404 307.156 cv
clp
249.362 304.124 mo
286.717 282.415 li
286.683 294.552 282.357 303.116 275.404 307.156 cv
238.049 328.864 li
245.001 324.824 249.328 316.26 249.362 304.124 cv
cp
f
grestore
249.569 231.332 mo
286.924 209.624 li
286.717 282.415 li
249.362 304.124 li
249.569 231.332 li
cp
f
135.41 159.645 mo
172.765 137.937 li
281.921 200.958 li
244.565 222.666 li
135.41 159.645 li
cp
1 .4 .380392 rgb
f
244.565 222.666 mo
281.921 200.958 li
284.695 202.56 286.933 206.435 286.924 209.624 cv
249.569 231.332 li
249.578 228.143 247.34 224.268 244.565 222.666 cv
cp
.996078 .262745 .25098 rgb
f
gsave
244.565 222.666 mo
281.92 200.958 li
284.695 202.56 286.933 206.435 286.924 209.624 cv
249.569 231.332 li
249.578 228.143 247.34 224.268 244.565 222.666 cv
clp
244.565 222.666 mo
281.921 200.958 li
282.52 201.304 283.095 201.757 283.627 202.285 cv
246.273 223.994 li
245.74 223.465 245.165 223.013 244.565 222.666 cv
cp
f
246.273 223.994 mo
283.627 202.285 li
285.558 204.203 286.931 207.125 286.924 209.624 cv
249.569 231.332 li
249.575 228.833 248.203 225.912 246.273 223.994 cv
cp
f
grestore
244.565 222.666 mo
247.34 224.268 249.578 228.143 249.569 231.332 cv
249.362 304.124 li
249.293 328.556 231.831 338.507 210.569 326.231 cv
168.709 302.063 li
147.447 289.787 130.098 259.739 130.168 235.306 cv
130.374 162.515 li
130.383 159.327 132.635 158.043 135.41 159.645 cv
244.565 222.666 li
cp
f
169.653 158.597 mo
164.967 161.302 157.299 161.302 152.613 158.597 cv
147.926 155.891 147.926 151.464 152.613 148.758 cv
157.299 146.052 164.967 146.052 169.653 148.758 cv
174.339 151.464 174.339 155.891 169.653 158.597 cv
cp
.898039 .196078 .168627 rgb
f
261.104 211.125 mo
256.418 213.831 248.75 213.831 244.064 211.125 cv
239.378 208.42 239.378 203.993 244.064 201.287 cv
248.75 198.581 256.418 198.581 261.104 201.287 cv
265.79 203.993 265.79 208.42 261.104 211.125 cv
cp
f
150.044 106.687 mo
150.219 153.071 li
150.225 154.685 151.284 156.289 153.4 157.514 cv
157.632 159.961 164.47 159.936 168.684 157.457 cv
170.797 156.216 171.844 154.586 171.832 152.968 cv
171.657 106.606 li
171.627 98.5171 173.897 92.5422 177.891 90.2175 cv
181.884 87.8926 188.2 88.8655 195.223 92.887 cv
207.159 99.7148 li
225.858 110.418 241.719 137.661 241.8 159.206 cv
241.975 205.59 li
241.981 207.203 243.045 208.813 245.161 210.034 cv
247.873 211.602 251.662 212.154 255.142 211.694 cv
257.083 211.438 258.932 210.865 260.44 209.976 cv
261.01 209.64 261.502 209.281 261.913 208.901 cv
263.042 207.861 263.598 206.675 263.587 205.493 cv
263.418 159.125 li
263.366 145.03 258.637 129.191 250.101 114.539 cv
241.573 99.8916 230.132 87.9614 217.896 80.96 cv
205.96 74.1262 li
199.215 70.2681 192.498 68.0347 186.003 67.4927 cv
179.111 66.9236 172.544 68.324 167.014 71.5427 cv
161.484 74.7625 157.031 79.7832 154.128 86.0549 cv
151.387 91.9749 150.015 98.9146 150.044 106.687 cv
cp
.854902 .854902 .976471 rgb
f
171.927 92.7644 mo
173.143 92.0554 174.579 91.6575 176.181 91.5537 cv
173.262 94.4404 171.632 99.7605 171.658 106.608 cv
171.832 152.969 li
171.846 154.589 170.797 156.213 168.684 157.457 cv
167.841 157.952 166.89 158.346 165.879 158.645 cv
165.693 109.152 li
165.663 101.063 167.935 95.0894 171.927 92.7644 cv
cp
.74902 .745098 .929412 rgb
f
165.564 74.2822 mo
169.336 73.2158 173.382 72.8386 177.55 73.1853 cv
184.05 73.7209 190.761 75.9548 197.512 79.813 cv
209.448 86.6462 li
221.685 93.6487 233.12 105.579 241.654 120.231 cv
250.189 134.878 254.913 150.717 254.966 164.818 cv
255.142 211.694 li
257.083 211.438 258.932 210.865 260.44 209.976 cv
261.01 209.64 261.502 209.281 261.913 208.901 cv
261.736 161.991 li
261.684 147.89 256.954 132.057 248.426 117.404 cv
239.89 102.751 228.451 90.8267 216.214 83.8245 cv
204.278 76.9912 li
197.533 73.1274 190.816 70.8994 184.321 70.3574 cv
177.52 69.7942 171.043 71.1545 165.564 74.2822 cv
cp
.956863 .956863 .980392 rgb
f
175.474 237.826 mo
175.45 231.62 179.798 229.088 185.186 232.171 cv
190.572 235.254 194.958 242.786 194.982 248.992 cv
194.997 253.083 193.107 255.563 190.28 255.906 cv
190.345 273.575 li
180.313 267.833 li
180.247 250.165 li
177.405 246.575 175.489 241.917 175.474 237.826 cv
cp
.0980392 .0705882 .105882 rgb
f
110.305 370.867 mo
110.714 369.933 114.074 369.041 115.06 368.713 cv
117.565 367.879 120.134 367.714 122.707 367.244 cv
123.229 367.148 123.775 367.063 124.282 367.22 cv
125.559 367.621 126.053 369.843 125.762 370.954 cv
125.556 371.74 124.947 372.365 124.261 372.8 cv
123.233 373.452 121.83 373.927 120.613 373.984 cv
119.309 374.045 118.088 374.325 116.971 375.029 cv
115.525 375.94 114.457 376.949 112.669 376.894 cv
110.874 376.839 109.508 375.607 109.627 373.759 cv
109.67 373.097 109.853 372.453 110.035 371.815 cv
110.15 371.415 110.204 371.099 110.305 370.867 cv
cp
f
104.397 370.865 mo
104.479 370.75 104.557 370.631 104.631 370.51 cv
105.388 369.262 106.551 368.575 107.758 367.776 cv
108.207 367.478 108.686 367.169 109.224 367.136 cv
110.451 367.059 111.315 368.482 111.204 369.707 cv
111.152 370.275 110.962 370.821 110.878 371.385 cv
110.718 372.454 110.851 373.957 111.78 374.67 cv
113.027 375.628 114.784 376.196 116.143 377.029 cv
116.673 377.354 117.211 377.704 117.55 378.225 cv
118.348 379.453 117.414 381.471 116.317 382.196 cv
115.64 382.644 114.769 382.702 113.968 382.568 cv
112.766 382.367 111.405 381.785 110.46 381.013 cv
109.449 380.188 108.354 379.582 107.051 379.358 cv
104.816 378.978 102.066 378.752 101.448 376.02 cv
101.283 375.29 101.494 374.515 101.868 373.867 cv
102.531 372.719 103.631 371.928 104.397 370.865 cv
cp
.14902 .12549 .156863 rgb
f
112.608 314.088 mo
113.596 315.087 117.324 313.249 117.375 312.76 cv
121.808 309.323 121.282 323.046 120.008 328.5 cv
119.325 331.44 119.504 334.5 119.097 337.486 cv
118.642 340.813 117.941 344.107 116.999 347.331 cv
116.797 348.027 116.568 348.747 116.069 349.275 cv
115.043 350.365 113.305 350.26 111.827 350.018 cv
110.547 349.809 109.114 349.448 108.485 348.314 cv
108.095 347.615 108.107 346.773 108.113 345.975 cv
108.127 343.87 108.14 341.694 107.72 339.625 cv
107.273 337.419 106.825 335.211 106.378 333.004 cv
105.986 331.072 105.595 329.138 105.4 327.177 cv
105.048 323.634 105.345 320.059 105.892 316.55 cv
106.18 314.707 105.567 311.256 108.183 310.884 cv
110.548 310.548 111.951 313.423 112.608 314.088 cv
cp
.0980392 .0705882 .105882 rgb
f
117.888 341.439 mo
118.623 338.357 li
118.329 339.374 118.087 340.403 117.888 341.439 cv
cp
.968627 .45098 .415686 rgb
f
116.47 346.167 mo
115.71 345.117 113.83 345.172 113.201 345.451 cv
112.707 345.67 109.108 343.606 108.05 342.81 cv
108.13 342.87 107.988 343.742 107.98 343.873 cv
107.956 344.237 107.934 344.604 107.915 344.969 cv
107.875 345.69 107.842 346.412 107.816 347.135 cv
107.764 348.548 107.74 349.961 107.75 351.375 cv
107.761 352.817 107.807 354.259 107.895 355.699 cv
107.973 356.984 108.191 358.28 108.084 359.557 cv
108.029 360.212 108.206 360.92 108.287 361.57 cv
108.379 362.302 108.47 363.034 108.562 363.766 cv
108.744 365.23 108.927 366.694 109.11 368.158 cv
109.135 368.363 109.161 368.569 109.187 368.773 cv
109.326 369.892 109.381 371.699 110.236 372.53 cv
111.119 373.388 112.604 373.698 113.783 373.489 cv
114.779 373.313 115.7 372.766 116.35 371.994 cv
117.087 371.117 116.988 369.793 116.997 368.693 cv
117.031 364.073 116.709 359.457 116.703 354.837 cv
116.699 351.275 116.889 347.688 117.563 344.198 cv
116.47 346.167 li
cp
.0980392 .0705882 .105882 rgb
f
119.454 315.049 mo
119.878 314.829 122.058 313.736 122.04 313.144 cv
122.027 312.747 123.1 312.416 123.377 312.421 cv
123.876 312.431 124.38 312.752 124.783 313.041 cv
125.777 313.751 126.509 314.842 126.962 316.011 cv
127.582 317.616 127.731 319.377 127.828 321.11 cv
128.115 326.274 127.98 331.465 127.433 336.606 cv
127.156 339.203 126.774 341.785 126.287 344.346 cv
126.044 345.627 125.775 346.902 125.48 348.17 cv
125.196 349.389 124.943 349.77 123.92 350.414 cv
121.724 351.796 117.767 351.613 116.197 349.127 cv
114.505 346.453 115.208 342.287 114.668 339.28 cv
113.884 334.907 110.974 331.701 109.637 327.549 cv
108.654 324.501 108.788 321.624 109.302 318.516 cv
109.545 317.046 109.999 313.534 111.496 312.675 cv
111.893 312.447 114.586 311.834 116.763 313.997 cv
118.035 315.26 117.887 315.855 119.454 315.049 cv
cp
.14902 .12549 .156863 rgb
f
104.693 300.224 mo
104.672 299.467 104.622 298.708 104.483 297.917 cv
103.84 294.251 102.742 290.672 102.281 286.972 cv
101.923 284.1 101.665 280.518 103.943 278.299 cv
104.315 277.937 104.741 277.637 105.192 277.382 cv
109.619 274.882 113.854 277.926 118.004 279.421 cv
120.73 280.403 123.345 281.691 125.786 283.252 cv
126.636 283.795 127.506 284.167 128.078 285.013 cv
128.792 286.068 128.707 286.835 128.595 288.034 cv
128.465 289.438 128.35 290.843 128.249 292.249 cv
128.047 295.061 127.903 297.878 127.817 300.696 cv
127.645 306.332 127.704 311.976 127.996 317.607 cv
128.088 319.386 128.313 321.181 128.339 322.961 cv
128.356 324.229 127.498 324.833 126.309 325.144 cv
122.969 326.019 119.095 326.308 115.655 326.235 cv
112.078 326.161 108.438 325.386 105.435 323.441 cv
104.667 322.943 105.04 322.15 105.11 321.317 cv
105.194 320.311 105.257 319.304 105.299 318.296 cv
105.382 316.335 105.387 314.371 105.313 312.41 cv
105.258 310.934 104.909 309.511 104.841 308.073 cv
104.759 306.334 104.807 304.585 104.739 302.844 cv
104.703 301.941 104.717 301.083 104.693 300.224 cv
cp
.207843 .207843 .247059 rgb
f
123.287 352.182 mo
122.081 354.079 120.89 355.984 119.715 357.9 cv
118.787 359.415 117.869 360.937 116.966 362.469 cv
116.272 363.648 115.587 364.833 114.912 366.023 cv
114.046 367.552 113.177 369.089 112.288 370.59 cv
111.627 371.706 111.129 373.313 109.827 373.87 cv
108.675 374.363 106.944 373.556 106.026 372.912 cv
105.302 372.404 103.939 371.413 103.613 370.562 cv
103.284 369.706 103.791 368.389 104.08 367.587 cv
104.846 365.454 105.829 363.407 106.848 361.383 cv
108.56 357.981 110.377 354.633 112.297 351.344 cv
114.129 348.205 115.589 344.954 117.245 341.721 cv
117.427 341.366 117.841 341.115 118.221 341.076 cv
118.712 341.026 124.761 348.132 125.074 349.352 cv
125.074 349.352 124.775 349.838 123.287 352.182 cv
cp
.14902 .12549 .156863 rgb
f
119.112 275.816 mo
119.272 274.719 120.101 274.974 119.681 273.979 cv
119.325 273.134 118.785 272.357 118.06 271.797 cv
117.336 271.236 116.42 270.905 115.505 270.955 cv
115.19 270.973 114.979 271.153 114.667 271.154 cv
113.804 271.157 112.935 270.992 112.074 271.117 cv
111.216 271.242 110.423 271.304 110.423 272.271 cv
110.424 273.562 110.483 274.803 110.071 276.072 cv
109.85 276.75 109.516 277.403 109.456 278.113 cv
109.341 279.51 110.36 280.812 111.622 281.422 cv
113.172 282.172 114.926 282.103 116.576 281.864 cv
117.404 281.744 118.569 281.578 119.056 280.789 cv
119.421 280.195 119.264 279.416 119.186 278.764 cv
119.068 277.779 118.967 276.806 119.112 275.816 cv
cp
.976471 .835294 .764706 rgb
f
gsave
117.251 259.328 mo
113.656 261.417 li
113.911 261.27 114.262 261.29 114.649 261.513 cv
118.244 259.424 li
117.859 259.201 117.507 259.181 117.251 259.328 cv
clp
114.649 261.513 mo
118.244 259.424 li
117.859 259.201 117.507 259.181 117.251 259.328 cv
113.656 261.417 li
113.911 261.27 114.262 261.29 114.649 261.513 cv
cp
.498039 .537255 .65098 rgb
f
grestore
122.815 261.793 mo
123.336 262.427 123.744 263.141 123.869 263.978 cv
124.147 265.844 123.397 267.76 123.801 269.61 cv
124.194 271.403 123.425 275.475 119.889 276.518 cv
118.101 277.046 114.571 276.428 113.436 275.883 cv
111.912 275.153 110.905 273.677 110.004 272.247 cv
102.62 260.521 117.806 255.699 122.815 261.793 cv
cp
f
106.683 266.986 mo
106.909 268.904 107.329 270.797 107.512 272.719 cv
107.82 275.957 107.468 279.33 108.619 282.372 cv
109.289 284.146 110.472 285.716 111.97 286.875 cv
111.97 287.022 113.24 288.057 113.381 288.187 cv
114.037 288.79 114.693 289.393 115.349 289.997 cv
115.523 290.157 115.722 290.328 115.96 290.328 cv
116.203 290.327 116.405 290.146 116.576 289.972 cv
118.31 288.209 119.546 286.006 120.453 283.705 cv
120.453 283.581 120.577 283.386 120.622 283.268 cv
120.676 283.122 120.73 282.976 120.783 282.829 cv
120.891 282.528 120.994 282.225 121.094 281.921 cv
121.605 280.359 122.012 278.766 122.407 277.171 cv
122.812 275.539 123.303 273.924 123.757 272.304 cv
123.874 271.884 123.993 271.462 124.033 271.028 cv
124.056 270.786 124.054 270.54 124.014 270.3 cv
123.995 270.181 123.966 270.063 123.926 269.949 cv
123.864 269.715 li
123.458 269.969 123.058 270.238 122.658 270.504 cv
121.915 270.998 120.822 270.875 120.208 270.226 cv
118.568 268.497 120.786 266.626 122.488 266.466 cv
123.066 266.412 123.717 266.438 124.138 266.039 cv
124.448 265.745 124.544 265.294 124.593 264.87 cv
124.915 262.102 124.061 259.767 122.031 257.898 cv
121.393 257.311 120.686 256.781 119.889 256.436 cv
119.189 256.137 118.433 255.987 117.681 255.881 cv
113.566 255.296 108.742 256.603 107.153 260.868 cv
106.456 262.74 106.442 264.801 106.661 266.787 cv
106.683 266.986 li
cp
.207843 .207843 .247059 rgb
f
122.986 281.608 mo
121.473 282.195 120.109 282.966 119.602 284.553 cv
119.134 286.022 119.089 287.521 119.87 288.906 cv
120.683 290.345 122.252 291.328 123.901 291.432 cv
125.44 291.531 126.925 290.917 128.346 290.316 cv
132.328 288.63 136.314 287.218 139.969 284.851 cv
141.492 283.857 143.027 282.563 143.365 280.777 cv
143.593 279.57 143.195 278.264 142.334 277.391 cv
140.246 275.27 138.457 276.685 138.103 276.805 cv
126.941 280.531 122.743 281.703 122.986 281.608 cv
cp
f
174.284 245.523 mo
178.036 243.343 li
178.001 255.733 li
174.249 257.913 li
174.284 245.523 li
cp
1 .717647 0 rgb
f
170.966 243.608 mo
174.718 241.427 li
178.036 243.343 li
174.284 245.523 li
170.966 243.608 li
cp
1 .870588 .219608 rgb
f
174.284 245.523 mo
174.249 257.913 li
170.931 255.998 li
170.966 243.608 li
174.284 245.523 li
cp
1 .768627 0 rgb
f
168.543 252.809 mo
172.295 250.628 li
172.26 263.018 li
168.508 265.199 li
168.543 252.809 li
cp
1 .717647 0 rgb
f
165.225 250.893 mo
168.977 248.712 li
172.295 250.628 li
168.543 252.809 li
165.225 250.893 li
cp
1 .870588 .219608 rgb
f
168.543 252.809 mo
168.508 265.199 li
165.19 263.283 li
165.225 250.893 li
168.543 252.809 li
cp
1 .768627 0 rgb
f
176.31 243.147 mo
103.617 285.392 li
104.212 285.046 105.035 285.094 105.944 285.619 cv
178.636 243.375 li
177.728 242.85 176.905 242.802 176.31 243.147 cv
cp
f
gsave
176.31 243.147 mo
103.617 285.392 li
104.212 285.046 105.035 285.095 105.944 285.619 cv
178.636 243.375 li
177.728 242.85 176.905 242.802 176.31 243.147 cv
clp
105.944 285.619 mo
178.636 243.375 li
178.619 243.365 li
105.927 285.609 li
105.944 285.619 li
cp
f
105.927 285.609 mo
178.619 243.365 li
177.718 242.85 176.901 242.804 176.31 243.147 cv
103.617 285.392 li
104.208 285.048 105.026 285.094 105.927 285.609 cv
cp
f
grestore
108.254 293.371 mo
180.947 251.126 li
181.534 250.785 181.898 250.06 181.901 249.03 cv
181.907 246.95 180.446 244.42 178.636 243.375 cv
105.944 285.619 li
107.753 286.664 109.214 289.194 109.208 291.274 cv
109.206 292.304 108.841 293.029 108.254 293.371 cv
cp
1 .717647 0 rgb
f
gsave
108.254 293.371 mo
180.947 251.126 li
181.534 250.785 181.898 250.06 181.901 249.03 cv
181.907 246.95 180.446 244.42 178.636 243.375 cv
105.944 285.619 li
107.753 286.664 109.214 289.194 109.208 291.274 cv
109.206 292.304 108.841 293.029 108.254 293.371 cv
clp
108.254 293.371 mo
180.947 251.126 li
181.293 250.925 181.561 250.591 181.724 250.14 cv
109.031 292.384 li
108.869 292.835 108.6 293.169 108.254 293.371 cv
cp
f
109.031 292.384 mo
181.724 250.14 li
181.837 249.825 181.9 249.453 181.901 249.03 cv
181.901 248.968 li
109.208 291.212 li
109.208 291.274 li
109.207 291.697 109.145 292.069 109.031 292.384 cv
cp
f
109.208 291.212 mo
181.901 248.968 li
181.895 248.444 181.797 247.892 181.625 247.344 cv
108.933 289.588 li
109.105 290.136 109.202 290.688 109.208 291.212 cv
cp
f
108.933 289.588 mo
181.625 247.344 li
181.408 246.648 181.07 245.957 180.649 245.335 cv
107.957 287.579 li
108.378 288.201 108.715 288.892 108.933 289.588 cv
cp
1 .768627 0 rgb
f
107.957 287.579 mo
180.649 245.335 li
180.371 244.923 180.057 244.542 179.716 244.209 cv
107.024 286.453 li
107.364 286.786 107.679 287.167 107.957 287.579 cv
cp
1 .870588 .219608 rgb
f
107.024 286.453 mo
179.716 244.209 li
179.379 243.877 179.015 243.594 178.636 243.375 cv
105.944 285.619 li
106.322 285.838 106.686 286.121 107.024 286.453 cv
cp
f
grestore
105.944 285.619 mo
104.138 284.576 102.668 285.414 102.661 287.494 cv
102.656 289.569 104.117 292.099 105.922 293.142 cv
107.732 294.187 109.203 293.349 109.208 291.274 cv
109.214 289.194 107.753 286.664 105.944 285.619 cv
cp
.541176 .470588 .117647 rgb
f
94.9814 304.916 mo
88.5831 301.198 li
89.2438 301.582 89.6536 302.398 89.6569 303.56 cv
89.6634 305.896 88.019 308.744 85.9866 309.917 cv
92.3848 313.635 li
94.4173 312.462 96.0617 309.613 96.0551 307.278 cv
96.0518 306.116 95.642 305.3 94.9814 304.916 cv
cp
1 .870588 .219608 rgb
f
gsave
94.9814 304.916 mo
88.5831 301.197 li
89.2438 301.582 89.6537 302.398 89.6569 303.56 cv
89.6634 305.896 88.019 308.744 85.9866 309.917 cv
92.3848 313.635 li
94.4173 312.462 96.0617 309.613 96.0551 307.278 cv
96.0518 306.116 95.642 305.3 94.9814 304.916 cv
clp
94.9814 304.916 mo
88.5831 301.198 li
89.2438 301.582 89.6536 302.398 89.6569 303.56 cv
89.6623 305.391 88.6521 307.538 87.2357 308.945 cv
93.6339 312.664 li
95.05 311.256 96.0602 309.109 96.0551 307.278 cv
96.0518 306.116 95.642 305.3 94.9814 304.916 cv
cp
f
93.6339 312.664 mo
87.2357 308.945 li
86.8458 309.333 86.4251 309.664 85.9866 309.917 cv
92.3848 313.635 li
92.8233 313.382 93.244 313.051 93.6339 312.664 cv
cp
1 .768627 0 rgb
f
grestore
83.3625 310.175 mo
89.7607 313.892 li
90.4308 314.282 91.3594 314.227 92.3848 313.635 cv
85.9866 309.917 li
84.9615 310.509 84.0329 310.564 83.3625 310.175 cv
cp
f
gsave
83.3625 310.175 mo
89.7607 313.892 li
90.4308 314.282 91.3594 314.227 92.3848 313.635 cv
85.9866 309.917 li
84.9615 310.509 84.0329 310.564 83.3625 310.175 cv
clp
92.3848 313.635 mo
85.9866 309.917 li
85.9372 309.945 li
92.3355 313.663 li
92.3848 313.635 li
cp
1 .768627 0 rgb
f
92.3355 313.663 mo
85.9372 309.945 li
84.9317 310.511 84.022 310.557 83.3625 310.175 cv
89.7607 313.892 li
90.4203 314.276 91.33 314.229 92.3355 313.663 cv
cp
f
grestore
109.605 276.271 mo
103.207 272.552 li
101.524 271.594 100.582 271.057 98.9003 270.098 cv
105.298 273.816 li
106.981 274.775 107.923 275.312 109.605 276.271 cv
cp
f
gsave
109.605 276.271 mo
103.207 272.552 li
101.524 271.594 100.582 271.057 98.9003 270.098 cv
105.298 273.816 li
106.981 274.775 107.923 275.312 109.605 276.271 cv
clp
109.605 276.271 mo
103.207 272.552 li
101.524 271.594 100.582 271.057 98.9003 270.098 cv
105.298 273.816 li
106.981 274.775 107.923 275.312 109.605 276.271 cv
cp
f
grestore
85.7721 290.031 mo
79.3742 286.312 li
79.4464 311.86 li
85.8447 315.578 li
85.7721 290.031 li
cp
1 .768627 0 rgb
f
105.298 273.816 mo
98.9003 270.098 li
83.6529 278.901 li
90.0511 282.619 li
105.298 273.816 li
cp
1 .870588 .219608 rgb
f
90.0511 282.619 mo
83.6529 278.901 li
81.9816 281.796 81.0454 283.417 79.3742 286.312 cv
85.7721 290.031 li
87.4437 287.135 88.3795 285.514 90.0511 282.619 cv
cp
f
gsave
90.0511 282.619 mo
83.6529 278.901 li
81.9817 281.796 81.0454 283.417 79.3742 286.312 cv
85.7721 290.031 li
87.4437 287.135 88.3795 285.514 90.0511 282.619 cv
clp
90.0511 282.619 mo
83.6529 278.901 li
81.9816 281.796 81.0454 283.417 79.3742 286.312 cv
85.7721 290.031 li
87.4437 287.135 88.3795 285.514 90.0511 282.619 cv
cp
1 .768627 0 rgb
f
grestore
92.3848 313.635 mo
94.4173 312.462 96.0617 309.613 96.0551 307.278 cv
96.0486 304.938 94.3933 303.999 92.3609 305.173 cv
90.3244 306.348 88.6797 309.193 88.6866 311.532 cv
88.6931 313.868 90.3484 314.811 92.3848 313.635 cv
cp
105.298 273.816 mo
106.981 274.775 107.923 275.312 109.605 276.271 cv
109.677 301.818 li
105.399 309.234 li
90.1513 318.037 li
85.8447 315.578 li
85.7721 290.031 li
87.4437 287.135 88.3795 285.514 90.0511 282.619 cv
105.298 273.816 li
cp
1 .717647 0 rgb
f
178.019 240.799 mo
173.997 238.462 li
171.249 240.048 li
175.271 242.386 li
178.019 240.799 li
cp
1 .870588 .219608 rgb
f
173.36 236.762 mo
169.338 234.424 li
169.343 236.242 li
173.365 238.58 li
173.36 236.762 li
cp
1 .768627 0 rgb
f
175.252 235.669 mo
171.23 233.332 li
169.338 234.424 li
173.36 236.762 li
175.252 235.669 li
cp
1 .870588 .219608 rgb
f
173.365 238.58 mo
169.343 236.242 li
167.175 237.494 li
171.197 239.831 li
173.365 238.58 li
cp
f
166.919 242.301 mo
162.897 239.964 li
160.726 241.217 li
164.748 243.554 li
166.919 242.301 li
cp
f
171.188 236.593 mo
167.166 234.256 li
162.888 236.726 li
166.91 239.063 li
171.188 236.593 li
cp
f
166.91 239.063 mo
162.888 236.726 li
162.897 239.964 li
166.919 242.301 li
166.91 239.063 li
cp
1 .768627 0 rgb
f
164.743 241.737 mo
160.721 239.399 li
158.972 240.409 li
162.994 242.747 li
164.743 241.737 li
cp
1 .870588 .219608 rgb
f
166.91 239.063 mo
166.919 242.301 li
164.748 243.554 li
164.743 241.737 li
162.994 242.747 li
163.03 255.512 li
178.036 246.849 li
178.019 240.799 li
175.271 242.386 li
175.252 235.669 li
173.36 236.762 li
173.365 238.58 li
171.197 239.831 li
171.188 236.593 li
166.91 239.063 li
cp
1 .717647 0 rgb
f
162.994 242.747 mo
158.972 240.409 li
159.008 253.175 li
163.03 255.512 li
162.994 242.747 li
cp
1 .768627 0 rgb
f
153.844 248.26 mo
157.596 246.08 li
157.56 258.47 li
153.808 260.65 li
153.844 248.26 li
cp
1 .717647 0 rgb
f
150.525 246.345 mo
154.277 244.164 li
157.596 246.08 li
153.844 248.26 li
150.525 246.345 li
cp
1 .870588 .219608 rgb
f
153.844 248.26 mo
153.808 260.65 li
150.491 258.735 li
150.525 246.345 li
153.844 248.26 li
cp
1 .768627 0 rgb
f
150.033 262.47 mo
149.827 262.675 149.38 262.888 149.254 262.497 cv
149.044 261.843 149.268 261.091 148.975 260.47 cv
148.871 260.249 148.653 260.039 148.413 260.086 cv
148.129 260.143 148.033 260.496 148 260.784 cv
147.918 261.476 147.858 262.18 147.62 262.835 cv
147.442 263.325 147.168 263.774 146.926 264.236 cv
146.636 264.792 146.392 265.413 146.355 266.042 cv
146.31 266.804 146.175 267.553 145.926 268.276 cv
145.777 268.708 145.588 269.159 145.687 269.604 cv
145.792 270.071 146.187 270.41 146.576 270.687 cv
146.895 270.914 147.251 271.131 147.641 271.125 cv
147.986 271.12 148.309 270.936 148.553 270.692 cv
148.797 270.448 148.974 270.146 149.148 269.848 cv
149.518 269.215 149.864 268.561 150.272 267.953 cv
150.674 267.355 151.159 266.82 151.6 266.251 cv
152.276 265.378 152.995 264.222 152.669 263.08 cv
152.474 262.402 152.136 261.774 151.7 261.22 cv
151.314 260.73 150.917 260.21 150.255 260.144 cv
150.087 260.126 149.881 260.16 149.815 260.316 cv
149.747 260.476 149.87 260.645 149.967 260.789 cv
150.302 261.281 150.493 261.996 150.033 262.47 cv
cp
.0980392 .0705882 .105882 rgb
f
148.561 267.157 mo
148.718 267.248 li
149.179 267.522 149.639 267.88 149.79 268.394 cv
149.938 268.899 149.752 269.416 149.541 269.874 cv
149.325 270.343 149.159 270.842 148.947 271.319 cv
148.49 272.347 148.018 273.368 147.547 274.39 cv
147.238 275.061 146.928 275.733 146.599 276.392 cv
145.63 278.323 144.48 280.146 143.167 281.832 cv
142.659 282.486 141.839 283.586 141.047 283.902 cv
140.263 284.215 139.463 283.857 138.746 283.353 cv
137.464 282.454 136.484 281.064 136.661 279.49 cv
136.839 277.91 137.76 276.744 138.625 275.544 cv
139.612 274.174 140.643 272.834 141.715 271.53 cv
142.251 270.878 142.796 270.236 143.352 269.602 cv
143.868 269.014 144.363 268.379 144.89 267.813 cv
145.168 267.515 145.454 267.222 145.735 266.927 cv
145.903 266.752 146.108 266.524 146.336 266.425 cv
146.566 266.324 146.796 266.425 147.025 266.496 cv
147.559 266.661 148.074 266.883 148.561 267.157 cv
cp
.207843 .207843 .247059 rgb
f
207.858 169.51 mo
209.822 168.368 li
209.765 193.554 li
207.8 194.696 li
207.858 169.51 li
cp
.898039 .890196 .909804 rgb
f
117.881 117.561 mo
119.845 116.42 li
209.822 168.368 li
207.858 169.51 li
117.881 117.561 li
cp
f
207.858 169.51 mo
207.8 194.696 li
117.824 142.747 li
117.881 117.561 li
207.858 169.51 li
cp
.976471 .968627 .988235 rgb
f
131.569 138.333 mo
128.186 136.379 li
130.149 136.984 131.612 135.798 131.612 133.37 cv
131.612 130.54 129.626 127.101 127.176 125.686 cv
124.726 124.272 122.74 125.418 122.74 128.247 cv
122.74 130.675 124.203 133.552 126.166 135.213 cv
122.782 133.259 li
121.494 132.516 120.439 133.124 120.439 134.613 cv
120.439 140.987 li
133.912 148.765 li
133.912 142.391 li
133.912 140.903 132.858 139.077 131.569 138.333 cv
cp
.137255 .0941176 .411765 rgb
f
178.859 200.233 mo
180.824 199.092 li
180.766 224.278 li
178.801 225.419 li
178.859 200.233 li
cp
.898039 .890196 .909804 rgb
f
88.8822 148.285 mo
90.8468 147.144 li
180.824 199.092 li
178.859 200.233 li
88.8822 148.285 li
cp
f
178.859 200.233 mo
178.801 225.419 li
88.8253 173.471 li
88.8822 148.285 li
178.859 200.233 li
cp
.976471 .968627 .988235 rgb
f
103.181 166.388 mo
104.276 168.778 li
101.578 170.212 li
100.003 167.051 li
103.181 166.388 li
cp
99.9222 168.023 mo
102.967 172.525 li
101.845 173.604 li
98.5598 169.672 li
99.9222 168.023 li
cp
99.8423 161.624 mo
101.472 166.45 li
99.121 166.142 li
98.0538 161.269 li
99.8423 161.624 li
cp
96.5579 165.525 mo
98.9878 167.668 li
97.6788 171.076 li
95.8892 169.395 li
96.5579 165.525 li
cp
94.6078 161.933 mo
98.3202 163.489 li
98.4538 166.465 li
94.6078 164.091 li
94.6078 161.933 li
cp
.137255 .0941176 .411765 rgb
f
114.345 172.834 mo
115.44 175.224 li
112.742 176.658 li
111.167 173.497 li
114.345 172.834 li
cp
111.087 174.469 mo
114.131 178.971 li
113.009 180.05 li
109.724 176.118 li
111.087 174.469 li
cp
111.007 168.07 mo
112.636 172.896 li
110.286 172.587 li
109.217 167.715 li
111.007 168.07 li
cp
107.722 171.971 mo
110.152 174.114 li
108.844 177.522 li
107.054 175.841 li
107.722 171.971 li
cp
105.772 168.378 mo
109.484 169.935 li
109.618 172.911 li
105.772 170.536 li
105.772 168.378 li
cp
f
125.51 179.28 mo
126.604 181.669 li
123.907 183.104 li
122.331 179.942 li
125.51 179.28 li
cp
122.251 180.914 mo
125.295 185.417 li
124.174 186.495 li
120.889 182.564 li
122.251 180.914 li
cp
122.172 174.515 mo
123.8 179.341 li
121.45 179.033 li
120.382 174.161 li
122.172 174.515 li
cp
118.886 178.416 mo
121.316 180.56 li
120.008 183.967 li
118.218 182.286 li
118.886 178.416 li
cp
116.937 174.824 mo
120.649 176.381 li
120.782 179.356 li
116.937 176.982 li
116.937 174.824 li
cp
f
136.675 185.725 mo
137.769 188.115 li
135.071 189.55 li
133.496 186.389 li
136.675 185.725 li
cp
133.416 187.36 mo
136.46 191.862 li
135.339 192.942 li
132.053 189.01 li
133.416 187.36 li
cp
133.336 180.961 mo
134.965 185.787 li
132.615 185.479 li
131.547 180.607 li
133.336 180.961 li
cp
130.051 184.862 mo
132.481 187.005 li
131.172 190.413 li
129.383 188.732 li
130.051 184.862 li
cp
128.101 181.27 mo
131.814 182.827 li
131.947 185.802 li
128.101 183.428 li
128.101 181.27 li
cp
f
147.839 192.171 mo
148.934 194.561 li
146.236 195.995 li
144.66 192.834 li
147.839 192.171 li
cp
144.58 193.805 mo
147.625 198.308 li
146.503 199.387 li
143.218 195.455 li
144.58 193.805 li
cp
144.5 187.406 mo
146.13 192.233 li
143.779 191.924 li
142.711 187.052 li
144.5 187.406 li
cp
141.215 191.308 mo
143.646 193.451 li
142.337 196.858 li
140.548 195.178 li
141.215 191.308 li
cp
139.266 187.715 mo
142.978 189.273 li
143.112 192.248 li
139.266 189.874 li
139.266 187.715 li
cp
f
159.003 198.617 mo
160.098 201.006 li
157.4 202.44 li
155.825 199.28 li
159.003 198.617 li
cp
155.745 200.251 mo
158.789 204.753 li
157.667 205.832 li
154.382 201.901 li
155.745 200.251 li
cp
155.664 193.852 mo
157.294 198.678 li
154.944 198.37 li
153.875 193.498 li
155.664 193.852 li
cp
152.38 197.753 mo
154.81 199.896 li
153.501 203.304 li
151.712 201.623 li
152.38 197.753 li
cp
150.43 194.161 mo
154.142 195.718 li
154.276 198.694 li
150.43 196.319 li
150.43 194.161 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2007.i039.019.P.m004.c33.cyber security spyware data protection isometric set-16.eps)
%%CreationDate: 2/26/2021 12:20 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9B&de<S6>hAn/c9ai!1mVrN2NWSuBL2cO!8//t\d`cF/\P[AkJQoGh^U3aH3&3ke'%8;c^ALiZD8t8DH2roo"m`-fkXQe
%NUqPhT='W?=YUB'aB1@uU:+q:oq-qlkLDr7F+(<&ZeVVYNUB*E=nXqJ6F56ZGLeO'?X=t`kFKL(0D!#`eXCu#nhmUu$1Hqum#t>T
%k*MP(]%>32X<ED^M0Shj#Mt%>n@,(^PFXarNr3c2H3/5IFq;(Rd3c,Bps7rt6iXgQl*e9C[Ft?G#`IhgR&p/*DgCmS<48)9nBW:@
%bS:"3Y?1&42D\bjpt:([_((a+q^nUc`*3Wg,2s\3r?M=d:-d2+X:Y=0Yh7ker(StZ`ff^/*#,Xe.LRqp2E[l%"Z"F);AM\KK`p/T
%<o%OuG(u%n(-2*SXd[l7`K3u4B5Mn;3W:u2QS&aM-&Si:LLdr*\QH'&A1c)t$o:K+ju+nb/JilIgemNoHK"n*qL>\[T)2j5Dl_jC
%[C\rZs2$I"mk!!JqrFt_o@n1%eLpKd$(<A7DQd45CESu5ohs$J\e#I3ppV_mm'Y1</nf41f#*&Cb;b6*p8V3OomZ_8VF3;Ihsq`,
%c*sFB.tjQ,Cs0uJ/9NbeAp/nGQDqn@rZX0Sm(-N)"KTn7Eu`R0:u2(not9!\>Hq=CKiq)`oldrN$'gt.N$J?KfZ6+9s1.uUWjfcj
%\*GtppB`u3lp[e,Oki+9VRIJ/6F2])d(qs<0JOJ"B55\4oecS64G,,0/]EVjS@iUR$e5G^r7?F)a_/o@6*1A&\(f/6CSu1'r9HS*
%\OuJCcTntnIRZMLPZ\]MlMkJ0C?s8)n&$sb6jP<)e?-_d^Xd3i.[K1Ze9Fg])I>KM*X!5G<e%t"&(h5i`.EI4IA/c2Cg2A!.r#Z-
%qWbhi5ibe*VKT#"JLUfICNoer[P-UcSQ`-Cd&u'IqZ$?BeTc3#GKUg$FXlZpfD67bC:7P7=#0ZNhr,*I!\lcXh"Jm`4QBLgi,p\\
%_=/D/:*<[7B/jQaOHPntQj'ZoX.Hf6ej[!:agZVfMp-1I=USsdniUS7qFj#g2\RVJ:=OGs^ENCjCfM56D\)nD^,*a1"`Fic#p.Ai
%.p=W2Pq"3GLj=D[RA7M[Qp\L9dmV?'oW*GpXAq@TT_9eq!+o]J>k=#*Fh3#GTK=W]c4,t7r)"Ra735)o\(qB$gKCobAjYXY=7,kC
%ghbPGBSg>]0"dK',c"'SKiQhSYbjk@XHf&d=#4=,LIZ9l_'JEBJ[-3lcE+ihn+V!4Jb:18(TV+(-G9&UCEBTj(B:Ac)Xq\L"OO<C
%p:<EffeO8c[G,#;RIWeS<b_F?;1`C\G@57p*oarG^Q<;W\4@$<iDF4[#V'\]`s_k<C->S^mqS\G0qqdfX34Df!EF#_WgUEeX61;T
%"Pi3mP@>mG1]J`Yj.GRJiE$'rISGiVgs/Kof"1?GaRuW6.g^I:6BblU.I=$i)h'qGB*,\u(R9N]=R"pXX@sQ[G'iUTn/NBYs*EqN
%\#pH=;#/$H\t51qhs&[Si1_h`.<ZWSUM^gJU[)(JLiO>R8><`$dZ\.#?I)WH=5PZT]q:.KMADf9.ZcOSle+>l3e"'qs6.;C9<oo:
%PtqZDUGsAtEH"'3qT%3=7\o?OO2FA?#gM]$Qu'3YiG^.]S$;*u@pZPtC;.YfCb.Fm7ZNqNG1kc=d=NV`-":QIo0rF^*T<80QnGkt
%$Xp,Ahgs=PJ!O55?+HqE-?\FIMhP;RjfHssqqlAScIs<V^U7.fC+"/dL,+rRF194q!h>ZEB.cIm/G8+&?S;$5;I;'LjaP\WZ0'/p
%9>o&upi7m,%_T>_9ME2cQhQ"+[A+,5des!>2s=l$hiS;*E,ol?H'q_)\^RYprL[)P?^o+eL_cTs?`1<gW0QWY?+<I0!S^qae#@YQ
%r+PMqgMTcZDNuK'=IC9W-K-,idSuXmg6?E"9Kd\Zcd"S#pPRWX_fL65n2?K:]S=u^B(M;,6'&c67f+dBFllaW8Sh4gS!;2EfOjUE
%g1OaF5:V$%(lB&(+lSL7^hiuJhPb]UMrECn2E*DIX*O)!ZdJ#`N?ha<^+qGBN8tCbrR5L>r37(I?^XcHA&U?b"<s:XDjVAufU-]/
%(nCFjD#?3m)ulJ=NH*=H2S-NBJjRYif8V"4<Hj_a0U"uPghd@V)<dIaSUn_F_>gs'1HW2gdtRi/QA*LZ`a!U>Yg=('S!R_"*mDar
%OCT>#"`\!6=OTDC8J(W:Jq30pX5/]FhbCBe4&[Zi(b<_XYDTg!?Tt19;ch`gO=lQC,lD@\>K;Tmc:UjPT&2a+;3E_Lm3J<;o/Rl$
%g5@f2kGISoP%ONKib%1Q5'@!FVEM#KBLo!_W0uC#.5[O%I,"DqRp`!D4h!-Vk;Gjh_)^_f=/knV8448ae<!b3GXL>Xq3gi>C6jC*
%RG!cu1*/BE#C1+YB!^=)^fpsU/5fF1L86L]oe897i&+<n!L"Mq8\s`MnK-g8+#_NWZ"]ie$2.S8B7<Y7Pf@Q7n/9N'S\p*MM)9#5
%kB[bnEE;5u>bCCZOD6q2BDW@@hk-P.TA#\j.gs[^?ViF+7jeWL8WP5mpfp,uV4.BGMtpI9'<'I*/=fA"RJO%G_ZW&7KaY*3n7tOC
%9mlUWabJNb/!JsGQXFlOI/X=WRIFriXEIc)YO(;I?hV.`9J/>J&#r:,eM\)4:ADAsbeR!eqft?Bib&o$<#;'>7%F*2.R?aFG1NT2
%^.*+*(ahNUFqmPA2ngRVMeSe(8Igs0jF&*V@Kj(olOts.n(6or,tpchX4D%-13RDr)ph'\Oan1M>jg-h=)7k,)2]3$'O18ZUF*R#
%Q/ne\=_^iNe>`u899<4]p1e1:XCVH^_P36'b,bL.rCSb-J9>/$SIcNIa[rbep4\Ql?m8T#<W$<9P%bUES_,2[i%[*Qpe/lRnW:Os
%L^oJ`r0?LFoj\[h5K0MK=h@g4Z5AF-'6A"(TYd[XT#d-rjX07qG`?H$d@.Un><S@+MqM.$1_XFM*459!AYLGYAlcbbBdUtZ`Ffiu
%f$r%=1_XFi1/X4i;)X'+.0%RO"/g<[c-"Hjj1-QE9Zn<q77j:Se";OR+,f;Eje=#/-I"tNF&DpreL&O0R5/.4RKSlNbXG*VLf;&X
%bu65e&nYapU7V$_PXK"9mB^;/F&C*OP`(]XR9>sN2n;R;M`EYO`c;L;R,hApp>pRV1;)%tR(^ZlAnN6([25%n_-Gf'R+jVMME>6A
%DE's>MsFH-LgPJWcbqIfS%F_7O*SoBMJM81)G>'%JI#.Y95uQ&[@+h<XYs!RF)AY82'3&\7C<i[rjP`V2:gp4=A)LC7CE/0</^/M
%SP3F@HeLlN5QlSJ,s,$EJE\m/Ii@j!)C5q\3fVR%'[mrSaOge3pa"=DM/rA8ALD&K!B;&us7'k02=K/=%A*ip#XdjcKb=ZjmFRgP
%Y@![)b?M!+MLSZDN;i<Y/?Pu7Hei/*4&7&3-cOf0hFg5!>]DG"(XmJ0GW!b=XJ?Z]U_hM84BL-;)RFpgbO+)<1)\0VOEG;KL^jAB
%1@W&$p^R7/LBj7%3>OA1%qM1L?`)()R]gZ+r<nYRAFadTI;""?P5(6Go=p[459Z*IIsoXSlAs"6S2&KQcfJcPea.hP]&+H\;h'U9
%P6?Jhk&)MC+@37#E`Bt.3Z(t4@V06S*_)t,`HX'akQN6i@FW"nN!F.0`utcO?;;&P]lpf1;>7[o<fe2(*>=q?;nk5N\#@O#)L4uB
%0@%N\3K"gg@ufs#,QjkjrR1Z%g"ZP?i@F`PrSM=Ch/rZUh>a&(^<XCXs/$kb8b[]^a&T_N]0&1P^VY<8*FNW`-aY/J4l7[t!)7aO
%,i/&dpO(FQhm%%H";Y_Em&\h/$dAn.1Q<Y@2Xn_^PjOfEX#9pkT#Fn+r1XQ&<m#XfB*&S??^R3ROVA[n'&I.@.m5Vf+T[i%g1OgJ
%-=n]6I*/^4g/hH8^#s'+9$G\qT+FX?A8-^5OqG"le%KIK/<,biZ1]KJB%&He'SXZ)T<`q&pAMul=Gd#<XBjBJk5*D=ZfZJ`gO<_I
%g%H=/pU/KFfd*`U8J'/=C[bEBGZ1F)`"l`.!DhR%X7]eCe/&j08>/[O3)!8PMEo*4!ol[i;i9#NfMr2?PA1V91sZc!2#&cT_1te/
%08#V>^9s.,'1r^)TQQ.`0`nV4Y>"Vr;SCo_VZlMU=:BqfUk+jhn<*u^`h/i:i$AiFUk+jhnFF=/GYqlb)0f"U(_M6h"#!U>JYn!b
%E<7eWK>RH+o9l$IdZJQpAibN#V\`(OcV`E$Jh1WWBTgFngQtV[\KG;60:PLQ;+#Z_`,tL1?8aM]`faue:&jL'MkBR-OKIA&n>[_n
%mHNUi`IKl6Mdq&Hdr[.$ktOiM]Jtr9DGC'2R=%;gRC+c_JSDi9?lEN[e(^5;gQs7`VR`7]UC49Rr&ajJc2Yp47ItXO5Jc/Zl)FT[
%0aVIk3.$5f791%KWDjS#P\MN'@2*b%Gkbq*VoR;^=7bd[j*,K$[/ET`8=m4L^Fsj0?h=AJB6<=c)47jpRFdL2V]ORIH"b,O(9Z99
%^T3VfH!@<(Ut.V:-=Q&R:R22"'V#k!/&Y2u:(gcGJu2L&-B]4R'=;Jk3(A5IEZ2uc5u3$-EJte+BkBPhiQOS-,7+lp*+N_Hh-$6=
%BcJ@W@nbXuUiD>MN\Mbu%.qoX?D?5Te3BE-s6QiSQ+LAi<O8,>/R,r5X^HbG-c/dWL9l.P_aK(^airOUdqBeFX53?FctCRL`cB,M
%>,!7kZ-nhF0$0qQNF%#TVV09`>X]#rMCBd>i23)EYN(u'rf<Z.-ms"%qoV_+e4OY(%Mm"TU7q4RTc:c#5J:]C"@)-66aqYjo6ATC
%O\P>MUM_lE^##8!(J0RA3OgUhM*6"4DUt"&[\?kj_rGol*ogKEFBa<gj'MVi<s,Rmc(JHjqahD*I"KDj'"J<)&ulu@OB3>K:#bil
%;o2T[AnECK.g\"1T'hksL$;D,$CBt?;5a<?%>?gs;!;4uQHe-,!]$"[ib'JOT-2g##".q#^ClHsUj\^.EiC]NGmmK^\^[*A]t&T0
%;K"2\k5)d%"9qH_c-:l"2i$X+WBW='r`k%J0P8\(9>FQmcDBr6lHZ6ogu)^7h73Y0O?HD->U!cl`gp<WF5YCk@q,:?\p)D2jh0t,
%=n#==DBA_dH2D8@!`M.nOC@]TC;L)F1\)EnRD2fI]cT&D=(2C&Q'`\8o)i;XF$[fVK$cG0=63MKf1p*fq/SVC8^3Q&Y',;s,mpbs
%]"_uOU=?3uV"?:ua.m9Z*[Tl[<i/_#'lPF3dG./LJ+)BdW=O"rSM7$c0L8\(M!HT"o7_%frOoiH[st@&:_oK/nNH=d?:+Z2P>\p*
%0+o:HYGi%bY?Zc*;$Qo)QkY%,^T_i[p(Ed5Z-niq.RCdBVq4-(b'm6sil+h$p5disr)qaA=dP;$BQq`T3ai>4kOE?W=2OHGV!Q#B
%dS'WghLDU!?D?i3T]DpD&PLFQmc:o1o;Ph,2Ss@;%GBjtm"bXm?+%&cUbt+"p.f??9XSFcei.ke`]?XuA8B3*n<!o^R2CD[(4G#n
%XaaO!L-HH+i@Cm)PT!!"BG@:$d>`A28Bp+]2N$WLKKjA]b%$hKW=b@!]5Q)[],Xft3Z(t4;X0O_(qCW/I8#S)F1QW6Q(&?F_4#6_
%Os'5T"G,0?=1]8k5LB]EAnm#n*mgJWeT'H/ODED7JQElV6Df\$'Ed'r09/U>piLMGNc@T+a'!@XAmg0`^7_9;j6Wt/ZPYu'5;kL'
%7aLI0a6\c*XnH3N2.@'an<pJ`MI1^9at2s8ch4t>F8=(ioUa`M8+O4reKq`W?m[RtA.8.WY[7FmH>^^J,a1n<S->FTqF,0=hX4X2
%OuCd\?*2f:]5"KC2b_G^FYp:'I,+^X\4Ou>RD0tV-%Rd-op93jbel"M[hiVE#Wqq`dWsJ:cMe]qA7FtIl[D@]Amg[1%/Y,2+T]%b
%E.Esem:tpsfI3/=Z'fo<,=t'e4-TA[FJ'8:-ChJH2"LqE]E.a'1V[4q[O2plR'mUpHDa>(G:'&J1m9'#0,T/-2#J1@4^g/robur0
%R=p]J;R.k"(n#YNZgC`:-EUljrkU-MdGtktio#sWj0mS'S0duo_A);5gk@r35%lYC;315Uc^D#4jWI:KP"n@d_a[.l]]En9eAM)f
%I8*WkD^WNpQ?k7I8!"L,42a,3C/feG+UOTsUm"m)`W=R5mMK,)oXoZ[D+(#ooq,;;n][-A%Ve0%pV-Ec$$7RsBqG0hI(S"@aR"0]
%n(_hop=g>Gj)kkgnnGq@eZ.eQrDQ.GS'BY:r4?%E)"MqE;'r>)"AHbGEso(/kT=h!WeZX7l4C?Y`%].0n/j.OKl4X%Y'cONGE;5[
%n.&.4Q]:.b%Ik7[ai.M[fuO^s)/.;Gck8?M!K_d,6(q;`'(d*-n=s-EKaY*<aN,POV0^5$W[b>;r3`<&=2#[S[3Vm9]hYsTCT?4'
%oWN_#MEbkQD,khk%urq&c0h94DLuV(`)Bf8M'eDXp&<QMs"Q8^i7E1Gr=),`fund>@Ups<_8AWf#lh#7rAag40V]F/FTmsB)TUO!
%=Zu9.h4]5XCOW%!N@_6p6.?HYJL4eKde0i%d6575NC'sKkuG?j=GX_>6RmXsrC<$g$:;SrK=nM>,_ff@i!3gG1Sm-C\`F`/r7<i3
%#Ca24[0Y$ipJAk>-k5EBR\1$TnBgtn?qt>(9ul/fkr8;dQ+9tmq;DY:g%r`BpTQIEU&IC;:mC*3MUEqGV^O\L9)m#cVdMSN4H0ZU
%N_<9S9u/^kg[S!If<bfLldp8=jd%TV%E!-:-Hp#)M*\jY_PqC_n:RQ<E=141%Fil]SJ8#$TMC&aI%YY]aUBN5'FlhtW3\DB9V=1#
%3Hl%*%0b@<_^Mu+[nZe8'XL`^rWCAfBo:RmAuD"Z5%ZUkTV_uH],#V$</7Pd&sJ5%[-JPUi\i`Ob=Duh.89b*9G8Y1JYXuj_Xqc^
%1oILmKH\U-,EUTUPRuUWZs?-i."jQfJ.%QEmh14.ldBmA0Epi.!c9^sm1cp+d/FL$-BrN_&#"r'1pS^b,o"b]@PFuRr*#KA!irkA
%$'Ujps7$f1;pbMlco/!_+Hh>"$JO`^j(rDXr9uNa:n+na!d+k".8^&)F_r!?5s!1`#,!Ol+dT@<3W,MRW=9l]2Rm0W(_Iqdh_ZO?
%@eLmO2A8#UVjO#aG)Fs%B$Z]Nbn!T[@s2U"VjO#aG)Fs/Vc`Q.e(C%YmQ@A6SRV;2V2JHQ9G\kTiSY69]*R5Ci$Pj"Nefep:/i4&
%fZ[c<)KlJ?Ig"D)$J6e8Vgt<>p.T2Nr9uNa@"VsUSom^-3sG!.!:9?LVA,m,-'V/cc(lbYU3%<cSjC>a+.gKkCuV=ZSRQc"fjeH6
%HFI2f[_DpQAt%M;Jo(k'^L86(Y"]mUGhd74_PB5'`BeN$RiQ>Z]CNU-C(mL!rS'#CZS^C+_K6.6^CtI-*CjoNR[.H<d:O8p0X=@o
%,'Oor,#;W.L$:gPBqC'K;j^<g3o(L?!EGR1T#O-3nCi,EdO@ed-p91T'9lgh>-:Rfgr$NO;sa@KSD(F(&@CN;HLN$%lkH<qR/VN$
%[Z0p\GRDnK9W,E?1T+@H_pd8*SSfgPR%7]0HAlFDZtb&7)B5p0KAn=fVgt<Vfe]O.o>B%EQjnq>@WmX^.;#JIp.T2Nr9uNa?o,[K
%W(79J.:B&Cp<4u:r9uO$AuC3B'XL`^:6"Vnd]3-%Bl(R[DpV,X3sFsbY\-V0k(fih!Lqj.4Wc+\Vgt>8@F'NXbn!T[_R+*TVe&bn
%:162s+_2@1Bmt:F&#QmOVUfhrdj[tgH]0bY=S'GZ\<tN=aA*m?L$[^$XJotpLsuVd3Ob5amE2ALoEW6VMUEqGrs;;qR33qPV_FZF
%f!D8Vo>B&0R%5RVUmR]^G)Fs/Vc`Q.e$td9??)N&Fpco:1h7ADBmt:F(T#St`Y>7JPYP)%(3F8>GT%6ldi1VOPYP(:7Hp5eV>9(a
%9U*!Q1poAuknL#8LM:`dd9m0uSo&5R`0E"ci(PjlXZmV3M1^[78uF*9#:Rhp@ld'C'W$;sR!)2^&1Xbm:8K\92%7C1R/##E[qn1K
%8@U]\ScX$Ae:.JJ/l.$Z"mQf#J+l2gZan"aP>Tef!jfW?_kO#&dt<N,9)f2iVeI2$8>dU/4/$B/i`r;83JP_!B\Lk#I0;c>c7D^g
%PYP*P%o>;]o12_>7HkM_B0hmHLSsZ=g.B&fR%e\[d_CF_KGq:T63A'ogsmfiX$B2E,=Ui2V>hC/m1cBqPYP*P2pNVE(K75VrNG7(
%RQR/#Fc+ec(&P3U;o#bK)ha"hL>ro?(Kjg*FR\0%W`,kq;lEI/e1"@p:d#k!s2iok=?A`0NJY&dC)3^LRptc'R)KPZ\`8Rl5@WZ@
%'k%W2>WNJ7?kt\gLh_aZ_:0Z(;>PK6)P!jM:G@Le'W-@-g77#IQX]Y60\\ETMV0FjVjO$00iG6h4g=kfFK\d3IYi[D;758\Kj^sb
%(D-TXnW-r/;3/LYj77X"`bd2TR#]F.@5GF%m7+k-8LUj3)sg;6c])KZ&8`R1^dRM.pfbc+\0kL?9!6tbrU'rSNMMb>c,N$g?Dod-
%=&p"un"3Z##@>[DG(%Kf_5XY_CkEA:N6<2>r%KN6=\f7LRB)ap:P\FgVq^oA^gA,h\\.qqats%TYQ#T,LWOH(h*na;lc4K%6Vlnm
%/7LnfL.Q225'gt42HR&hMk2f3k3=cUn^0Mqro"N*R@.pe2pLEUTYI;gqMh:)X:8G.D=MPCc#U_U/7r,'7'oY*%;O@iSqA+;1UpqK
%[1Q7T&[g:NgU@RtlD#[\`1U&OK[hU<j/Nlt0@4Z8OAo:O>jNGM%BRk9i?4)/Bp';;9+6G!L;?]o*TTS1%[8m$j/@_4oq,;;2''Uk
%4X"u7.qA1!E6cNKf2%m0bn3<,4Si&BD:Yqks/5*X=[.%.$`_[pB";";)r77?"gKVKXD.gR&cNZ!=[@;I\,31.nOG]JcRf&oY;Mug
%MV%7(X/EY6h\#ViKlcXipTIV=6`ic!PqT/F9&"9_;IDiZJ>e(?poj+hQEM>_5%o%5IX:D,3ab,gHm&B4fq2TQ(DOjoSIl#EY[FDM
%W]-LDT//,ME(0[M;Q;UtQ[U6CQupa;WF55&g8I8l8J3@9B9)oX/&=p]7\dq@;CVTM.-,-:,SNVs40A=8Ak%rGT"#u'%gm):PJ[Hf
%SIU?D50LW7[oo=)pq'N@?0c`K`o@sEo.[_PrYtG53](^PRBNUF3W".1oQpe(]Mkksk6K#C8#5(\3`,1ipM*e!rHGZt]gt!LWoR-p
%2g)X"FUW6OY2eufYF])H!h#_F<,`*qrcP=@PAIs.#t$6$/Xonl26J%-?\oWs2'n1n*?cHFcY9]nG/g\7f%k7G_6$GMhV_%*@o<T6
%4DOTDANu6\n*.&*@&]WQIan>!<rlgs#!1fDEG+]><5^&Ec:(>5P+edg^?5;-eA\nZb(HgIg^YJFrG(K#!M4/7f?KhpS%[D'AZMA6
%c0P4o;[d;+k6=SkR?lIqgR1gEhQ)KHC>Z,2,2K]Zkd3G`>ko0m>HL0\rru"d/a>_2HgU68dq`#?j^tXJc;82ekP'u8?o_5;fsYUU
%Y)GX3IP?0$[N$lHD9\2\?<_D2Lb)e8D-3#VdkQKL3n.4")F(p\;(,3Q)p3fAhsoGcrQMPH:H,U[WHPu(C9?4g25$_=GS%Xm9=rfu
%P[I%oIKRSkeC2Z1_?<?TQ,33<]uG?D481N9buRfaUp_J>qn6kTFR[ZCFT$CU^HuusLHap+0;:k>=8)R;`H<gB/2*loqcRW5Z`97d
%80DEE3%!*K[Cf,.?dJ%EkH^`BeZ,0hO`t!RDE(pC4.0?WgC3ouW/#8*]@K+;C578==6g9'>0Q8!1jYnFHI/&H-S49MGEtgfAM>T3
%?hG7kaol9,K/t>:9G/ul<I-')15jlA_*ZOI&T%bJbu_)TjnS09n(`,j\GP^`'gK&9EY1l")U5E%ZHh2L3g@tNAh2#8</Z%aW7Pd8
%!d6>.5:3`:dr2]L,!?(BN6GFt["*2)C;\A>62182*Yh:]2tHROkM`5Xm.rsF>/FH)@M<)6^`md)1`HnN?06<&]in-+NOO?U#8s*C
%WLlWEpDVk&#.ijZWbj*peH&XtnjS_\2W3d*@fFqCh/GrqU9)_;=Q)PGMH_K!IdO\t"U9.>AZpi0^EX'o[qC<@+CMst;iI!$5!MM<
%*h+4N#^Ki\ods\mC$<YN9X+Y.iuTb4U\KAjK"VJ8[(>p+X4coMZagR]=QcO\l^C*lf;^F<@#W>-!uQEGW]Sk(kSn@nb?'.E_u[AV
%?@.\&0Puiae'dI8e/B@=m]4_ukrp-np8gQbp"Hn`rQ(s<A>cB+j)u-=[gnE4.':4Kh9D#IXt3jDE>4Ws%f=5m=*S(HOQ1<6?.\sm
%euXU<oBQ)4BiZmC?p^CX.n"ki^iM>6XsqnU3Ss3!fR!F`U7KJBlP(Uc)%'th3AGV^9d@\lDHa7m7QJ#^6Hsp(U8+#sgf]-S4Pa_A
%2)CB*7/FrL^L+;O#?Qu<;%1gS)mWl&7f2%'Y?tm;E>gd^cEbkg\jj];eSa3\M%F%9LIih!H`uJI,SuiAqohP'WU@/I3s0ngj])^.
%1Xmg[L`p7'%-q)p>K^&X>sd7rC(7?_MlUk1'E<rqX\'W'Y1?/#McSrn>%N4I/3.O&@,Y,IXr8-*UtXAbODAJX[tbJ"P`A56*/e>J
%a)sk:N<OcePpIYjXk$p0AS\Lu-841lC'3"08Ck#J0&;P0`M#D0e#U[4eIAkp-<_^:qC>K\_n+VETm$3[,A([$[ScH/j60Aq!FAV@
%b`@d6ICY:8EWc.\M@$KTR`Sq,44WrB0Y_TU,+bfR`g(\(P0L=JmCJ!:Jo!pYd'_6V(j(18/D&V/H>&J#.T1.B@+`*T-sX^r((G)3
%;irr5`5@?GDca6hFqr4A0CCt4/U7PYq*hXghp<A]>--9@</:9YK+4GcYLZ!>88g*n@q;hSfU71bgU.37?GgKTgo?Wh>le39:q=ua
%;Oa@V(S'W$r*okr0P!&EPs?=hi)L2AFj"]reTrN,A$JdjC,eh>755,0Of<=h=jZt^[2Vl8/@A!NY(6Ia61gku($kU:L!&dplaeib
%93&h+\ZT1!P3R7.]BECfHL9!X!uNsa,-+FidbX%N3+R-ik[Kak[#+E#60YU$#ms1L12J#&27hI5m2GndKj*lMB&cMQ_fD=)BeUpZ
%@AD?RG!fVbW):tDgChc_Ws68$D><98qT)a)6<=^C&D-+W(50Z)ED::-K(XBiK>V[=$?e$an5B1bUkPZC0)CeAk[,a!U%S'nj28,$
%T2ml<]nS8K^1-IqX5+gooR*=qLk9AmN.c#%NGVco7U`GK$4G_@X^]LCKNqt/5HJD%<PAf[7#B2h__4V]H<6Iq:nj]d?@QIt/"!8n
%TD&1T[9&F-4\%Lb:rbEt$b4]W"Nu]OG1LGnYL4t)8;/o&m2Fh;;:`X8i:Y'lFZdh>W6r$*3S_nmG.%a:\;[Q._f:+.[G"IkES)s1
%+`u)J0]Rs!kTEX2rp0+^5t4I)],-$J)#*68\pPhG*t(2S3t/M=<<)K(#CcQo0+S)H^q8Jmf07gSB"UT%mK*ebc,Han?DEqD:1h-*
%<R@<ODop)teSiRL'"g-r^-S8<dCUYd7JE`!bqR##WA[.P&$9&#fu2=`?F(XbM<8:2+2bV!32T)R0;?H:ibAR,LPKT&;8ja,[qPD0
%Pdr.9(FqQY5e:9(;AYKh$VM!DQWBCN8@CWlGQ>De"u'+mSq>Z19<'^'?^n1#P\5@d?SkP7qsmUk9:WWA5]a#/A:&/N?e$=)gehKm
%a0CPO):KPoWV(*-_5F,hG>B9_Hgd;.Qk/mlnsf%6qSh06j3ES2S`RhGKrUL,gh1PsDm=Y)Rr>a-mTIleG!A4HgMHW,]X1-%S-<A)
%pC*fqr*DKm2XYLdJ'C16gfSH:2ENSV.Q"KB^3cc[9>0QOc_%u/h;#74UI+XqdrI14I<[s&eo'RO1rtTOKf/jL]3G44-#\3:=jGQe
%]:Ia&;>4Pa.D+1^'s7B%o&"3nha'';1ZQI=d+[o/pPck8rTSCk\<),#]%(K)[4e!gQ_c@)CRo9iWOTUf.kPX?cCc$uYL9nDrEf$\
%b<)<!D:[RIS`MN9Ka[mB`$Fp@6*X+,Ir'!bHh^?:"J+rp^7Kgk_QO2/ME@)o48BWSqu,<tb.WPr`-\]9K4`p-MbE06ZMf*SE+,<=
%Dr_\X#>=kobMSUD$P2-Z$@_I6e$h!u?*'C9hBi0$/o@0H?HB"#Z0Lk&p&;G.lIQi;Hu7iq_j0rDk?`'#keRd?i6g]`M[L2e@I%jH
%CuuYtL\7JkHg@`FrqT-No@;-SR;8.5aO9/g$*#Nm?Zb.VjS2*7^GCkl>.(U"_'"rT-]9LuI_Nf4lB6o5]*k*^SW/!b[[(2<%o!d_
%5-]H1H(k%VC#a'ldi(B_pI3U/['9T^4_9]CiNR]=n(?q1MX"pTne#)'$Mq3:CQL4Dp55p-`e2^1V2oJ0L>dcgU)$T/RP@S+mTAJ0
%V5L.!okWUDek9/[Ye9X'ej_mN*RNa=`mW>6>KaDKm/2^?khVG^oud#1?c?[_4bih,o<rN@9''C_?2,%UJLiuF`)=;qB_J!EnO/2F
%k]`V$lm)C6c5d_90,;f6?iJ^K]SH7Qm.AQgNT\9EVn(iGE]82]^V#mpVC&<.NdpkD%pl8`gj9"f=YGl"<8O"NI_?/*F)'D%F$41Y
%R`2V.XbmZ=eE]8$H?sN.SK&rW)4K5>+\QbFf)$8[c$'!DNO?4hm[4n<a0)igN8WaXV0pbjg+U]1lVZ&F;9?YnWh>dQV'isq;R&^^
%`X@,&rj?TBAOTDJBle@o\9g/Yr1_pbP\/fd7RXFMs*abSdZ+pgIUoLiISobJ?,*cAT_57&_%&\ISJiH.Mgi:OD"n62eq9PbM$2hj
%h9MS(+@>6L<kai<b.c(8GJ8,oTn"+_kNGG7AT%N`I]l^1Hf5h&j_:PjW74$;,TSWMg\Db7nh.#6Fa'I*bWe>+pS=u+cj]Qah_/kS
%0)3fElO<t9dl:QYf,X-qJ%7?4>4-:;m[h#Xd^o+O:F>Bhi$fJBSLP<"\ao!85.\5p4QL;6?[GV)3IUZ.Q#(C'abu35FK=Ss!Rj_e
%]!2'V]6dGTkDm9i.'?UC/='fMB+LW@h!n_BI.QaqN`XqT?GD8-2O9<(c[eJf>Kb8m[.JmN]n_1-\Qe1=*tNH$@\V@7$.BDK4kp4B
%I.At8=DL'[Q@&!^#:Ot5n\^:*g"aa]7h',YK'9e]alY=-Y[?&]ED0h7aQ!NEZeWI%YpJA5<'#;Hk<^j(!8R'PC>#M5:ULO;J]l]g
%'7'O2/?@OMXl\U6'+j6jG;."nhd:^+KULh6mV$mP;5dN&=-0sS=QI!eo&]J.d`.UO83@XBS3Lo4o#H*H$i/Ka,E(UT.@d?lGuf?0
%D8&/=jTj-+%a!te2`^KGSblX`dJ^6PZ<c,=`*Z;+e&`9@5@&V*Q59qT!npRd-N9/Z.VSTi*YG\#h@tIFUL!^7T0<jj#;$XOQBtV5
%2HEH*?7?rDPE2gt/@'g4NTH:#%,/j6WE3LsZ5II4?H6[)rMRINl_4Z.k<SZ2F99"(MK6!YaJn5<]7g;I7bYGP/Smo+d4Zg4oWVB8
%T3>o1j\]9Uih^dF.N!FH8lHMFhFU!kcIZD.69#T%%@Yt+EYFJkdjrHtnR2!K">nRd)"Ju;='3"@7#3<FOXGaan4un]d.DM6$"tYL
%TML=lhNbu&4"YmbI*#F,5F&)T<K@9oJVA:M^-[84f3H;>89m@\]S[T&-1W>B)@Q!EPAB'?Kk:B@53_)a&Be7iNb@nM'Z,(5e%SlU
%fRsnlU,T?NI2XT=.#c$a%@K!;5o1%5(m1hu\1%_eML(JD448s9Pt":b<<-SJ<;ptV)@GVY3BE`eMD7spgB^so]f]g8H*f5RaWUq7
%jm6jX%,h&qW>7fZf>nu(S\G;[o4=t@rQ$"oIG$#c&on<'CbKUsJ6;/,(9ptfY89)h-f*h'S*S)1SY`Htn"8pRD<65b`e[_(rGGTA
%*%EfA%FV2+<I$%Q]Fbr"R[8<n&8]3RT16CrI/W)C.;)uDIj)IX3(lo]I=Pq"jpQf[XXp)I`L"o"=OCaO-[tKfEV(T%eD7*B/a]\n
%`h1gSS*iU9q](BP6MF0^Yk.,S7rH)'57j-?ZF]<UfmoQLeleNpL]tZIbARl3r:>iaif!NjDo4'Gg!@G"jBfQINAe0/gREo?mEWH'
%<]8nhbJR6W3?,IDfrJD:X8NB6EbO&+CZG?;(]S(:luhK)[<h<K9^8`%"_ipbo^8WX]qpjo&i:9pQ9n#/k+j7$5.=lKIXcQ>W.&B[
%lY#mEF"i"a'+i@9Dk%nMRb56;ctlSqmSW@E=;<<mWboHi&,%sg*'>gEY<7+X>Bk!Kr<<J]rklUldYG\Sp$%Yt2-t9"`E\[$d/Ii1
%oTg*<U>p4^>RUY?C>QiV_lhL;V5'0EN:JtM4I,1Qc@^c420:rIpE8lC7(VYiqC`5l;Iuj"mGt6Nh#>+8^h_i%#2Q`]qWiQXkL&HV
%+%BtuQ>ZKPlf-TeV/8Kb;NX/CCrrY)gf[kp>R=kH2]c4aRU<`"oulBBV6*5U)dRFKN`L^jjnl*N*+%KMOahe`$/Bp,^J]W5hM6g?
%lW6Sp9>sC9r?0Vcjo^6Cp.c-Wh3Y%Ad$*l.:=,&g3&ZJKcZds+So10jB`7djKji3>b[9ciJ`2)t(/E^DN66Om?d^<G_?WBB^f[Ye
%CBgpjY>F.!_mft5KgT%Yl)'^HodW"Z>M7V$ce`t4F:6-:F8b3U]AR.)gkf+HT0(c0I#"tPd\`LPm^Q^G`#q0Flqni>mn>i/9RCs1
%l%tOG?N\551LE;Dj1)F<dNYTYlYdhV,=+2%fC#f6oa\_!No,('TS9eB;>Rq>6?f$)"BaJ%lG.XJXjfHPV)KYJHE=#a['kY:fSftW
%YF`i?A[r&b;p.D:FrEksK%'K7'tX&$TXJ/Vg)oS-dgoe,%p#)@)A&ll2_pBa]-eC]Uc:8.fo'/kHWXG(>^Q/B10ClCg"fQ$TV@:9
%Jh*rFc"_7krVEB,ksKsn_Z0HA7G:VPgFbZeE;K!ZN@R6<fCtosZ5,5d?<R+&T(ru:IG!4VHHaYY93A-@W)2j[]cYP^g:JHWos<hZ
%kF68U9@9abIS1L74iKB;Y2UDD+4tX3H"9'>7?'`TkIY:B_iO+P^U:g,C^bK*f=H_o>'tV.G;j?1^THlE_oh`?rmlqRpej49/n0?U
%CUq"-bLrAq:Kuq5g7ph^8jtP^(G5_oh7L>+qW_qcG]shaUUr;6rJee@p57VJ*?;52=f[!oc=#/Z4iXa`=?U\QHEmm(ZhkT`QHsJA
%-gMSLrN4MG5O'rNkBAh64=g<f"!"LNc8fa4B?BbSbDHMAN-<qFr?!Pd`MWO2mhn.Ah4\6t_30_II^P?BeVu@]R`gcYl.Z,lc1RAq
%#+8EO`7R=Pm_!F$*a))L=fYLsIgd+g\5G0=Nt4keT3^T>M]U!lS9p8^Q[_snfCiS'`1TQ8AjD^$m`(I]qbJnkML2nOj38Zu$?E=K
%W'8o#Cp'$=4SF`Ih_)Pk]R:Q_ND-N7I%smE<88oE*osGIZo]u<?glg%`Pd",>(#jVf7!Y/e5Z^Y)TXJ.gIo!Snp^#.G^f+>`Re;H
%!Z4MZa'hur*5pRVr$L^cVi=4@(J[fK2muI_5ITQ`\a5f,r8@QOl/^]R,N*P*o@DO^h6I;j%Z5A?]60Ql]Elc`m4F`uElZ32m_i)e
%fhPB4XpSnmh:S!SXT/2\6;*p-.i!)3^inMg_<>:+\9r)t@7JpWpG04#SE'%r\SHW:f7D2Z0sV(f$Qf.BO&d1Ba+;nJIbO>HB:#),
%:Kt>'Pcls'#=IeGo9U!"0Cm\L]5O9*q.r2f`2g3D@^Rb!5Ds,+G@#iIZIOn/5do@ap$i1i8:b4(]E]Lr7lRMZNAu,gPob?5kiQ3#
%+I,Ku:L:c8'J"<M3O[rKI9Qj$hnM8ad9&_Uo@ns>RBjZcLP4Q]=3^3Q1\X>?Gl"q]i9l&0Dj5:M`a'0Dm8Fp&!Se5kHW=2H>^Z?f
%@o_6%o_$U(BoAK5QI^)3GP.oK>D.^gGa1E@jdtVf6H_"LGdW5+.&n:M!pP(m6t"7T?gc^g5Zci:g0!b`HmihMh%LY#`bF\_j(/:@
%mMgPqV(dPGD_N9*3K\X4a,?"S"3Q]#=2"R?\^7g>VrY'g>26+?gl'L^mZiY7HUjodQ3B8>c9L2Co,k)R;C^u<IYDs3fEf^kUO.\7
%r9sID`_,sPn7JoSK5D#PItgj*k29d^GF>cQo5D&Q4/ZEs;b4[9N6^ua0aKIc=$DR\k%H\L+.XD_Xb/``;*i8!AZg<`s#B:I>r?2I
%p'4@OPnP9rgOBht#WQ.tkT+MihHnk6idfH^p*,4&];70R!h8q<I3Q*\Kal9bpPRZ&MiEP`5%Vp^dc3j@%'1[h!Bc@dRb4rOpYGCE
%[?&@7]SZ1tNE&*9V=ir^Tq=QJC!ici<B2Q]^>*n,,:umgp#g\sTU%Z#D4O7RP-V^_q>+C[Hc1HgI,=]39[@[k&^@sE2a"hRHN,+3
%e9aOf(Dsbigo4@:Y`@i2d)?nRIG7tF7p?/oCE",S.dU/YmgU@[D.knHF1&Z'g3gVT9tB9hn%NU`hfeGMlUqa4CNc@b&Y%k7X7n='
%eOU`H?Yto335@$s0P;aeOO#$K!-<PN<No"%0`BjWpqHBnfCJN60+Y2s391\'>nj7k3WQ)2X]k`$pOg`M:??W-pgS6JK_q`1Ep"lQ
%oBO2%g?LlS\YGXCJ_R4mm+U9(`iZOcg\31rIET1QO&'0./D!H-S6tp"`m1LLNP9,#\H0%5I(]1<lY3Qpm45<6VO>9Wr5Ya&4n8-+
%eGs6pPf//nq$GW0pP["s#H`?Sqm-*pFAg;b`g`rV>s=#Ukre*D?^Hdl7qnrPCs5BY'9!(;b?5>t2I5nAj_E)omW:/o!=ZX^n,6k]
%dJLPpQS6)N./FlimtQHA4b@Sf/DFeh5a'HoD!c?E6.4BT>o1/WkKcdKh(L:Tc%l:<Hq06Sq4bYoq[Ee7>&UQK37-USp@_#>q"*)$
%EUI-&gjW)e6a?^11k#T9[tH:i/6cRC0`(m[1(+nj2L^m2#Fhj']hYaKO!ZXUK=H]UEl#@=5-D&Sq1cHADgab&fa:'7U<!qjrM(".
%<F3sRakk"8agOGg.C=_gr:o%<eP`Z='AK"[_$kV!;Cj\GHa'4c5K[?9Dlb@nV6A$_!5##_E@"9_OiXINI=4%m5:U*5buSDXGTME2
%<T*YDP-bkZS(qFnpD\JUj3_GfYspJ2+)^F_/Utn"JTkfk%-\+E_.rnYMF)[dj7/&el$NFAVVT_agE00ohZR<kdqFF,K)nl4`?tZK
%/#@TorVH=G0Sl;$@))W%(OZWWWq>sn(U\"1]fE$m_N]JT>Zr8.i*F)]>V<b#F(RgcOG-nl^&;r:'.ZIb@@+1j<?;iD9e/C%Ghsj?
%28:]!5h")q[mL),K2Lajm9[6o2>?\%,:?Fk9IY4r<US]AlKg_oO'Qi&`HpcZq<_?M2aKmQ>KsmY4C6FE_YHXb+mu$cYtbN=[+KQ)
%q4k9R.3n`/0@^U-@U%_5'Wf";hX6(ALcO4n_)C.#4ks?l4g,*>'6m@BmUqG2QL<GRVJG#b>NO>qMF^Bb8"V5NrU'b-r=_$K2I\E3
%077j>lUigS>i7!fR9%*8?X<2Bc(&,JHRES`(N\o3lX/N0H"6$)'Yg/fTbnS*Wbnp(g&O/D.PMI8)o-O=9&1s[f\UJ!WD;,.&)=XQ
%]r7O/j-:,sl.2Djr9?_Gin\h)hmK/acgg4BSeS2K5!?i0Zh1d*UM/FiBo"(m^/K8M^h'J%"_Zc<kr+9#(Pqm::W*+^Ge.0X>gF&/
%JimdmX`kT3RU9lXIh0Z"%%coFJ&:60Ndm(GV$#D86+Nbr=%c@cbNiICagIqaQ&3#uMb<hd>[(MZ34<e^);E,+41/6f*+!?f1H0GW
%($'3P'MBhMo^!;ab;_=\oXO:r>1]#bZ=LAWLW;le3p*.E#PZeSh-89\UTOh?f<-C%2]k2/3ML+_\tI>ljP%0eMoQW_a3T!I5L[=8
%1[8XhVW2mj'')gMmgHmml$0-L)6]1=6$ag5dmJhgjVb7S&&ZUjIB?7&o;3`^L4=F.Ha/HX21(`l%:3m014H'W:II-PV<@XHJndZe
%Q\jqHEX!El.VO>81>O9X<;&+JOnS-QC7]hA(L@(E6X$OVj\74q?MOXa][J9d,FMtOZ=VQ-#eUDUDOuP&Wcg/2`[+qmT,jVmH3Br(
%EkC&:jp[%ePsbS!4?Y`a+*&B)EQRNghta0gX8^u_8fr<@r_DgEfeqSF%ZY=0V/oQ+X&n./TZ[hUmc4^\Xu4u0n,V4i'0bI4>VU7g
%aub"?[Z<oP5TZggj>gn*<aBk31(^QK%M@+I/ZJ.AY9gA$WWmb:_[dpTWqMm@B)/1WXSYF_7!YQmaHHjW'jQ%Yb(t8E\RgNT_=t"N
%kSTYZfW@kLQOin<=`#DbiWFJ>!7%:u@<[kD)c?9.KO<=a+F6AlBF+Zq%JmIdT\k'<h;&<U<PpK)`/Z+(30W(2(;9>"#:W0cCqK*5
%.YK2J,*KZTI'ul]]WQa3dArlt]P?gPjcLr:p#e;T2-PTS(`!T9Y/f)&m5!82LpAo1]\Wq5)jjGHc7LBXhs3n6`lCF%cudg#eGq8A
%o`QRK)HQLFS*eBEQGE/P4C'fX'`@>TaoH#59ns</Wf_sp!:XD!["DFTjA)2\@FjteP\fI0W1>HJS#9S:fDFY7X,WB8'8Oo<X#WUc
%\:W+DiU_d\.;E@OKigDO(uFO\2)t>s5Rjp,KBh`I)].)@XLiXm)EpDrS3H<B3I!/PAOY2cHR*b[\`hAN;?3Y2j(f$^#QW0d%nu'S
%F=#qu>\t#0E:o\&='@[U]i/aIg#sKOGS5Vmcimh0g%qXS"SKh'MZe5E*m)e\":jUfIsg>Uo_6.6W^:d;^.YO?gak>0-a8hNSSkmk
%lih"*4up7(\BNkYC\k3MP!/%o3f*5&^d6HYZ/eJM4GX8,PJ20TYi),15)4%DT72PV1O'(/-G2u(B_9aQFX6ECp$i7%*4X:#HhdPS
%6fjQ5eW,"kD;]E;%hVb$F'<u6i`X&mq-^GcYK5mW"Am:&EtS's0DmbQ1P@e,n]e(mNRZe5^](Pf8nZ5?b\fcV)>%du-0fDlMD0^h
%oEgbJ@q(rnnMe;GF4ekRr4J?jN7e$Bs8#Mes1eDXl1eV-)WPmLP`Vt^fM6%4Emr,kcr?kpac9j;Z=RTQbGH.L=I'k[NAR,:/]/_L
%8kISl\LD38eq-Y-$@i#pA4DmD\$8u4A(k)RQr[f8aYm,;\0+.KN&qo@"(SVZbF5TO"iW;L.VS=5=^9Iun[ko.FG]Q>1r2VO5\<tN
%5_*Z?aJS/%#@7ZCc=G:R$'PF(L7..fd1#`uFY1F[!O#UcBFO]W.D_T2$JhsQZF_M#QF._@CLtj0`K/&;6F5/C7gWl^N!F;HBHRoW
%\t*t'F%!,q-E\l?+;U;G7+OCY#!b?kV-Aji(>cE(1U=gWo=6WTq-c(&acTK(2raFG=W13Gq<^S9=aZHZs6_6,N>a'X:a1#`#8\Xl
%=(K4AK$:M9[6]3L4)52NEFsg>6*lfk.+hK)"3/OG-5!"kJS;$BPr][OSscGmAl(O@;&iI=g+ks(:"oj-Zn5;+_(W/')X)^E&`CK7
%U/E+T@[^KiE]=1:=[PUk_r1f1>L\QQ-t(E6$oSW=#mQ1pZ\)CG_iG&7>gQlkWT2.+#PLke`Rr)h15RU&*[C`CB*h:PTE-QqJhh1<
%<(Vrhdh=Q2bS+T/q7%PYMA<8O,_=WY=gH>h!LSO(`DGn[4s_"H.i:Ge=#hR$2f%?9X<ZC$-)"fE=[ptO+J]p=;6H4]8m=3H%WNL+
%)6.DZlN!k$6FFee!#%&?V-H;3S@bdH-X*_S5uM&-kR2Bt/Lr]4%O'*$O>PV=Jrp"n3FLn,YQ)E-Na2A!<i/,N`-8a@c34>Uc6`)_
%3obDunY$(*r1UkC3J?erE40P3`-1sB#3\OSjRAVTX6'Edn/_maNPqFG]kCICXcU8"r;)/JeOEQuDu'Z$L_rT?Kd8!I1k<3TkccZ:
%p:H]DVT$>]YiT$i!:MTr_Q]m;oU95PYt:7l!:^gW0iTbQ0Yi]?-&iJH5bXH.9t>/X)Wo*E$6U6\%C)4$@V)mqZ3=30UF]gc#d_Q0
%nb_q1csTWO,aip9D@K0dk7autRP`2TV-1D:V+@j:0pY4/*AEXM-5IBO22EQ,^T:Ol7RII6TIq%8+8@G3"^AaEX]-W!H*@MogQD*G
%Kd)QLVJK@[,SA:'@?Y`6)nX"'^/<qX2ePWF#E%8bmG8kC'dM?O,+9HNAN/c1N,N3n?uJ,]FG2/]Wk];_bbM']]E*Ve"*fF*.nu)=
%e\=#Tk$,(=qrbc`/u%Cl4L\#+S-pAn[0<"%Xsk?0M?*n`+`]i.Kor)1a9?e6'OEp[dBc,p"O@<P>-s@)UI?uV\f+^1B:Y+<1r0iV
%i><c?rK.B/_aR\>$!!@ueIn3+3m*q`cF*6jS9e:U\17d8L2gg!H,DnU?(qBf/ceX8:Q*;m$n&9D5fF#0-5Z1_BK^,Ld]5]oZ!a\2
%7[%Br)%s<0r?gn^nF?!:YuWRpfM_JV.CjmF4BT?lAHHAW03l48Mm_<K=A(e&<hP5P(eT3Vi?QiR=G*DagMW\<S4U1q9Z(h[!0,j#
%Y,:<D^fPYeYp:rX!oo!_.tptrOGGF)8(^c0:9d\_Ahs(9gbZLj%NBqJBamC-K/4!h`l4(N!c0&r0kG#2i"$E>7-,<+7"&BsB#YtY
%NLnncM@seh4:$qTrZ"URQV7bXhNDl#$HnJ^U-XYd5_=U7/Td]ULWLg$B+8ao["h^JW_A\a-nJ-'r(umke-5r<i#HjU">)>K>LLk9
%,:lTb=VnjA.UJ0t_,2Hl>DcBOZA-8B]QKBkj\rlFqWY"P9o$T;(?Nt4Z1QEhk@L>P,=d3&"Xb.,@c&cL;Mg"!><!KQk^`ZEU;dQ>
%8D%%\T84HDrtBr:S;anu`g/R"0>fXd)/d#(2.I]+BnD1P8-@#V\eY9R?'.jlqgb/K\Dptc+<o9R'THW&E=9X&2$j7[l5N'aj4MLP
%ZP^Cc5JX%6eGqY?*6)Y#,Fk'!f*L'L9tX0$7LPhlZ,Uc'!&J3H@5jlX!uTA&\E(._7l/%B04+mL@uEN[LdI`$C%Zh#ciY*YF\M;p
%5a;Job$$^U\0g,u2(YJZ3O#`$/(S\#[MFs]/`(+7/OEmoJ4OL<;N-952hlW?,U:L8bqm`cJHk6FNAV2U6&6GGYa[U=YfLK^gJi#W
%$'lIGp<Ca&Qn9G>a`%tk)D8MXV>H69Kd/WnJQLc%pD_>g/?Annh\MU!@/b%/7aoVd@3VXukHGF)<*0p4IH7&9\aI<Y@p28'!aGsE
%:Kf*"@CWPuj2S$TO:X%]"JFah3J-h,3Vj\Ck;j;dPQ"<<!/YA(?eKX%lms(Wg;'qs#oCAWXT2+R9aNYUW=6O0WLRR;VAg!0JDg[4
%csV:_T^%(t_,g_C#U$X\;(f-ZBRd(uP78:RJ#`]\N4T1_;0<DX8cXr=]DGfT>`?]_O]Fp6*O*QmX1rgC*JZ&PIn8+BNPZC;D"q.o
%edei6%%\0/U'b7Z&Ep_f^aTbh4"()7[;8e\9$fr\fG,'ffmo/Xl;Np@Tb0uBE)99j:t_LC@/jhH$ii=n+W&nLKi%,P_&n3N_CENa
%H/WN@!b>SqN[_HQ#/-)GR"9,iOfq9r?q?3_O@YWFTZ[Ju>I?(tkb&dp[\FjS:6lidD\H[f:`fmh)!fe)PC`a(P(Jm4_,4qOF5;c\
%=-<l1c'31(dNm:l'iB#7Lrnra0S>c+b#Uu"E2O7A$Rmdo>.?-,*QI+r*%mG/ZB_,4B\^!(=3K/q(^HoKM7*m%:=dA]M7@B<T?UiA
%0m:oH!b5UTkI2dB":i<prNbMp/7H!+UTt&:0JVZ6W]:R]cViOeA.',l>Z.>;FE$nqij+:&BKB%6@UrS>JJoIZkaG/HpqVK$M4a/C
%6n;9Q!Y':B9T2OVo:IeUpq@Kbaq+j&C"kKA+T[t9GYDfPl+mnm0u7no*eUl%%hN,CiXUf@IVrQiMA6dUqul+,rIT`l>_g9$bL%rI
%XSA_4Yk%=5_)bu>_[+9E^4U-*,VtDHRh]aXQnd$Uk_/9#9P;7#fZ(W)\dSeq.Wf(.Qlj7hMu^r9b@faq88>LA"4`=7I^6-Qb)jDW
%nTQci%Rj_1Q8`C#=KWfK@5Js[E2=CF#6J/RKF&H!'4DK?A'EpL.WI2&8JVJg"VcjC%'VT/8#B];=m.$hBZA+)F,WdIB96]!/V/(,
%R(OS(`H=1>qJDAt/lFkQNk72Km+Qtm9l6T3i50#]$g'V#_"<s^&ZDD(;&XQ,Uf7DS+A2l.oHeP0-UriajgZSWQ>B!2)(*30&aR]A
%30Yd!`WcYgC<,iL.</h^W5$4Z"?''[i\JCh2?hH<E^`_O"*"t_[H_!]R=W?XZ&(6h@V!]VOnN:d&caFLk4T7bqe##AC;EbnBAdAM
%p)Z>G,.A>,ggLVeeJ]`d(P002)m9CH9oGG<A6np=pDuI;=6t+g"J[lOU$N4OE@b5\6J3<H.@]WHM,XP*T]<NaA6&BKp:`0spc.7<
%NZT&AY8*Q8"Y)-tJg5,Q6$>ZA,oC2O9L*@P/qV>*ahZR7hDP'qP$(K7P%!#\R02-*g5>]mL7u_>.eWi[lr]W1OpnB)F`bq8/uqOL
%/562@`tTecb=#6Y-nspsdV+jR&-`]A.g9#3;IhI2_2*a;D+hH!#]^oO=Q$uW47PkJ>YCO@Qt\.9=--)qZsPQ)?s/p&V@W'lfsn5f
%j:WU<7]9'NaMO=+[8KAUW2od5/`J5u6Z8`m`955&EjTr);V%@!LeL@:=U,opVucW(jbdb<Y6=G?8Z]3Q=<F;!%[SeNKF/KN0Q&R\
%_N[0n"<B@k<7+BDAtd8d_Y.W2H-d:3R\A+*ahYAWPu<-DCGAP\`,^Q@;PL5s"r<2+$f##dmTj;!1qH]kWR_+'7(&=pSNq?tm*\/n
%)/Wa)^3;/1#n,Nj,"I0`n:Q]1S#JCm[bM`T0ViD5+V5lk&KuThF&\D7Vf!WEO::HR'hjOICt_ccWNt?1,Rae&-\hhQ#>#*!k/[[B
%j:prXbpdcp='B%#VONE-JC&H6eV=Ja\CXo3rEsUc[Z)*dHMg56)QF]g9%OI[(e]?![t>Z!:K:-ilDTF.=Ii0:fn7E3e,lhnFf:o1
%[^6%5KlY[AJm0oZWJ-A*N-M"[ER$!O;.BjFUFkA`OLYdC;[[.%#3H.]SVY9kY*9@4,tnY!qRVRpXW6I/R:(W[9D)P2nEbt4"@eXe
%OE'2!3En&>+fD4<6R)oL7`$SSQDbb#JHjhgKXEe-fV%6F"h;;#]QSri!Aq\j8o<QG!7>Jr=WgeZ[5Vn1Db4.uL:2+<`Val?;&fti
%`OL5/J45A/!0!UF:Ebf8C5[^q,[3hi(iBnmX!K?X9#.a#A_bfA88X`n0q*a"?\o(dZC<]k\NAS:G"ob>Ufk,LVCKDm&^a;mB0"Ft
%3/F4XKk9(?<!WB>8;3^#N'$QI&dg7Qg4>6I*S9BN>p?f9K81eHGuk3fJ])NT&ON3I6\KtDnV!!c'$!h)-<#S9Pe1MMBGiYFR$\RA
%7#o2V4<^OQ"XL\\T>[t1R%RJ^]U:5YZV$?g3e8@:8dMRXfIol%q!g2&E00*:'*_8k(*cc>0Li$l.42h<dO_6+5dN$N;W*ZSbWf$3
%`DriZPmi$b;iN3!1("pEMu@b#):Ok$[Ld3CJ2+H^5g-Z]-G%0,l4<.p3gkCQn2BZa029I55Zh`RC`,iKVPR<N>d\OIMtW!9p';+^
%7SbN3l.?oXqWHQac"\3;aHl?@d4aT%gUP6Z9*q+cH,p95R!P]dd8_R4C^\RV8M\U1QDmJT4N8KK'.b,-RA*LrS4scX]-KlBJS4GQ
%6*fe4bmWOU@+8T:7SkWVi6RIXiHC(n(i\8nOg-;PjFj#4'U?`JC^5i47"r#m'#2hcBAgZ7Uk"0Ok/)@0le`g3NJAuK1XSgOcuAB\
%0l&?H?eF'RispfSAX.S$`2,P3>@8m79\FUA9`Ym:FA$fL=>L'Br=I7m39hpcB.\PqdQlE_hFBIYiWn79QsN0-pd2_\7pU+Le1baA
%M\PnGO?__q:K+Cqng(&kStE,^_$2DQ9#J!+Nne*'OhoTp(ep;rb-_GE-H+G*lNC8p[1OQClKX<r5YEXH15&dq-4\W=hJZN-B_UbT
%L>quZ1'@__k93sEFiC+HC.eeVYoM^q@L,UY3rk.uN,aF!.kG)(!ieon&C3(O%4el>$UfY;<<Q+10$$pO(kWX]6!,FeZ,+[Pe[XD6
%#3Qbt/f30ET-asaQY'@8V(2R\)!<h/><E4,auD:?B=L(UqoC,H!MTSrdnOI2W6KF;<n!=t'j.mNOh-0X5[\=612%ir"BlnEXcFub
%lU7Kngtop[]J@kkeH@%jKc@!%rH]9hj<@<n$YrS<ooWR4O<$^\1;]#$rVg5ahlLLHmHtMGh[eQ'=4(oJR;!e>>9jhPQhq>-.*5cC
%80Ap1)/N=$+#:<B1kr(;3EGn!8()l3Ai2]0/gh\r,Z)LukZm7Do=cn>Oq#WHMCpLsk/bJ.lPt<r[,AiELae%c0r_)%8%-?2MekpF
%TpSB)\OEMo\erY2].],'Wb=BAl3j@3fg[bW&i/Wp+Ie7=GD(^M]#lptA@ZLCb*+-Z3#U'3>F(P2[_sl!"[IO(=Jn$80"9bqgqf&,
%d;dIcN&pq#])e3<duFX,74%/CE-[GYYe"a!N)#VoJIBd#_WWuIb]<QSk]l6]3u/q%4JnF3"&r:lD$86t_B@&IL9=4Bj@'?*%7o>2
%AEqic?R9+SfIG</V!b2lU-g#ZN55OF3bg/m8qe!N`p1A7TUJ2@'e&,i;`"a.piK>/PJQ&b,*bn'8l/]AGsBtO]/9kf]/F4=fXYZ+
%J]cN08Jl.7M+EW$Y!$0+Eq:EVUWJnrU1:EF<Wtct"_G2BK+2PXbJq='->!5_XsN*8:oOh6UcF)g5sbClVHcQKV(%Glb?/P=k,QlX
%0f!Vu\D\2i5dbP=6."-,+SM"fZ6;`s/10PiG-G+W3YK)V;+c)K-mo&qY(PKlQ2iL<JYIkO@kemP-O):4dW18-_%V$7X=bWb(sfJ*
%!.`t+1P&6OO;f-b9Gu+7[R)-$dL7K3$278\]&9l2W466"9];l_CcF+9Y!NQ#CLM8$6!Q`$C#!^iQB)r6+H[cR*)L'D@>9YL@_eDR
%8</\G.kZ#s>h9:8Km*WT+cmMqLfFTh2CcFs]H7@41.5jfnu>#O8Ak)Y(_'7T:b*)M8@De=0T)&C.ZrAh:^P2O(EQY#MUA*g4:LSG
%VQ1M0S#ZujSCe>%HGM:F.5oj6F3QT>Bbm.AKqW1">@CA2(N>q:k+W_G]HJJCjQ.WeMjk(J!=W1,_sM"D$<'Guc*k^$UcO6*e\s*u
%7RKSZ*8MK:Vp)]-8l6KVO.i=@0sZeJ(%(^WnQ$bE7K`h8PjTa5Hj:5u_]9#n!QQn$W<N]f.\O[Q3\J(@8<rC:a!h"[0]aNbU5J<)
%C'Q4\`fQB9l_H!D'!F^?o-Qe!<.[.ul^>qX"%q(m<$L`l!l6C>)B3.__@DLil0Mfu'm*PmRg/&XX!3gr="aXWL`C/&;k1[d`h0aJ
%aHj)\pn,P>QQsSlBf7#0/BHEfA4u<ua2esS6s"8B\?>679G/skQAVkS"skVl'r6j-`7<>i7b`,G::<TIg!Yf_Q%6QcN1^]975\&S
%E`>c'%4"b#Z]BiD:/8T,8@=]p'rMsp#E[U'E2B;fm&(&InV'm`c-Sf7PQGYuahu#.g?ia"^cZb(?C?I>HP_at"^.VE;B*e'X=TJ<
%DhPF,N8n-&>cP%W7LK$+Q9#K-7tqmtlWOCrXg/0dY,jP:(cn'Y7^*>U.AElOR]EsACBjU5\FH:;j-HD%L+@lF(cPN1YNVpY"Vmr'
%OhEWLZK)i`qaRg!jsXZs*E62K&YbY!=@j(VNf_eV>,kpf#tis,8d`E&3`OEdS!'F$GRq6S9b&fD3&W,47l"p1/]6!g1!:'FN@R?"
%Zn!$JXtJsJZCV?f'<4pRTGgoeX^-5Xb`\Ar\@"]6]OMFAaq<$[#S"]&4P6hEaLFPuH>b4)Jr/KekR?aZU5;f;67'!)JWX&PlcgT:
%.L8HF'(&JQ@=Ge&LV%447!0F>0!'"gqc*O&FrG>;J8*[ka&Y82&Mj2Z\D%FPTW)g75[6]Y)`JE]-Q$shK%b.\o=#'o/O0u'5W2s"
%TJQmT#'@V2At-V)`P[XS)Q!S7V(P(Ml(eg@[0C0!YURFqY0AfF_Y$7f8R8TUR=4?]2o,N]L(:)e.f9q'Wb`'U=qG`W@mUd1KH6t!
%)NaM3L5>M7#EWJRZLb5ojpaYb+X%G"2/U2FRHk;aS8a?4@O=Wc/;#H"%4SlM`pdjq[4FhiR#D^0)'Op>2pmZ1"73B,]^SJ"g,d.K
%*/V7a%f<GBM2e2R>AmAAS-2[/!_(Qa*>97I3"=Y'-Q#]T"re<'U[@c;>n"p2U'@de6"F$7WJ8Ldb-V,W\[a#WoA\$^DdgME/PjcN
%6d7+GK#b`-aquaDbRX2_!jW2T_[-/\M`J@*;j!j]'t)pU!ft1&UtG4C75Yno.Q1sR?S9nmE;fSDZKUsu-/[XD-[1b._CcAh#nP:B
%r\RqEj"TSi)NMNbdBG(eV`AEWQ^'(ua^>]9ofBJ?-lPSd?8et!,J;<!D1eK38Q7eTP=!Y8a4)I\UYM6TJ5N$h%2X+!-LO=D`,K;Y
%U.\3TK8FMYL9Q-5#PfWS7<oS]eWs6$k&=$1<b*;s_(=&!R`4qh;iGPFL3d.fdL'u%#"B\q%[T[+KsM_U""I;:(m>+lD%Z(?Bm<,p
%&)RkrN0u-sA%A&JZ1;>)hlML=()p0"%OSaN/dQN*kq_;I#.;GGH*5$gYYJ;X?/&=J*<s.j5b\rdL\-dIOgc!gL@mlsD4C"q1(i[+
%?l`YOYQ6M*aaC<LbST%Y'_+:AW7S:Z8[AgqcQUoIF?%UTPUu<_NX/k!G]]&u)So/;\#O+4[ODYF(7@jZ/>=ObClTrc>suXUoFm?@
%F:5Djqe4JZ5#ltaCs%?/h8mroGhEY6TiT@kb!B"[DC@s/<NH^m_2C7+(`bK1KRkQGQhA/t/7ts,g.2FC(bRpXe5$1rH)liY&r9@$
%s7)gk87m;\eB3HOO[]Ck[F)!DRd!om7:@Co\l5K[0#W_Z>knMl[\IO>%G_PPHVHD;X!C5;FLg+?68IsN=m.sb\u<LTfmh3(<\Op2
%Bg(5a0Q"K_Qm,@_d1X>(((@+%"PS`)gFCheO>3JE"bB]s_'kJ'[K*).U@S.o9suX%8%4D:X6?[E'\XC7;/$,s9&E@qD'TCPK8q`V
%AsdQR;\Y*j?<d@b6X+=n<:)RpA\jG(>8JZ>Jum[F[S&8,-7(?6R2Go_R9Ic1^kt^6,+Jd=WVTLA,boQ5BN-TT=93:hpX??qV%aNI
%-$*kl]UR,='W.shT_1$^o;694U0,85e-d,RC.5tg=M:hg>@"D,,?k0d<6.plS)\&.P$,[,;l_kR#r2^]drK;af]ccK.ML2URFi6D
%R]C&)8;3-2&u"<5QYLZJ0I<1QH6&7`B+^QqW2i@0NA?Fh&gFM=6DIpPfKmHZ?S8f&!]+gOBjc#P%")=aVHoq4_)?EE#a<54Xb7/r
%0e`tg=4G;VM26`%BT,#HLV"dAf5P;/g/4.eAkSo*DHZO",UI0J$:;pr.h)hZ7)Voc8GE[Qg75\O1riWtWur(HQiZWP$t=8m!>@Z3
%.qtjf?.nKC6D71OfK[sp6D/bt]+qQTJd=,H04$'%L<27Se[JCU"jQ!O-u.+XRUrG(a)NlB9Y(+0'&=,(M6&G[3$EriM)ZZ+^h<ob
%$-4H*%GG!.qDl&g6&?AeV)Nml5(/+nWI-fR]2E2lP?:+BCA$%Db-_jZKPXO12_IdPJUsZ,,@ZWG6_0a)$cCA)pnD:,pB^m5oeCDI
%ZX/29hX7'QC%;-'[A+H[j)dde%VSi'1r1`L>a^3cm,qPs8XW?32Y;baE3f)Z!6LI=)Q,?9TlD.l/0[*H?,j9S@-)$Qk*Wsr0P1H%
%f%bFk:&lN)lmUEH,Yf/+N=W=.5SgUn=%Be'M\rYLZ/cK4VTffJ"t`6@XIrTrIMBZX.1%49=I[A?IV(ZBd!n1;+/Rp2PtiI9JBT_A
%cIVg[6uUqOg8'de$A2e;d1"-OUJ$5:W]I2_=$5\X9*smI$MZXmcOaK7;0C*Fq1:=iYp^ps1ePV=F2(K+$63MuUT6*fbY)$0;)'Uh
%[k;^i@U]u'0;]`g(tj"V\B2Qu<"[7%#kIV5\0Q#C=!"TiW@l;lePEMF&dTdU%Rqp;Ad4I,3gLF5Ah!uPBD,AC1>Ks4RgKF(<1O`=
%4W5ANSf=1Od8Yk02VE^^b;J@pNQS6?U_J[&Qr6NYA[b\=La>g&C;k;a+rWbRJijhSO2J\375^LVj[D$[%OoQKY+p&,0MU836,cfT
%;nsqj($F6J1e_j?$l@*(R:LQkN?';;:j&El:,X\&Si1R+dhi(Zic=pP"SkQ<2Sk+b&)fjF";mfJ`-sdMPVNQi0rdfN\YI/$1c%8^
%,kp>8%F%RY*:*Q![JP\ajWa_[,;'/A)dqfXOGlZ-(3b?D3(.$oL1H'3?;2?RN@ipZ7qO\.$p^C`G-g-1]u%r=F<5PN;`@C:ehfl;
%$]\+*oZ8*/--$MfcVYWE;*j/p$T'9U0p>%gETW2)&lY].EA"mZi(:I3Qt`Dkb&L4Gl(g"qI+5&+Y!WG-S6NfnEPG9)$8+F:K3MeO
%ig*DHZ*&'akGIKUqP6O+7JJR0AZfkT_?8g^!!VeF]B;lRP[j"7;f2i>DC0?-BPt=)YGpLi9iu%!-=ZjKS<\.P?UW\j1PF@aKk9%"
%$;ehi2UU9Z"qS^Ro,tK1/\U((N!8:X$3:!f#;/^uTQ+SB'9?1%DhoE/YmH/QA2KMY/krdqACHrA[Q'WpVn&Zcg(u'qm^EPm@ZZb?
%H=f/u[j=Yd.hh,#Z=VrS'+qV_-B*f!,\Vp"",1fKI<k)\[gZ2/OUs@/2I(1[7DpQ+lF"NHI76Vi;&TD]Ohog*H]Y<5m'_)m$)[]9
%DOIJOG`7KI9Fhu<@`t4WMW!]g9imk6_AJaPCcHGM<L]Ql11TU&-\__^@)-TkgCS(`"RmgWH2FR%@)V?,,(a^r4?/`2&Z7A-9N$XK
%!]&WE@Rtogora6(#:%eZ^pKdfE"_+[;njqA6u:/3i,p!:`<TO&6?XC2aGNe7f,)[L(>bI1Tf5oJ2KHj'h%-=MJl\f`cPU9%jURA(
%G.m"e0T@2bb7H[@;&Z=,&m)hcL?N)NBE_h0<hTBMaP`/R^E!m&rH?q-JNBa5l(K\"W?-?:jQ^]IC$M3hiIf*@gbmW-V2u)u-E]D`
%6qj.J8hp-1U]dW`KMF=%#m;F]<*&9$C2YLe`mWjI'(!:-Nb"6K.]bUPPooFHX,T@9n8+i*>_+BN4;f\@W=tW%M7soY,6AIu<664:
%1ALX\a]X8fJ;bF0,-/P%F\>C2UbH8p9qA+nUB]q`"tSmO`S^k6!Or,+*F[=6BgcN.7]?l(IN^"H(q(JFMH<"P)<0E'Y=5mVbCYR:
%*M$WU\>?+.j]JfU>[oQ*Fj,<'l)<sI3#V^;<RL#^,9"s6"0PmieB8V;\u6cikRhfE-QjjtM("mNG;'_c1N`4R5N:*pI9-/>&iu`l
%Flc+@Sc0kVkQZj-_8t;:\[rG8-#AJih"hL/MnOW<O?rLM(tof4r\5>2>N?i+N%?T7EM<]&0nC?TimG3&3#TlV'?Z?\lD'_n'BKF>
%c$3h;gUDAj):Q4-o&QNUEEc<,GVTpo3Mnh[*5I2ub`S[=W0m>l!HmI*UP:48-]&g1`^ECDn2j+Y.o.j^&ZLoQ/g%qtjDZk\:l"r*
%_;Sq8f&H@[B[]A[JYFj3G\.fQ[rOH2?fbr<lH\36=bKjIlu4_Wl&"^h,DVKQbJ.*EFL'CD[.#bs(HI>2Bl<M"6q@D?&6rDUe&hHX
%@12Tr<[fg=nU=&.SYjf:4)!`c_8`VFW+4i#ol_\)OFp-oKOfi-IXB,!*CkjXqMlpbibfP^O!d"E?bsQO'=$#K1Vt,q@U.W:4IK]*
%Y1QrDcWV5i*'[M[R7n3]K1hPBKa3hW)$>;O`D.gC0K9JHi(30Y4Z)UlTBqGrA&XHP]4aZjAT<h%J,OV4h\!HYB9a]C\seusTX&AY
%A1Gk/ALOL?9)PM8T:4aKhK$pU5PFEC%+>Is5=_J,>ocUb@f"Ao6I^E3;)7"AUTS-Y5qqq2oU*4?1VaUBRJc[h_:2V\\bK!M7L(9"
%7?l+1-&Z05V/*JEopGg8YsT9\)C0ARnU>ht9ip+j9mL]g]q^l;i6,-$!DZGo;P^;""ImHE_'fV6O_'\fS8.(Zhens!M3BAZ@<*=9
%`8*]f`'JU7qCE2T)c@Qp!Ppe]*/:H<kjM-hR6"T,=^;7&LnAQn1(o-c=2ca3;&Z$6;(3/U12`)PHe"m%'TS7fH:'/8$XJ4$P;J;s
%^@Ih9Q#dt>.d)7^X,3V;KRp$'A8rY\Q,_'&Fda3`&PZoN&t)D=c4V)To($G:U7*`fWcKO"ZM5cW$I_'rL#nRdihHQg/33iG/L;uA
%I)XhP#P2N4)5nTo-Rm%d9(XQ>4GlGdKr^*j#]hXgU9LNZG;U+VbY5%76V+&49:=N!-7V]&Ysf`hd94I>Z/:RWCF*JV>]!4*okc!:
%4JT"M).2I09=!Xa**b9p_cKAO]7,RGV#Z0A"8</kE&1IVCQse<LnOmC\UdRcOo\5N8Rn$-LU&kgp2]eB1i"g'/4.6QSl@sHKZ5`8
%QLqqPH,R-P`=jQXR1a=C>iWj=M.=O=FYQ9YomCq!Wpn-LCG`T%e2Gem*":'UEqJDr_oKug#"Dcq7kHhF(/ch$"o"\tphE&NE=Yio
%NA=*/\'PlY'$g+X`=r/76Yfn\KJAO=b!80,Kr'ssac'Z#8;.nBG%7)Z+HASZ)%pe+-Pm.OA%Oe<73(+&VRcQ;%;#_s`"eMrN`\^?
%aWcndkab=c_`O2b-4%Uqd0u'F3*t5h+>?,L<&"R]="E'CKX4qm(9:Xi#]>%4X:#gT@rm'6KWDD".,MFJ#9te&`^H8*kSZX=`=jER
%@6RTjGY!P!lDe5r84<eMpBF254''ds31;*R,WEA0FW5EGhL,ErL5\RZQc1Q@(h<QC/!^qJ4G&;jn_L5o#n8Q:%>H[3Wp`JHLtI!c
%*Yq>Er/*26C#F9p@H+rQ?ra93NX*_[^jtBX0pU3)*ABupb!a7c6$SBQ0GLVm&Q2d,:&>cmLcaVdg+HJ'9Xs8'$P^N0?S+tcGH1<F
%(i$ZXrH%N*<c0ECr1q`f!Ko%#cj0r=6;ae%^i7JdWh$1-'d-;4NbR5d,m_Jkdin:p`B=\ErH955f-5>C^N`-TH!c)nmEuP#n]j?D
%a:7<egjD$MH7pX:Fld4"&NB(sGr6esCoY/N@H+5h!>>n6f_T[o<@@_[=XWfk4!t&li:1GYVh\AH'k1^6f+t]D9$fndAp0DtiC#/6
%qM6kY'9`mrBLa>"/#fX,Z4)[j.^DXEB#e>?+qI<CG3f<pfK,mf(8E=,F]7(a,WA,2F.M5j^'Gd$FnFcM,!!oD34La-%V+Z?Y,sp&
%-Vb;TKuJcQK&9[O<6-,5Fa,W5N.t*<D<_Ys"m#^@hRW;]Q5nNP>laml^C24m(ch%$qak\JJ:KEA#7L%UJ7oI,"'%^XZt9$i424m[
%];k2`Wp)RBHIu_*TVto@fsu1e,r.5.CRHts*Gaoei54RW!+.W[LfYE[O=8r]oPlBooP$.e)PGO#=aVDB4pUdJ`Neu-9JE?CG*[.4
%XWLXa*C?pZMk"r]/s(YU<)dg::48F"O$%83YVq$r8ER9)q]%%e)`pXF0t!WKP`]_4h9T`_pJq-\oB\[=Uo`r@cGsSlkGM:rDb%bB
%N#EIt\?+?h<\\'A2d-B'g0>)0L^lCf_d.C6cjf<b-fR$i'QZO*2T@DUFT@oI^@&=CbejWBhM(-.%LGlPOI<-O0nZu`i8h$U\/INp
%kf6CUrG2FjK517KM1,7DKGjLHKsphq_]ZNH)[:i-(l"o&I:Qh;f/XbZqF7c-:d`YZP^REbfdNpVZXLq9kgVRb?_5K*G56lV:>ALt
%e+!k\B<fS>J1qkmL9mlWF?Yuah?CYJ+i`DLZ<!$Y;TX=7eW6o_Jc:/B<P>qSf/5KR@5Flu[4k9GPSW7IN80K!r?7J\mq+67\:2&U
%k=P%mS4]g3)&=NtI2Csu@Ti*a/-=6t4>J1t#<N,Z?cQ.:%&d_1c`g=Ci#Z$BljX?jH<_-075U@_0SeI/Z!:6,aM8:fnk_;Fe?EcZ
%.cR;f*BeMnYPft(FjoaLI+%tKoBtMneGW0MB:SuGp\6gFs0HQ;-;bF%`eXsFD5tWu"T)D,a63EEMr\oQma%B:g[fVaP3RhkZFOZZ
%_g@-J0dc_%r()cpG(B@%p&)>)T&Y_<gAs0_g:'6]l=UhU1'IN'#b@>#0D,0WS)NGi&*H)uB6SEm7AAhtm;/)/HGhDAh0D#%+((NH
%'0?B;g7V;C3aEm9A?`RhdFGS+53gd-qe*R"!VkcOE%gs2:#RKf2COcOQVCSkXJ92U^?3M><cI;cFuTl@0&;3'Z/Alh*c^6")?8+[
%5*dTb02"Btag4GY'FoEFKmSkYe\4]-;TR8K1$f$.UDGq[a%tmi\5c#m%V*A%*qgL%bq6=MQABn@f>%*UiTBIi$VU8:+._f.b:3C7
%H8bPQ9f'Ce?oY%*XsGh1?uIj<(UtK-2&q].ZadLL)K_6(YcTlh?A"%QZ,eUR7+B4>OIMP\Z&Qt?8/@\"[LfZ@Z"TIs*-TU\6@u*D
%3"p4^VC<dsB]S,p?aTt"Ve:e)a4!>&q'c&-<pr9AH&jWWi\QaTG;_Fj&N?n-L3/9*+hK.,U#)Ze+ZD?C1@;HULPQdol;&N$W/7/7
%Qngp9'#L6_J4`oOn&aTZ?rr,;Oe04a9rd$84o1s=:LluI5C:%Ij^7oO9i#?47jh[CWl&%\YW9EW6=Dj3ja_nV[;I%Oie^[[Z<^HQ
%iUPqq6lrAF#5_hp0CbIEdlU2Z%+[o\\i7%C*X4</ZuOS!q.g7f(oY]ChAigK*ImoF:j=eWcee:n[QAU%h=!D/NsRV\<i]*<`b=H#
%b(*`s9du1E5H(LE8uIN1;%u[jCt);^ebUD.En%W"'WSN7I>"^VNk)!kUQ(-%!s)Ua=N]rc2Z]TU,r%j3dWU@*&seid?lbRT[^0W+
%*_(R\L,XBM!R(A(S5OdDj#)S#0C675h5Tn*Qn1<`)?:cJmilXE-!LhefYSaX:6psl/.gBP#uRF5f8+Por;0)X<U@^tW8B<bb.Wf#
%-lGC2UdX._Vhi>lCFM?)fH])b`e5U6Uh1kPML::Badr\d.;gDSR"Rk^gC+W\O<r%GinE<m%I;h6E%)db$$2G16Rq";B>bj\6^\cs
%\q-Rs=jY&!p<4Y+`&-;C.NLRc]mcFs8WnJPdY;n(7.1SHYj<Xck!e?q(O>7=K=p$Gc\@=@oUZ*JFYZ.-YK<=Z])EtG&Rm^bU5>s!
%_u!.iH$.fEeR[,d0<GIlPQA^H",[*'9S0-MBD,X*ULH&j)l"7-#;:H-HIJ.134TNjMqfii&[kr^khqr!.S^o[g/GsY0j):_'25Vd
%SWT<&9*&ce6So,ap_@.*'E%/1%9VCd6,khWI!D"]lSK,p1@@W0jHrmjg\]sO+cmCNJo&5+-+HA9GU.\kfOVE]=B!2nd5\t]$QRD:
%QFF4:X_jGPJ6e"bG+r^!Ae[E-3)_o76_L3Ip6k:hEg-uR#:^+fZ+@B%@3J8u5^VhobnfgD?s6,eC[B6dVk%P%<u#G(>\Y/@?d9nd
%p'bsUa@t#4,cA*1pO$;ME@.ZC,\0[+FXNUVSW0jZm-nf1rU!WCohgbt&Vr;P(s:P6VQ-pRB%%NKj.t5L=Y?g7b#W\Xl+jiPh,;m0
%H)#V[<;S"i8eAX?khjrKa(4WfP\*$SBLRPVF_4#YiCnYu7m=A_("JEjDIud*aq(MhbpF05HE0o?1,#*,BUC9GX8;PQU\nkIlJ&4c
%D.?%rIom>>VLDPJ."(lP-U&RoMT(OpZ;3hZmT<@[GA<$;$cApE$-aXqD@+=E;=.%36qmP3%NufEK`gOFFtk6HOlXmOH\q^97OQI`
%IZOFbU*j(^iVi6deda>!8-5No'?I"H5*A=3if1rd60_scFf?tDD*,6CLST/C/7r<s'fJe,%lOpJVX3L18XH]D0>F2m5<g"Qri?@B
%7m5]lfbl!CWI+og9rPpJb72Y4Z<H%XDeCFVd3"[M';/3]ks\lg.LF\>;-7H:15Y#Zd+rXX`jHbFEnFuk$so#RD!D!d&M7n+>$[OE
%9XO^n[S05I@6q!@X01jqWUm3\SFi[)b>jX[[`Xc!;ksCf=sLOt=plQa17kW0G?(eA,Lra@@/?-kR!)%'0$KRHqOcQ&b/\F;@C,\r
%rpNn"PfLu<)oasBUild,#lBq&5'S(oSZgVhT:,f'VUf'`^[9a,#ZHf7hLqYGB)mH]i"cIp=H?8)lC11/B#V>q/^$BEBeWl;"rJMA
%k9Q41Y:AW7qrO8KRlha6fii`G'h=dPc06@eUK[phUiJf@S-+\b$%*>_ipCcYQ0HA#(P`-c:!P4-'C"Q!B':jn2L;R,;bYbIdhc@_
%:=BiIrC7[mm0AHpYQM-]-7`8%\k'GTa,EJ1^!;4#6(usSa9%1>0nO@U\njjV2.oD:e<>Z-13h_+X=Fpo+^<MBB$F5q4]k;aZ@pcG
%j(Rm<RYrCEEQEI8&OmOT,=L9?EW7X;Ysh-,]u499)!9_C%)Y)OhhQJh;H53X^3irr?Kc*-U,/LFf%9GdBt<+WOfqroh@7k`A::JN
%`k!e!0qg)X]T"@XHqe,bU&d`YBmH+_8<^/s6'Y6%NGNPC1!&[h%hN;iJIu+k#PA[%G\A$b\6VaKnMKP86HIm1pI<FTZ^-:/,2&>I
%lu3T\dq)u"2<$[JC?X3;>_]n%C\[YuF:uH9*3jPN&I6OLBZ-7JqC!(n^3E@k;3X!3QUbV!+>s^&A4npQQNc=3:=ea/f3Q%&b[h?`
%q5'SEfKnEnE5"CZ^L;W=^eHn$2/q:kTn-EkaaX6CIGu>frD$c,DqQX'J(&;_,.M'rX9NRr1$ZRIHfhp^IX8IT'0lE^5Q(//T0@dX
%rtr8B5QK;0p<!LYM,Sk4F=c1!CU\HDY'=_>(%W-_gc&.V(lI04H<mUA(ieeMM_1D+=fjm)0Z]>t'T2l5RGAu[93"irCQ0]GpAlN`
%ZX2:\G!B55X^:n]8d:)e:D7kc>?hGW+DZR9[@Prt)5NK-)5H+^Y10[7A#QiKU:=4qnq):B/-Rg:l"%hrZ,`VWE;Ci<gX,"t.IL%7
%,YAHNmfeoqTj`9fku_(]e(?<hgj=q\1LAL0[`BM)+9:0FCOtatBF>ap2Kh_8^=F3/raab8Weu4A?Z('K*6>e[^5F.X>9AV19JK#'
%F]PX/`TgZ:NHM9#34E-MCA%#>IOTl@RD$n'QPdsQZ=R=eH5qi;<uJr9i.Q7/2`8]rJ1'oE;jkGB.NV91S;XSiWY"@UK2dFL/]5#O
%--tY\Y^9m`fmYIf-+ck+:!c53A9'9T^Sc*^@`=$>X339>".usULR`u*Llj+)@*lgIAO`C0M(t7"Pu5=!DNEg':>Mg"NTiZu\bQY<
%6jq[]A#l?OI)Q8N=Q<H=$rR'l_Y&0g&a@tDrV8g+h3$;Ff,VrrMEua%5rI$)/]rY-Dc.+okVjmq)Rr4)Cr>C=-,K13W<jKQ8Q!jM
%%B;`q_%"P=#&[<TZ3kJG(to0QW!jTS8SQPe%;OpG]B!g4A(r;/@%SeB^\%!dp]'RZnfR<!q4E-5iST%XgP=\boY^I_?[_^Y(4?]X
%XC&0G>XmLUVoJ77qQ4(lk?%L*?9")p$O3k@j,j>#3=,q<Cnk]W./kr[/UV;CA_#uQ=9?#Wi$H51%-AfS'X(>aN[tY2)\*L;i'tXi
%&&Ei>jD^@JAf&Iu8<O1E%I>cZ<D%(d+rgr#6"hEoP3K5iLBb"s)5H>Gj(8rRYqs:H/Ps)C=iS2&[E!sJ`;N?Y[qMUt\ZQ53F;&o,
%7(nZt^LTua9/Zs4m.Q)'(sW\WF3\0*3IHo7d"'g26Uc(;66(d.=%aLhl2W9"4WY?a5urkK'2\+?+/)1bk-7Y+0]empPgWV21kr0R
%JQu_@O@=4CNk);Kh(:"m[[#I`7<GXYb4:0ZEstPZBdm`N\ZR?W$uo/Rd\_Z41^E#2qB^:#0q0T7K0%(T$VKUA3;%<#-9^#SL@D-B
%(U:/[-R<B8l;+<CbT3X5@CL2,X/gfAA3X)dFAOMcLE:Z$G&i8f4i1R_2G+7eTHA)jo%pb[^P@l>*9*_2L!,Z_o1^M,8`k6>&n&25
%A4Oi)?Mf#s-fi#6lW*q?e#f`np\N.ZD>^9umC2WO2n70#)n*7-L[-n0:Au3@\SS/_2S.,Q)n*<r\:1dUr%6Z/p@Iqr?I.N5j_<YM
%9u#l\g26l$l128gs29#)i_hMg8Q`197S%gEWGnj-lKn(LOn)tA'_tVq0?P``$7K&ujgO&7hF:tNKrse@VOb`r[:'73Ei]!S"Qn3N
%lK>9ur#*Ida@0q`W`NoKe$!`(EVUW(&\.g5?CT+sJ&n5*^942+rF<<+j!&T!Y0/6m(D.[VX9[YSFf>^HHNZGQATfSTBg*:KQ+Dr$
%F#gk>J^SI?9]3?-Q3KXR.4[j7f2`%Ka\nh.DmkbATiC1$Og,tqQI]WQXf)$hP`X`Em/]HZR*6mU73Af>3h=B%h7oF5h>-*+]CmN7
%_)cJ\7sfbY9J27JQ#+ZUm&,2O71Jm0T@/qB5B1>]g"g!fl?3'ISr[JZbK1`e$Hqg",$^X+R&_,FmN<$^d0ho/+JgEe]e,TU)b23g
%9tUg<[Va*Noeu=rf7'*360D8W@[M+)6upt&aj@"%ab1"85F]9?&O>0i$d\VoiigIH4r6@g4U_lfXD,_U]2F8.V<.L?O\LsP:G27&
%."Ellh5V\B(ZPc=3M[GM$tk^E4CE]SV%&cNG(``hUMETskSC=g8MA6/lf"Ggi;PEsG]*C>>'"r\VT,kC&=Fgo^$`AbbQQTOl!lgD
%bLlg<o(PIjY\1MZgTL-lQik-O%,)kJkFF]S7g=]pV!%k,5r@#?*DbtdIdDg7n^22;``>7;CKeZum@550on?8CgH")V"V-*rIE5.K
%:@"7j>5ROq0tl6\S7W+)q9CDjb5HFbEULQ@g-=,,ZIZ21EUK^7>0FIUFe,+fSTTR^;ZkY;3^%u+[bK,8X7(E9Y1Io9.UT1Ho^iSr
%:CZ*PpZ1DI61_(,lZJg]MQbQZ4FX^;P:_!2#4r,&f7E@$^0V2=l_V4sA2Jaa"1U(a)AsHO4IDb6LdD`ZAJaVqZ]o./e:XD6=7/5B
%eS6jba-!K^XUZ)aWWk;h6>>8=&YafZOT?bg-jrqu6qLOALdtN$(h2:=U^cC)4P_LorhMNSjD%eK\WY2h6_XDUNpq?o-:86Km-cBh
%>QD^@IYP>dXka-ZL89"SVOJUgD\\g=_+c*m!r<n--0mIBiKNOV:F-q4!;pq^/WF1TXO1Q)q^$rDiB$_V@o]-*eHGT2G0?5t-<<s,
%afPD/b:l:gDi]NB>P@%,P',8.Lj`R3FV%8H'WaURa(*V`KSm(EqDV((a=c_cq^i+A4#h2YgaQ,52X%i$qSY*V+KW\Q*t0;o4">-/
%%!hbfDVN;%e!s>o.8M8o^OoBY8r[/1APIAb#,feQ"4:HOJQ$9GCgdpYY#RV-,*/=<Oh3j_TJIET"MZCf'TdmW[\RX*mO,KoV3p"g
%lk8^`7Y-FYU,dp"RD*"g';L.K_b3,pn9Pl>;%^VuP]/:p_0%T`G/';O(()ML<KE@C;D`?.6O[mRc>C0j9i.U'hIN&<G'e(Q6fUp'
%gZ)Y&,K6h!/k>2+V<AFK-l&88\#:%<(u:iePiHl!C>ntmPRGgpUgDQ%)\`\i>d%TnIb-%eq4qq*1GVk2=#=rthk4^p-JkD3AE@+#
%DIhkbTQ&s[]3aUs9T%Mm1sQbMW4\AQN(5I?7kj.AG'!`\%WY:l4<dHl`pa%kiR<9Q$TZPUP0"E+G#&uVK'E&9LntjeXeR#k7*-n^
%LXE8MJ@i<t0o!4ZfZIZoqVK#/;RKoH6"K5X7_d_P7X7&#9G4+FHAK.:Tbq6j,/bbZ$Vfq46Wcbp)UOF3I4%BkmK4$/>m4u+,G?7G
%W\HhP"a.?"j&GZ+7#[8f4oeedNBYF9`.r0$pbJa=]DAdOK(]\"(b*&\J?r2>2rfG5;Vso9/9>Y_/R;4IqOYnBNG\/AEC:r;ZUu<?
%?2JFtm#5'8eu`NE.Y%mcf(t?Ua#!5DLu\`\A8i0#8JGTKI'Qc@m:VEGrd+_ZYd,-WI_T=:$t:5[&jPG*7^,)Mj.U/+i@$".P)Kfb
%090ID)B8mbB4#On-a5<Q.P;Xii"2aUH]V^6eqP.iCNA"./_Wr=9]l!8qoI_K@"")>*#pu?(IVE+YuA:NNiqR!2C_Wte'AtA^DTo_
%f+-piMZn90\LGB7qeG'#\Qb)N7fYF(]nnnqZ>Ssf6'jb4*.\gkqrr5`QMt-+7t4>.E)=Xt+p*BQmY0Md^D\jPZC*;['_XK*)AF9N
%mR[Ir07)H\Xa_@TSQ_,RT-b:/gISWa9fBC&)V_>7Z#;9X_^<G=ek,"bY?f5l1RV#A)Z!$oC8qbk"acGY,<1=W1n5D"<@A=j6kRj.
%F;+@dmo;YO>;=]+30RoJ6)eZl8Gl4JkWi_g2cGhCe\2m<GgOoK6QF+ga16Pk*'aC,kn<LUf2T*3o'c$rptmb'f*_rBs)>B'kP:U3
%]TTL:;"L8*H+fsHo^qHL4U0[nb$N*Np$,lGo<ep4:Z%i9e\LiM?cMsPC>V*l[Gog02lM12i3$,[o$LgHrd>/]IfLl;iJ&Rbk7_3N
%#cN:nNWG-Uo`p%4J+Z\.h%/su(ju(1GqYa;odg%AUJ<+&TCb<"eS!!jPVq]G6t@PQ&NH..A&KB-#p%nc8[%-.SX)6&^]<9$$B1kd
%:ZgH(T0Cufgu^<L(+*E@$[6Ri1l&VD"c7#Fbd<"G8M`gQUD<B:=)_@h@io@>$tkM+5_/[tBme=.X-@Eqf!Qfs)l&\TmQB*;f<hT^
%87gF+YEk2:o,a>UW+&Zhfb$B?mcguIC@&5>DU@4g\I4L-b".sig%0s>?6ourFX$gh^A]hGel3.r(G_9B^s$kT,mlMTQC]'Z*?B)R
%GEN.W1[fX?Y)"2JOg<)cg^l2rRaRb8Dg46Z7lg&@;5-sH'[RE2)094TJn.uKY43eS5L'/k[46?1@77J`fE8E4UR&#CC^muVH7VNe
%G*j/kO0MtG8bI's\rJ6jY=>'b=eTX=gd+,CUs(?VKesJ=Z5)QB_o,8L<H4@YA;Dcr9L)R^j*j*eZYs0Yk/huR:SWr!YF.3X&M0l(
%BdealB`d#XiG;`sbKor?%>]=E`G9jikI]APP1T/43E30=aU1/dYa=Gc]6ZEZUNFD&G+[F[45(4qlh@b[o,Dk\(KaqUY;HGAltjr*
%om9p5di3J>YN"mB2uDeHGPGr+`4'XR9,Af:]+I4JB\!D/"g"q`j<0kBCC=A]Or4B.69@N5;*Zf;j=i'$4Hu;Q_8i[W6a:Bkh*L(W
%"2$,p\dcE2J^Ek`j^T'K1+nRa5oN*;1KDuUe,uKm6,1;pm[ckq]4J1/]:D(j?_WK`lF2CWZpN[pK3:(f8"F0)Ln9I8,tAa:Rp)Tp
%:#>I7-n7`8kQp_ZS%)+FbZp25-Wq@"e*#c]%Hp8I>HD=Yh;UIp8GN]S)'!Pl>a?4?s)>p<_!l#7-#WTpcLj%C)^9Br#P_d&0i,'d
%NtJI;;_ImR>5(b%"P7A,drm8to-=dIGcPAf:R,@$T:g#Rm.#^-V[R5'd#oJoVL4ZQS=Qq.L0_sJA0EJn]lq.;;g@u&:0(=7Njs]Q
%&1r<@DAdu;G4DTT(kO)Ubd80k8U_gpm9=-?V2ku3,Wh_GMaQ*6Y0_"j1fp`L@*d(3g/VHC'ciqshR)Uj<r!V/&ZkW<^&a*gs7r9'
%*dgpp<<APabWHY.28@iX4MbrW0Cb"T]W=X=0.%E0RUf*/MWX^,j;!7)pJFCU&o\en.S7jTVHBneCBbXnFQ=C*X^i#MVmDtDHic\6
%:A:^-Wj>lD\('E##^d3hM0<qK`m\g^a^q@lfA$DR>Z[XiEg)\qGW6e"qqHkae(:"lGP+r7-/_FG,='2>_d#DL6+HbBJ#5"eMNdSU
%Ep5:N4QpOp:01Yff]7pDPNaLu-ebS_O)m9C29W=eIA_ojDSC8?%P'*-77XL)Y`2@j:OC)22F?2l7\lZAIH$TTA24lCQjaA<(HL-&
%hG'_2oTtbh(uk5mLS?q/73Kc,9Bu*9QE2;84jE6UL\$I/H`o0T8NO`iRao!0]FauL`XfZ@.%i(@$%V"R]YgTSJjrX`U&Dm^T`87R
%Tr2H/g_rn3LS-Afrd%Ud7NQ%Q+<f>T#:/J/Pcp1C4NWa0lRL/g7ea\s0>/U<UkSTB:V3EEDM#t@k,b*%VCYL/K\Y%==)V*nhoeSt
%WY-,j2D_?cV`(eSL(E]k(=5RDmk(Crht*e)CdX`ReT7e_E8,qiWqPX/nn\T1Klre79&KR'I-Go[g'37:A'="V]M!n=OiO`bB^<7a
%oTZf=I@U[:2g%Adanem"Rt@M(@U5kEr8*knD-Kp[7f_F#Q+^&#-tVXjZ5PpL(lN,Z#pTRGj.Y&HUGEdS]LM=1EFj6R<DOfjk'Joi
%2+epX!-31W*?B'(LE%_)M357iMGNa.rpHr[Ht:-?prj1%_d3^.FoBg'&0s%;l"I:dWliQ*6d^*U?h<Xm[XIg3)>:qclLSho&i@:4
%(P/IQC$X!Q<Cb;o8!V'@@!<T<&>h.^RtmeGmk?I[K!K6A/','8+L.`1b%ji[;^&bMcc,KQ\H^B$ZI,X<^'^Hq_A"Er"=7<00$>N'
%q:k(SeHP#c7AU!/W;GQg>0`_>j@73o2!'7gS$$!JjfRdrLYiChS_6dB%D+WUMEpG9ql9*,c8P?ai%dP[1-V9e=KRU3Q\#QWce==J
%cf`ehF/61`@Sl!?CsDPmMj,:=FB+P1.&^Ut8E2X7QaKf#%Z1LS/FiPO\oZoV/t#QYfqX-<aKu9]>`RKK+a^b#!ag0<o<9%S@k4?:
%'pfdCS]Rbs2`S:8QZmM3Nf'u.DFd?_gYtNacn+$DDP;0:q;M1Tf^hec`Lm`W:C_HVXg8>:eai>h%7WY4p8o\P2eA!!G1`pppqej8
%@$aN_.3Ted=T>d'fd_Z:@?DcKJe\tFDm<GNU7mf%V@j?Gb;06Z>($+#GCisE/#r2KN.T6AWX0O9Ie]]NlO4rqh=/C8iGn<hRrQSr
%p&%AXR_eqU!o.HR"1W>s^0;.h[!`fM-Ai$[J^P&\)J>&tVsu!gd%ra!+;0nKb[:b=j5M'7f92-TfRo[->dC'<lKUHa[*O:YK.eBP
%Cg)?/;l'cc03.fQ9(Z'-FGj`C!pf3n']tu/a%#;6'SW*WmZVS/VV$!VZe&Ls4eW-c5u(ZGea2f7,*%-aGWR=EC`7$B&S#+:lu@@2
%)$Ag\@Q[(umF-&OXd`KL=Vf,9q&Ht!5o>lbZ5rJ%oUs7"%WfMO0Z(elLm\$!PGb<'_#dHg#=Cg%)@oS_O3*P??l?(K,b@nJD@";R
%0N>gN4^,Hj#F_ttRKFi]9uZ]]oBM%W*&$R"CHF]bA@:'q<Q7,"=cZf_\;hEgDE3LoVAVma\SJ14&sH=XV?f0'`mDi6ZqJH"^%Y"=
%fG\Z0+)l_dp(ss<X[BI8;Aigjc::6cMKtDkNErWUU88Oe1T45jhVC&bneQ<T-?#:,_@jG0jl7u*H[jcA(O\]UJf[\>FV$E?73XP>
%kJ1lu?_;to;8)T#jDZ4NEs94'WLIgqJoB]WI`Zm5g'W;Sog?]l:.e,.8)4T%Be!-qY`;61I'Q>K&h_W6CpJD+_sp@CD*>l^rk.L!
%[@53l:@cO4$u^?=2#t,>L8aMS@G\csEL5Lp5B$D3Qh1"eS.)E]"[oU)0El.R/O&F]S#5,5>0Ut-`b4Vk&t/rk&,^Zl7N[OUqL'4=
%PBFb".le_t#`YoC:2.mHnk:B@e&l.9VY,#@i^sg3"NU52IK\i[EQEKiF:E[Vq?i`(V/KKZhL!]"NsB\!YPg8kT#^a\47)Nb+3qXq
%IZ#dT;IXOTaIMf-)$MK:PF3]L,Ks1d7#k@-EOp@64rca\p#*ou_bF2/$T%C'LAk?Mp/$/9/b_I#YocnO-j$lWO2oHX/3]Kt:Tps!
%0D_q2l:Wtap:*NNLU3$?2+m?J,iimM%Og$I(!>J6^tjk/15osEGAbi'RSM5GmAK^sA79N=#+KX6JBnCc/@$_"\BbJ%JA>nn/8d79
%fc[4!lXEl%YR6NaqVc8>IQZHFGB2F2.eb5W0LTX"*@nLAI#V!]N>S&*^^>Xn/@ll9b6uVo-O:Ms#ekE5-#4_E4<((d"od*c]Qs^q
%g=c";GJ#l\=`S_4!:#.D0D"E,Sj:"*50RFMPf%&ecQh<j32\5n1d"+J0K$DK+Nq+(W\neQ-V#e<C#Qb[BlVh8#CZ.60CaT1\Q<.'
%_e9$Q]Q8u6TRX7l5OHE/[l!#hIJV,ub)^fkC6."9.4>e!jgQi?B<*fNbEZ6Om,Rp,4^.7-Z.#T$Ie4m<.*VaC3?+f=T8)N9pTR0S
%o<Hrs+HSh+K`V7D0rI"#7aYnDQ>1P>hK1CNVmu%L")^6p5fU%G3sLhL:-I1S$q%/-m-)'A`#GhmMbik?HiDhbC.1mCFQZO+c%[Wg
%?^'$V[[.V?AJUWo>`S<HrS>/HI@GXmg[rMl<`GHja1=WY"5hp+=5SA[Y..K(I$:VIk9Fq!nZnFd+#RM'*#r't\nn@G.42(IWllrl
%k5uQaY,^1?_gUKdW(W#+qe3iDC0_,k)%_!^JUcP.GM[t=rA2@enn[Y>?C(PuVhY9\^q1?)5'Q<LHHF@:G[DXY5E"tF/]\u+>#J;,
%M@A!?Z*s(L!j?q,e\@QummH%4pM3g.4X3b')PjDGBdYQ5.<4#Qr:.RXP[/9@=eB"lK8&JPG^.,XQ_\GB<hId+>La<@fhe(LYcYMD
%9@b-%YKc[9@oQit")H3CG:P8@@[$hJ\sPXb?^*n8>(2q]ff44_3@uo._DCfRlX"R\26O'jCZNg.O9kW)jk.M"Ya3XdYhP)N+ur_J
%Pm9pVBONKl;&0-i>Vut5=Y1m7Rn.bk9'3n@G*+[g8h*ZP[<u(0#tckL6WpS0^kUCnV"?S9kenGj)p+h:IXGcK04&-[JK;,un@,m:
%bNKkIH_Y]70aV2CfJU$le6h$6g$o/@-sCfE9)hq-QQpQVaSn58D]?*fkeMQB#5CV6mupP=Cti^-X2O),ReFP6KJGUMZ/+Sa('/n\
%K?BcL9kt&;B;!<]U5X_2gXIYu]c&G13LdTU[k@G?LY[A6!_h&(BJE(XjjXCs*b*G]rhC"Ae<+aV9g5+cPC&LRFMLE.Z%d.Z0"7PK
%6ObAfhSm658FPJA]_tYGGb6"(M;7'a`FDm))jJPH2OS=(Z*9.qNNJNKWd<TS,m)^Hb67Kc\YPOO"^%eDrV!WsiWk:<`JeK)AW`O*
%nMjg'[GCj0i\W%?qJc;5pQB\Gh&oG8=@H2sWtDIX%?%H,/N\*ei[mKD[C8!SA0A#EGW-@aLmg]n;;Jbkq=E9a5K.Wj2]mUs5N?(6
%STX]`Zg/rOP:a*^#ut=[PPsaRop?6#L.$28lgYMdhga(hDc1TS-)aFgKF(tW80RP-!?N2'hE-mHCYc_O#fGq&lE/O<@KB$<lEW\/
%ehi!RS_=uI(\-]SEhj:fB4EIH,r%RK>XbI"o<$cDACYG85+Hcg8VlHZrZ0m\NVn\DkGPMn/A<i]o'<QuhB@#RJ1,`nGD*']Q[(F2
%p>k;51S[=4e2@BVi'sKJH'GT8-n@6EqpT`W^:*(b`gq4^]%9KCCk[5Br*#AZQ%m_?Ff'm3jf5c;X15K%Si?StLZ4%mpZ4n-]_'%Y
%Un$Kg)bfV03CbieFr?;TMk2JsO/EBHhCagWE"qI%cdhICfhltb>$k*PSb2I"jn#P?s0lF%rt<6DkpoL.2g1:1j%%/I]e,*9^tCbM
%PW,$3-LMA'[LO+ZNUQMF4:fN@KHKC&<b\XT_nH/#EHc^?h7[nAh6PDA\jDH"If%RdphIRJ3u>Tq'>Is^?NB*\e>9?\OZV8[=NN,E
%R!^IG4XoTZi<YfV)<TjpII?i!b"<6@jh6f2,h*d/N_n>dX10mgeqPfH",?'DIG+V3Isr$;H''!>Q]3$!7Spb88&)a>nq/@/:ne%L
%cVkZ#4fdjlM$I.P?DnKjTrB,hZKhK?]6#ETAh#q3c^Xn[/\JPlOPgp0)m0^uetYJ6!0PL*It8i0+Srd0bPlK2*fd]flsO>A.c=;#
%k=pHdAhLEh&49g)Z&r5`i,bNT]7h2\XaC*=(nH'JrH[/TqIj,/lbeWrTM]fJ-W_B*Lp)0[6r191+DSmfdYdk?#GYE*C>Kmm7)<W?
%K4[5ph]t[$UB,[R;n`t1?ernX^c<H.4sS)0H1iV&J)d;4(qo&CAeA"&aTl/UJd5gVUfr1`X?dcISnCOnbBA8VfOG`OP9oh%m;GsJ
%Sp\>k/"c^U;Rr=q(C'%A?PBlXo3V#/&FYCf'r$1Jjs9$ZLjZed(iS4NYf:@V&=1/r`QKo0Rf;CQj6(HY?WmW2S,,e^gqEK:BB*E0
%QiP#.Wi7^uIF=>E<5Qa5*o]h&jNM`!ilcE.Ku<fl7=M--mp=f'J*s`DQ5tH8*tL$.k">KYP/DhSWkQJ+-gubcs4%A5S&trIZ>?uO
%Bp*].[o!1ZP]YjTS*u%2cJlNqRh*4fC[,<)&PqJG"t!C]n[#[m^/Ep-"b]JeBf7+ffOkbFlk72d:s/;GB4#l9hu!#R^Z[K1YVBIQ
%L!+JL;hrM;0S$F8>o?joda,DI_DecrT0drgNp*UhlHbe\4r`UJ)B/4sh5qO6YtH$uDFAc'rQ>6=/@+>.!^&W:#'#KjaT7^1@Xo==
%D`Z/R-qs\t'NADp0JK*q^P!P+"GYM`Wr9.bil-R5oPbBHZH7j]r[dT&DG7KPbQrnY/ak$G:+S_G1;3ISi\1TX18^8?]3^#J5rNK8
%YVZra%'g!3bmK@!I_6BV4THX;TMu)I<f%>`cGE?n97''2.SAg.a,LgE]%@9POQDlgQr&Y56.!s/"*_hc8s.,tV'?]Q13Q[M(aM#)
%:PFI5LSKK]G`Ni)]XAE9\l$<ZOI&se!@eN21s"D7#DumX/:/G1E?dOKMAPXH_kX$shjMCqYpF,EphhHX2Q3Ne]`]lBCtRNV%#9df
%OhVGFM/@Uf7bc!eOa1B\SVrRFJN#np\!%g6KQo%-YNE)bQG-G_mcE_?ZiqGm0bgCA\<hN$I:HW\W(f"Zb/-uRJ1Q:5_BJ1g`>(sI
%hQW_6A2"#(:k_<C0'bW-N3(0`S4dM7!sPhgj]D[6=E$nuc?1h?Wn@@k0I\;=*%P`K^+$@L^]!]^aCOXD6c3-6ka@-4'p=U&gNs22
%&nuCA`X8Js!Y<]BE0>Y4N;_DB"rPRnf<Vkh/ABZ7mFo+iWC]`6gMUs%fF0uWJtBJ`fqF+d[$SL6mMg9U7*A@56QR^^PE+Pni@D'c
%NO1;d<E>HW.!^=)jD6qWO0<"]!O5[ON*i.aH94N))+Ss_1f@!^e"APXZ*mV^J?0(T#;Fl1V;A]$"&llT.Qi#[&;gQXB4NTTNTiH^
%`gh;kXp>9Xmc3j%`&j*eXJs>/2/S/[&q*j3E^55:?2[S./:;BO>`r\X3o:>'Dhb%34tUV%M&[NhOL&B>",X43(KH24<YSNS7R:@R
%[.Jd,V`l)(4F-+Rd2PO+fS?Pl>AMAtNX`pk;:hrW>Oo66MN%=EJOT22UFrF)ZIlQ"hHU$GhemCXMN\$8#7jhnmpgu"Y.kI1KlV\s
%cEK7I=rcoPf1M0"!6N]@]dQ]-n10D>iIGgIcE9V;N!!V^nga:51(G"9YYClmT4fS66(K'VG%to"n]=WrH[V["K0N]7C579m4N1SV
%R0g#U\DK&?F\]6%o*1"X+&qX>H`T_t9le`G#cd0`nHZ-uaHj!`&;#)L)KJnR)q(qo`t^1\CqCKmck0e6%V)^0DPphBMDFQ^!4@s8
%H$#c\[L;SQaGM@dZa3QXJ_K^8EmNh1p)M1\(^-S(0ir==3j]!FT#m&>]X;eo6EZrQ)g2a(qYekqo3OZ3OW&UK+e%dX5&229Qd+0q
%fIaf'QOdRm3mfael9YQ8[J)=$0mF#Ep2_9S/3UU9/6022@K(gIjA*),hDIUHr\Ca3MeU9Ib_e1e7\&HuIR&jc.oumq$l%[6`61h/
%G<M=227j]I?[4=4\?E:[ib*+XdH0T':D$7%JM4IO>r8F2l!Cn$9?.-1d.XB-Ic4k1n'BbfZKl7Z0TU^Nq.;RE7qCoL(VOCX%Br`;
%SWV)M^@R@2;a\fW)a,5$bPo4m7_Y#^SdhMB+2GGmTa3@0Q*M@O`#YZq5aR;Fas66*SIT+^Aeno%kaoK)*Fae4b%&[#etR'+FrpI_
%8MQk`&nF6n+#W'T'0jW<)$d,+h5B67MfpOMKeCrA%t9UTm!;N"S?5kXfc"U6_7Mj)N1[tKE1()5@>PI+lOjd(2u2bT;F>:,iJF:;
%Zgd3g"`#2^`7XGGj&8iTrN8:G;XpBVl@)L$1PHt,7Y7dH.*"d>)F'315Ecg*&6Z&pilPY2,sgU>NdBA8Yi/5p&e<uD0cM4p#;ftr
%jYbh_]kKg):\1V!rU7!"in@Vg.-,SL_RP_.?er7,Gf46Fl7:a#Ne7dX2"2%?a0mb!\#bFZb'7,3#;kN)%=^hF]*93+k-GA(Wb%2u
%PF<r3/d^<RlMc[IO1XWErFrlN8bJ\$_r\trWDgnIQ4BL-f,?g@l<@lZ)pu2le$Rstp!+aL<K<UU7ToC(f:3PEJ;.H&f)R0r"cd<<
%dmmj3d6_9T>Y)P6%IItrVW_t(@C*tE<9qq!J=;tc3%%6-8j>m:H)5BYh`R*pP^,k[S[@]9`5o0Nmmd06\S:i]ipeVO]Cegf$]'Tp
%pd^,<d1M>llp#pLkj^D]XiGMi.=(K4EZ1NEmX9*lDnsn:NXo0*_Z?_QeiJS9?L)A'Ug^s!`;V03Jo9c1UcRG8)/M=Jmp%LCQ*kCt
%\R0<&0en.Ge:%*ZouPZTds<IB;li:uhg5$:i52a+c6Z-J&cenL=1=;/O6km\@k9^:D`7`fH>`PhGdk@N)+[(3Lg[CS&r1-\J._s2
%THlcG:._-*Ess&8<oVs#ctbnDH?\5Q^D&'"YkDo<!'@WUVX4EGRg+hfGNoR$Y'\<B+SQI=nhr5LL')L@hY*/B.Z+O%481mb.6%q%
%Fm<MpH7o:T%mePnR7,#Up.O#d2N??)4-B*>l2Am/:j(KaPTBH(BC6hE`/X.ZTAN;qD7BK:&JJbm*BZ1k-ga*%:>@Nl=$`G_L<G4.
%'W2B!-$d#^A(1li2XoBWs/[Sb?laQ\pn[0Q\Ju'\pgE*XECfXOc8!>E_J\<c%?;*Te^OH>"sD_?Gc2O/"^e_)Y>!4nVTr/._4B(f
%?R5E@,#rA)?CB9]!De`"`Tiq@\[UK[]PRK8XfAJbMe;TqAN$FdOUPVc\Z8RK%@]]^.C818dNQ.!DU@BS^[kUOqit/$D!H?#fi0L;
%nQU+:EGWM(h`,mKgOgG45$H98C+)sZQs>$lp9WkFN+lq>-?0'2cimgq>l>V]1.Gio_Pu>b5RdQAGL%1Yj(DVS]l!d]D*<ju,RI?.
%Cp(%A2:>prRJX+k-f*O0!^tW;'M0Uc*l;L!4)]J\PoMpj8!sH,5g5GqqolkB^<M"FQNc<iS9Fu9RseUjr7@5B^:GteIXL<^0?HH#
%1*n"&<\'b!JK(ih+Ti(MS?Y^sJG_TS?\1UU4WEtHEMn'<p3pf3Uo!cZWVTh=gl4I+1"Q<Od!aF6gj5t)Xj?-f4-0@=QRtF+;44)M
%CB`2EH8ja1FkZDEY1))%V'8=n`^\j64J+H^$e\PE8_a6`#,WaB=i^jkC4B(OXjlb/.5e&L_s/$b'k+--lFq5hQ0,sXf,aDZV!\-3
%V*./t$ap2alGq*2H(fUbp'"ZV'Y5,.S!%u.HIPNOc*HhG?afpoXU<eQ;1g+IhV,6?e9_7.5*YgSIAO2Wgr6Q?9TEV$0$TiFQTf22
%^U3%'T)MGWIE!:hQoXK/"]nFR02:-?]de3ec*nJ^^^O:N-VZg0;q6BuMSCH8RI*QWCNB,rOURts!3aYu5d[MtU!FW#Wp8GlPICFR
%5sUQ^^DB7O.f6=m*[<_Ck?\1L+sagi%EHqNppJYiM@o339d_O]GEQ,U)hJBpXr430R'IM'Ui!/1P#.sORI]K@"Gm_^F'Hksn/boE
%rV4sH.M05QTftVfW=Kj]lV5!\FCnfC,R.g3*M(;E@&j@/]K:%W^Cs>-O&(XoBn9^8r2uE7DR*5$25H7gE0`Z$ckuZ2ZieUmQYesi
%W0^c;0A^$-e$\!0]-[6-J#Ya2j%o^JmW\^*a$5%Qr=XMPT76P3+91pSJ+qjhJ,J>FroWs)qVApapu-E]rIbjHa8`FDo\oOor:*S_
%lOSLCn\_!ugE6D*&fs(Tq!PbDr/^mW2h1H!!3K0![/~>
%AI9_PrivateDataEnd
